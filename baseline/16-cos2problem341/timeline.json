[{"memory":[[10384,10384]],"time":0.037109375,"type":"start"},{"compiler":[[10,8]],"memory":[[-7790736,451280]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":2.369873046875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.00048828125,"valid":0.99951171875}],"memory":[[17173328,297563584]],"mixsample":[[73.830322265625,"adjust",800],[122.135986328125,"ival-div",0],[479.00244140625,"ival-cos",1600],[0.02001953125,"ival-div",400],[0.034912109375,"ival-sub",2000],[0.021728515625,"ival-mult",2000],[4.369140625,"ival-assert",0],[117.272705078125,"ival-sub",0],[311.62353515625,"ival-cos",0],[0.014892578125,"ival-sub",400],[67.202880859375,"ival-cos",400],[41.502685546875,"adjust",2000],[0.026611328125,"ival-mult",800],[0.02294921875,"ival-sub",800],[74.7958984375,"ival-mult",0],[0.01708984375,"ival-mult",400],[163.686279296875,"ival-cos",3600],[0.033203125,"ival-div",800],[7.4619140625,"ival-true",0],[8.719482421875,"adjust",2800],[0.0341796875,"ival-div",2000],[6.8232421875,"exact",0]],"outcomes":[[165.712890625,1,"valid",1222],[802.7998046875,2,"valid",2175],[298.552490234375,3,"valid",593],[477.5966796875,0,"valid",4266]],"time":2080.677001953125,"type":"sample"},{"compiler":[[8,6],[21,8],[21,8]],"confusion":[[142,0,3,111]],"explanations":[["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","n/o",6,0,[["(*.f64 x x)","overflow",60]],[[]]],["/.f64","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","u/u",63,0,[["(-.f64 #s(literal 1 binary64) (cos.f64 x))","underflow",63],["(*.f64 x x)","underflow",63]],[[]]],["-.f64","(-.f64 #s(literal 1 binary64) (cos.f64 x))","cancellation",76,4,[],[[1]]]],"fperrors":[["(-.f64 #s(literal 1 binary64) (cos.f64 x))",77,0,false,1,[2.0471183723918002e+223]],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",69,1,[2.6254302998165065e+161],1,[1.2652425064179589e-155]],["#s(literal 1 binary64)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(*.f64 x x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,145],[0,111]],"maybe-confusion":[[142,0,0,3,3,108]],"memory":[[2084368,45006688]],"mixsample":[[6.3046875,"ival-div",0],[4.15869140625,"adjust",800],[4.60693359375,"ival-mult",0],[25.65576171875,"ival-cos",1600],[0.234375,"ival-assert",0],[12.625732421875,"ival-cos",3600],[5.621826171875,"ival-sub",0],[0.492431640625,"adjust",2800],[0.4345703125,"ival-true",0],[14.393798828125,"ival-cos",0],[3.3115234375,"ival-cos",400],[0.3505859375,"exact",0],[2.202392578125,"adjust",2000]],"outcomes":[[10.48046875,1,"valid",84],[44.086181640625,2,"valid",140],[21.4765625,3,"valid",44],[23.901123046875,0,"valid",244]],"time":148.01513671875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[8,6]],"egraph":[[0,1179,8,0.002706735],[10,1179,8,0.006763648],[9,1047,8,0.011331205],[8,629,8,0.006614153],[7,324,8,0.002876092],[6,188,8,0.001367719],[5,131,8,0.000807264],[4,82,8,0.000527726],[3,46,8,0.000324156],[2,30,8,0.000206059],[1,19,8,0.00015482],[0,10,8,0.000160785],[0,6,8,0.00010175],[7,1337,16,0.006372792],[6,1321,16,0.006940439],[5,1212,16,0.009716412],[4,772,16,0.009079131],[3,300,16,0.00518555],[2,102,16,0.002185742],[1,32,17,0.000612449],[0,8,17,0.000307772]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"memory":[[-827360,7008976]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(abs x)"]],"time":96.3779296875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[53824,53824]],"time":0.151123046875,"type":"eval"},{"alts":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","next",33.81497200573726,"binary64"]],"compiler":[[8,6]],"memory":[[292816,292816]],"time":0.468994140625,"type":"prune"},{"egraph":[[0,1179,19,0.003011645],[10,1179,19,0.006263605],[9,1047,19,0.010872585],[8,629,19,0.007037227],[7,324,19,0.002869821],[6,188,19,0.00136102],[5,131,19,0.000844285],[4,82,19,0.000538585],[3,46,19,0.000323751],[2,30,19,0.000204332],[1,19,19,0.00015746],[0,10,19,0.000158553],[0,6,19,0.000100382]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","cost-diff",0]],"memory":[[2168656,2168656]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(*.f64 x x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":44.73681640625,"type":"simplify"},{"compiler":[[21,8]],"locations":[["(*.f64 x x)","accuracy",0.0],["(cos.f64 x)","accuracy",0.12175751953688403],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","accuracy",15.921065016462242],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",17.14904098109514]],"memory":[[-6258720,10969184]],"mixsample":[[3.535888671875,"ival-div",0],[2.23046875,"adjust",800],[1.91552734375,"ival-mult",0],[14.11962890625,"ival-cos",1600],[0.119384765625,"ival-assert",0],[6.53076171875,"ival-cos",3600],[3.251220703125,"ival-sub",0],[0.255615234375,"adjust",2800],[0.203857421875,"ival-true",0],[8.22509765625,"ival-cos",0],[13.054931640625,"ival-cos",400],[0.170654296875,"exact",0],[1.330810546875,"adjust",2000]],"outcomes":[[17.80712890625,1,"valid",42],[24.758056640625,2,"valid",70],[11.20751953125,3,"valid",22],[13.13037109375,0,"valid",122]],"time":75.156982421875,"type":"localize"},{"count":[[4,16]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[1320992,1320992]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"series":[[0.9169921875,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","-inf"],[0.852783203125,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","inf"],[0.8720703125,"((/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x))","x","0"]],"time":2.9140625,"type":"series"},{"count":[[16,16]],"egraph":[[0,8119,135,0.077067274],[13,7710,153,0.04654417],[12,7708,153,0.021865686],[11,7690,153,0.024274553],[10,7480,153,0.020554326],[9,6581,153,0.028200658],[8,4960,153,0.025939751],[7,3409,153,0.021229661],[6,2536,153,0.010197221],[5,1981,153,0.008311917],[4,1281,153,0.007742098],[3,601,153,0.004124662],[2,258,153,0.001820499],[1,105,153,0.000806489],[0,42,153,0.000441448]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)"]],"memory":[[-593872,33967888]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/720 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(pow x 2)","(*.f64 x x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":394.81298828125,"type":"simplify"},{"count":[[4,629]],"egraph":[[0,9915,17,0.080649535],[3,2843,17,0.035802877],[2,270,17,0.012799026],[1,40,17,0.001782775],[0,10,17,0.000914244],[0,6,17,0.000116004]],"inputs":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 x x)"]],"memory":[[3848496,60364768]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 (neg.f64 x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (pow.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -4 binary64)))","(*.f64 (pow.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal -4 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (sin.f64 x) (/.f64 (sin.f64 x) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (exp.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) (log1p.f64 (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (cos.f64 x) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x) (*.f64 x (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (+.f64 x (*.f64 x (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 (neg.f64 (fma.f64 x x (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 x (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 x (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 x (*.f64 x (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x)))) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x x))) (neg.f64 (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 (neg.f64 (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (cos.f64 x) x))) x)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (/.f64 (cos.f64 x) x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 x (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 x x)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (+.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (fma.f64 x x (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x))) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x)))))","(/.f64 (pow.f64 (pow.f64 (/.f64 x (sin.f64 x)) #s(literal 2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (neg.f64 x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(neg.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (pow.f64 (sqrt.f64 x) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(fma.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 (neg.f64 x) x))) (/.f64 (*.f64 x (neg.f64 (cos.f64 x))) (*.f64 x (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x (cos.f64 x)) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))) (/.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 x (/.f64 x (cos.f64 x))))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) x)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) x)))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x (/.f64 x (cos.f64 x))))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))) (/.f64 (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))) (/.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 x (/.f64 x (cos.f64 x))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (neg.f64 (neg.f64 x))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) x) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))) (/.f64 (/.f64 (cos.f64 x) x) (neg.f64 (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) x) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x) x) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) x))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) x) x) (/.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) x) x))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -4 binary64)))))","(-.f64 (pow.f64 (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(-.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) x) x)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (*.f64 x x) (cos.f64 x)) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) (log1p.f64 (cos.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (sin.f64 x) (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(/.f64 (neg.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(neg.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (sin.f64 x) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (*.f64 (sin.f64 x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))) (/.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))))","(-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 4 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 9 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x))))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(+.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (cos.f64 x)))))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(+.f64 #s(literal 1 binary64) (cos.f64 x))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(neg.f64 (neg.f64 (cos.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (cos.f64 x)))","(*.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)","(*.f64 (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64)) x)","(*.f64 (pow.f64 (neg.f64 x) #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 x)) x)","(*.f64 (*.f64 #s(literal 1 binary64) x) x)","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x (pow.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64)))","(*.f64 x (pow.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 x (/.f64 x #s(literal 1 binary64)))","(*.f64 x (neg.f64 (neg.f64 x)))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (neg.f64 x) (neg.f64 (pow.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":306.053955078125,"type":"rewrite"},{"compiler":[[13688,1661]],"memory":[[7494928,51876016]],"time":67.01220703125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","fresh",33.29691195908841,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","fresh",48.31788680576535,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","next",32.79359328250719,"binary64"],["(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (*.f64 x x))","fresh",16.562923984277283,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","fresh",32.85715429212328,"binary64"],["(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","next",55.04570415650218,"binary64"],["(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","fresh",52.984617877266324,"binary64"],["(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","next",39.019490234897454,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",33.81497200573726,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","fresh",48.17886393122907,"binary64"],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","fresh",16.51599292892201,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","fresh",33.33904763798183,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","fresh",33.83758338672413,"binary64"],["(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","fresh",54.97310340376277,"binary64"],["(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","fresh",33.2850883763501,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",32.79978454227563,"binary64"],["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","next",16.042352027065,"binary64"],["(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal -4 binary64)))","fresh",54.794264733831994,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.669295761900397,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.408643660097695,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","fresh",29.684051035308705,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","next",28.9638490363403,"binary64"]],"compiler":[[14,9],[18,7],[8,6],[15,12],[12,9],[21,9],[19,9],[10,7],[8,6],[10,7],[11,8],[10,7],[10,8],[30,10],[8,7],[10,8],[11,8],[14,8],[25,15],[20,13],[15,11],[10,8],[14,9],[18,7],[8,6],[15,12],[12,9],[21,9],[19,9],[10,7],[10,7],[11,8],[10,7],[10,8],[30,10],[8,7],[10,8],[11,8],[14,8],[25,15],[20,13],[15,11],[10,8]],"count":[[646,22]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[645,21],"picked":[1,1]}],"memory":[[-7577008,32319328]],"min-error":[[0.010097509768442016,"binary64"]],"time":159.287841796875,"type":"prune"},{"egraph":[[0,8016,128,0.0417807],[7,7379,128,0.029660747],[6,6890,128,0.020328548],[5,5232,128,0.032774944],[4,3290,128,0.03288187],[3,1650,128,0.028736247],[2,272,130,0.008961255],[1,95,131,0.001592432],[0,49,134,0.001223814],[0,30,151,0.000436852]],"inputs":[["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (sin.f64 x) (*.f64 x x))","(sin.f64 x)","x","(*.f64 x x)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","(*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 x x)","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(-.f64 x (*.f64 x (cos.f64 x)))","x","(*.f64 x (cos.f64 x))","(cos.f64 x)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(*.f64 x (cos.f64 x))","cost-diff",0],["(-.f64 x (*.f64 x (cos.f64 x)))","cost-diff",0],["(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","cost-diff",2],["(*.f64 (neg.f64 x) x)","cost-diff",0],["(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","cost-diff",4],["(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))","cost-diff",4],["(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","cost-diff",5],["(cos.f64 x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","cost-diff",0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(/.f64 (sin.f64 x) (*.f64 x x))","cost-diff",0],["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","cost-diff",0]],"memory":[[-348112,15896688]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(*.f64 (/.f64 (tan.f64 (/.f64 x #s(literal 2 binary64))) (*.f64 x x)) (sin.f64 x))","(/.f64 (sin.f64 x) (*.f64 x x))","(/.f64 (/.f64 (sin.f64 x) x) x)","(sin.f64 x)","x","(*.f64 x x)","(tan.f64 (/.f64 x #s(literal 2 binary64)))","(/.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","#s(literal 1 binary64)","(cos.f64 x)","x","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)","(*.f64 (neg.f64 x) x)","(neg.f64 x)","x","(*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))","(*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x))","(cos.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 x x)","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 x (*.f64 x (cos.f64 x)))","(fma.f64 (neg.f64 x) (cos.f64 x) x)","x","(*.f64 x (cos.f64 x))","(*.f64 (cos.f64 x) x)","(cos.f64 x)","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":278.22509765625,"type":"simplify"},{"compiler":[[151,28]],"locations":[["(*.f64 x (cos.f64 x))","accuracy",0.12109375],["(cos.f64 x)","accuracy",0.12175751953688403],["(-.f64 x (*.f64 x (cos.f64 x)))","accuracy",10.763913743159632],["(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","accuracy",27.141771383445572],["(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","accuracy",0.10775375976844201],["(cos.f64 x)","accuracy",0.12175751953688403],["(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))","accuracy",15.435269423302591],["(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","accuracy",45.34358177652102],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","accuracy",0.0703125],["(cos.f64 x)","accuracy",0.12175751953688403],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","accuracy",14.782998043228252],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",17.14904098109514],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","accuracy",28.9638490363403],["(sin.f64 x)","accuracy",0.125],["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","accuracy",0.171875],["(tan.f64 (/.f64 x #s(literal 2 binary64)))","accuracy",0.2285538086106521],["(/.f64 (sin.f64 x) (*.f64 x x))","accuracy",15.25527076841669]],"memory":[[-178544,40388640]],"mixsample":[[6.44140625,"adjust",800],[19.4609375,"ival-div",0],[0.006103515625,"ival-mult",1200],[13.65185546875,"ival-cos",1600],[0.009033203125,"ival-sub",2000],[0.018798828125,"ival-mult",2000],[0.134521484375,"ival-assert",0],[7.939208984375,"ival-sub",0],[6.70947265625,"ival-tan",0],[7.040283203125,"ival-cos",0],[0.010986328125,"ival-cos",1200],[0.00390625,"ival-sub",400],[2.082763671875,"ival-cos",400],[3.8662109375,"adjust",2000],[4.96875,"ival-pow",0],[0.260009765625,"ival-mult",3600],[12.4140625,"ival-mult",0],[3.379150390625,"ival-mult",400],[1.6923828125,"ival-mult",1600],[8.55224609375,"ival-sin",0],[0.635009765625,"ival-cos",2000],[6.920654296875,"ival-cos",3600],[0.26025390625,"ival-true",0],[0.87744140625,"adjust",2800],[0.02392578125,"ival-div",2000],[0.6162109375,"exact",0],[1.28271484375,"ival-neg",0]],"outcomes":[[18.75830078125,1,"valid",42],[52.5732421875,2,"valid",70],[22.9453125,3,"valid",22],[44.371337890625,0,"valid",122]],"time":165.345947265625,"type":"localize"},{"count":[[17,54]],"inputs":[["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (sin.f64 x) (*.f64 x x))","(sin.f64 x)","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(-.f64 x (*.f64 x (cos.f64 x)))","(*.f64 x (cos.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))"]],"memory":[[-434752,7134800]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(/ 1 x)","(/ (+ 1 (* -1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(pow x 2)","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1/2 (pow x 4))","(* (pow x 4) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1 (pow x 4))","(* -1 (pow x 2))","(* 1/2 (pow x 3))","(* (pow x 3) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 3) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 3) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* x (+ 1 (* -1/2 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (sin x) (pow x 2))","(sin x)","(/ (- 1 (cos x)) (pow x 2))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(cos x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (* (pow x 2) (+ 1 (* -1 (cos x)))))","(* x (- 1 (cos x)))","(* x (cos x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* x (+ 1 (* -1 (cos x))))"]],"series":[[8.237060546875,"((* (/ (sin x) (* x x)) (tan (/ x 2))) (/ (sin x) (* x x)) (sin x) (* x x) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (cos x) (/ (- (* (neg x) x) (* (* (neg x) x) (cos x))) (* (* (neg x) x) (* x x))) (- (* (neg x) x) (* (* (neg x) x) (cos x))) (* (* (neg x) x) (* x x)) (* (neg x) x) (/ (- x (* x (cos x))) (pow x 3)) (- x (* x (cos x))) (* x (cos x)) (tan (/ x 2)))","x","-inf"],[4.8349609375,"((* (/ (sin x) (* x x)) (tan (/ x 2))) (/ (sin x) (* x x)) (sin x) (* x x) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (cos x) (/ (- (* (neg x) x) (* (* (neg x) x) (cos x))) (* (* (neg x) x) (* x x))) (- (* (neg x) x) (* (* (neg x) x) (cos x))) (* (* (neg x) x) (* x x)) (* (neg x) x) (/ (- x (* x (cos x))) (pow x 3)) (- x (* x (cos x))) (* x (cos x)) (tan (/ x 2)))","x","inf"],[2.993896484375,"((* (/ (sin x) (* x x)) (tan (/ x 2))) (/ (sin x) (* x x)) (sin x) (* x x) (/ (- 1 (cos x)) (* x x)) (/ (/ (- 1 (cos x)) x) x) (/ (- 1 (cos x)) x) (- 1 (cos x)) (cos x) (/ (- (* (neg x) x) (* (* (neg x) x) (cos x))) (* (* (neg x) x) (* x x))) (- (* (neg x) x) (* (* (neg x) x) (cos x))) (* (* (neg x) x) (* x x)) (* (neg x) x) (/ (- x (* x (cos x))) (pow x 3)) (- x (* x (cos x))) (* x (cos x)) (tan (/ x 2)))","x","0"]],"time":17.47900390625,"type":"series"},{"count":[[54,53]],"egraph":[[0,8047,504,0.107444078],[5,6602,564,0.029719929],[4,5183,564,0.025412025],[3,2787,564,0.022957638],[2,929,565,0.013354873],[1,373,565,0.003501877],[0,127,577,0.001270211]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(/ 1 x)","(/ (+ 1 (* -1/6 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(pow x 2)","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1/2 (pow x 4))","(* (pow x 4) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1 (pow x 4))","(* -1 (pow x 2))","(* 1/2 (pow x 3))","(* (pow x 3) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 3) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 3) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(* x (+ 1 (* -1/2 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (sin x) (pow x 2))","(sin x)","(/ (- 1 (cos x)) (pow x 2))","(/ (- 1 (cos x)) x)","(- 1 (cos x))","(cos x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(* -1 (* (pow x 2) (+ 1 (* -1 (cos x)))))","(* x (- 1 (cos x)))","(* x (cos x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(* x (+ 1 (* -1 (cos x))))"]],"memory":[[7392944,43842560]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(pow x 2)","(*.f64 x x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* -1/2 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64))","(* (pow x 4) (- (* 1/24 (pow x 2)) 1/2))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64)))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(* -1 (pow x 4))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* 1/2 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))","(* (pow x 3) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(* (pow x 3) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(* (pow x 3) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(* x (+ 1 (* -1/2 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin x) (pow x 2))","(/.f64 (/.f64 (sin.f64 x) x) x)","(sin x)","(sin.f64 x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/ (- 1 (cos x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(* -1 (* (pow x 2) (+ 1 (* -1 (cos x)))))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)","(* x (- 1 (cos x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(* x (cos x))","(*.f64 (cos.f64 x) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(* x (+ 1 (* -1 (cos x))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":315.740966796875,"type":"simplify"},{"count":[[17,285]],"egraph":[[0,1295,111,0.009339577],[1,182,111,0.005341042],[0,49,117,0.001955069],[0,30,121,0.000294665]],"inputs":[["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (sin.f64 x) (*.f64 x x))","(sin.f64 x)","(*.f64 x x)","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(-.f64 x (*.f64 x (cos.f64 x)))","(*.f64 x (cos.f64 x))","(tan.f64 (/.f64 x #s(literal 2 binary64)))"]],"memory":[[-12000160,13426096]],"outputs":[["(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (sin.f64 x)))","(*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) x) x)","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (sin.f64 x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) x)","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (*.f64 x (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (sin.f64 x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x)))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 x (/.f64 x (sin.f64 x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 x x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (sin.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (*.f64 x (/.f64 x (sin.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (neg.f64 x))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (*.f64 x x))","(/.f64 (/.f64 (sin.f64 x) x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (/.f64 x (sin.f64 x)))))","(/.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (sin.f64 x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (/.f64 x (sin.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (sin.f64 x))))","(/.f64 (sin.f64 x) (*.f64 x x))","(neg.f64 (/.f64 (neg.f64 (sin.f64 x)) (*.f64 x x)))","(neg.f64 (/.f64 (sin.f64 x) (*.f64 (neg.f64 x) x)))","(sin.f64 x)","(*.f64 (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1 binary64)))","(*.f64 (neg.f64 (neg.f64 x)) x)","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 x (neg.f64 (neg.f64 x)))","(*.f64 x x)","(pow.f64 x #s(literal 2 binary64))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (*.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)) (fma.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 (cos.f64 x) x) x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 x x)))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)) x))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64))))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (/.f64 (cos.f64 x) x) (/.f64 (cos.f64 x) x))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (fma.f64 (/.f64 (cos.f64 x) x) (/.f64 (cos.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (cos.f64 x) x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (cos.f64 x) x)))","(*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 x))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (sin.f64 x) (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(*.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)))","(*.f64 (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))))","(*.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (/.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (neg.f64 (pow.f64 x #s(literal 3 binary64)))) x))","(pow.f64 (*.f64 (neg.f64 x) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) x) x)","(/.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (neg.f64 (pow.f64 x #s(literal 3 binary64)))) x)","(/.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (neg.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 x x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x))) (*.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x)))) (fma.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) (fma.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 (neg.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)) (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)))) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x))) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)))))","(neg.f64 (/.f64 (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(neg.f64 (/.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (neg.f64 x) (neg.f64 x)) (/.f64 x (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 x (neg.f64 (pow.f64 x #s(literal 3 binary64)))) (/.f64 (neg.f64 x) x) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 x (*.f64 (neg.f64 x) x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (neg.f64 x) (*.f64 x x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 x (neg.f64 x)) (/.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (/.f64 x (*.f64 x x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 x (*.f64 x x)) (/.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 (neg.f64 x) (/.f64 x (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(fma.f64 x (/.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(-.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x)))","(+.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x x)) (neg.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (cos.f64 x) x) x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))))","(*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x))","(/.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (*.f64 (cos.f64 x) x) x))) (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 (neg.f64 x)) (pow.f64 x #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64)))))","(neg.f64 (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (neg.f64 x) (cos.f64 x) x))))","(fma.f64 (neg.f64 (neg.f64 x)) (*.f64 (cos.f64 x) x) (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal -1 binary64) (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x))","(fma.f64 (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 x) x))","(fma.f64 (neg.f64 x) (*.f64 (neg.f64 (cos.f64 x)) x) (*.f64 (neg.f64 x) x))","(fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x))","(fma.f64 (cos.f64 x) (*.f64 x x) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 x x) (cos.f64 x) (*.f64 (neg.f64 x) x))","(fma.f64 x (*.f64 (cos.f64 x) x) (*.f64 (neg.f64 x) x))","(fma.f64 x (neg.f64 x) (*.f64 (*.f64 (cos.f64 x) x) x))","(-.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x))) (/.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)) (*.f64 (neg.f64 x) (fma.f64 (cos.f64 x) x x)) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))))","(-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)))","(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x))","(*.f64 (*.f64 (neg.f64 x) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 x (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) x)","(*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))","(*.f64 x (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (*.f64 x (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 2 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 (neg.f64 x) x)","(*.f64 x (neg.f64 x))","(neg.f64 (*.f64 x x))","(-.f64 #s(literal 0 binary64) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 (neg.f64 x) (cos.f64 x) x))","(*.f64 (neg.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 (neg.f64 x) (cos.f64 x) x)))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (neg.f64 x) (cos.f64 x) x)) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) x) (*.f64 x x))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -3 binary64))) (fma.f64 (cos.f64 x) x x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -3 binary64))) (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (pow.f64 x #s(literal 3 binary64)))) (*.f64 (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64))) (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64))))) (fma.f64 x (pow.f64 x #s(literal -3 binary64)) (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64))) (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64))) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) x x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (cos.f64 x) x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (cos.f64 x) x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (neg.f64 x) (cos.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x)) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (neg.f64 x) (cos.f64 x) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (neg.f64 x) (cos.f64 x) x)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 x (pow.f64 x #s(literal -3 binary64)) (neg.f64 (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64)))))","(-.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64))))","(+.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (cos.f64 x) x) (pow.f64 x #s(literal -3 binary64)))))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) x x)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) x) (*.f64 (neg.f64 (cos.f64 x)) x))) (-.f64 x (*.f64 (neg.f64 (cos.f64 x)) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (neg.f64 (cos.f64 x)) x) (*.f64 (neg.f64 (cos.f64 x)) x)) (*.f64 (*.f64 (cos.f64 x) x) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) x x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) x x) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) x) x)","(fma.f64 (neg.f64 (cos.f64 x)) x x)","(fma.f64 (neg.f64 x) (cos.f64 x) x)","(fma.f64 (cos.f64 x) (neg.f64 x) x)","(fma.f64 x (neg.f64 (cos.f64 x)) x)","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (cos.f64 x) x x)) (/.f64 (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 2 binary64)) (fma.f64 (cos.f64 x) x x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x))) (/.f64 (pow.f64 (*.f64 (cos.f64 x) x) #s(literal 3 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) (fma.f64 (cos.f64 x) x x) (*.f64 x x))))","(-.f64 x (*.f64 (cos.f64 x) x))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) x) x)","(+.f64 x (*.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (cos.f64 x) x)","(*.f64 x (cos.f64 x))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":162.339111328125,"type":"rewrite"},{"compiler":[[7318,1076]],"memory":[[5772592,29459792]],"time":39.73388671875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","fresh",54.82482434702353,"binary64"],["(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","fresh",54.72504584174065,"binary64"],["(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","fresh",33.827485876955684,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","fresh",48.31788680576535,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x)) x)","fresh",33.81624452318665,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","done",32.79359328250719,"binary64"],["(/.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) x) x)","fresh",15.51828265987637,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","fresh",32.809882052044074,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","next",32.85715429212328,"binary64"],["(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","done",39.019490234897454,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",33.81497200573726,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","fresh",48.17886393122907,"binary64"],["(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","next",55.03354266637298,"binary64"],["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","next",0.19472509768442017,"binary64"],["(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","fresh",16.51599292892201,"binary64"],["(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x)))))","fresh",0.7014869635345528,"binary64"],["(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x))) x)","fresh",32.822715654461504,"binary64"],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","fresh",0.6796707037661107,"binary64"],["(/.f64 #s(approx (- (* (neg x) x) (* (* (neg x) x) (cos x))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","fresh",55.03494396853043,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","fresh",33.33904763798183,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","next",33.83758338672413,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",32.79978454227563,"binary64"],["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","fresh",16.042352027065,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.669295761900397,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.408643660097695,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","next",29.684051035308705,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",28.9638490363403,"binary64"]],"compiler":[[19,9],[19,10],[12,7],[18,7],[14,9],[8,6],[11,8],[10,7],[12,9],[10,7],[8,6],[10,7],[20,10],[11,8],[11,8],[18,12],[12,9],[11,8],[30,17],[10,7],[10,8],[10,8],[11,8],[25,15],[20,13],[15,11],[10,8],[19,9],[19,10],[12,7],[18,7],[14,9],[11,8],[10,7],[12,9],[10,7],[20,10],[11,8],[11,8],[18,12],[12,9],[11,8],[30,17],[10,7],[10,8],[10,8],[11,8],[25,15],[20,13],[15,11]],"count":[[398,27]],"kept":[{"done":[1,1],"fresh":[16,9],"new":[376,14],"picked":[5,3]}],"memory":[[-224608,24090448]],"min-error":[[0.0,"binary64"]],"time":21.572998046875,"type":"prune"},{"egraph":[[0,8067,164,0.038549912],[8,7488,164,0.022401853],[7,6836,164,0.027033508],[6,6084,164,0.022676545],[5,4319,164,0.028112434],[4,2449,164,0.02150198],[3,729,164,0.012112129],[2,257,168,0.002793995],[1,112,174,0.001187183],[0,59,178,0.000560627],[0,34,192,0.000356354]],"inputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (sin.f64 x) x)","(sin.f64 x)","x","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","#s(literal -1 binary64)","(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 x x)","x","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","#s(literal 1 binary64)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(neg.f64 (/.f64 (cos.f64 x) x))","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(neg.f64 x)","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 (cos.f64 x) x) x)","(*.f64 (cos.f64 x) x)","(cos.f64 x)","x","(*.f64 (neg.f64 x) x)","(neg.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 x x)"]],"locations":[["(*.f64 (*.f64 (cos.f64 x) x) x)","cost-diff",0],["(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","cost-diff",3],["(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","cost-diff",4],["(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","cost-diff",5],["(neg.f64 (/.f64 (cos.f64 x) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","cost-diff",1],["(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","cost-diff",3],["(-.f64 (cos.f64 x) #s(literal 1 binary64))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(/.f64 (sin.f64 x) x)","cost-diff",0],["(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","cost-diff",0],["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","cost-diff",0]],"memory":[[775296,17493088]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x))","(/.f64 (sin.f64 x) x)","(sin.f64 x)","x","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal -1/24 binary64)","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","#s(literal -1 binary64)","(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 x x)","x","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(cos.f64 x)","#s(literal 1 binary64)","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(neg.f64 (/.f64 (cos.f64 x) x))","(/.f64 (cos.f64 x) (neg.f64 x))","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(neg.f64 x)","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))","(*.f64 (*.f64 (cos.f64 x) x) x)","(*.f64 (cos.f64 x) x)","(cos.f64 x)","x","(*.f64 (neg.f64 x) x)","(neg.f64 x)","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 x x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":248.903076171875,"type":"simplify"},{"compiler":[[188,34]],"locations":[["(*.f64 (cos.f64 x) x)","accuracy",0.12109375],["(cos.f64 x)","accuracy",0.12175751953688403],["(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","accuracy",15.435269423302591],["(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","accuracy",45.34358177652102],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","accuracy",0.0703125],["(/.f64 (cos.f64 x) x)","accuracy",0.09765625],["(cos.f64 x)","accuracy",0.12175751953688403],["(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","accuracy",32.24226762812759],["(cos.f64 x)","accuracy",0.12175751953688403],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","accuracy",0.6034606451554585],["(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","accuracy",15.779480183180755],["(-.f64 (cos.f64 x) #s(literal 1 binary64))","accuracy",17.14904098109514],["(*.f64 x x)","accuracy",0.0],["(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","accuracy",0.08984375],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","accuracy",29.684051035308705],["(sin.f64 x)","accuracy",0.125],["(/.f64 (sin.f64 x) x)","accuracy",0.1328125],["(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","accuracy",0.16796875],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.2285538086106521]],"memory":[[1122416,51093600]],"mixsample":[[23.34765625,"ival-div",0],[8.0966796875,"adjust",800],[0.260986328125,"ival-neg",2400],[0.349365234375,"ival-div",400],[0.15380859375,"ival-assert",0],[0.13427734375,"ival-div",1600],[0.399169921875,"ival-neg",800],[8.357421875,"ival-sub",0],[6.857421875,"ival-tan",0],[7.0732421875,"ival-cos",0],[5.028564453125,"const",0],[0.69677734375,"ival-cos",1200],[0.585205078125,"ival-cos",400],[0.126708984375,"ival-neg",400],[0.005126953125,"ival-mult",800],[4.072021484375,"ival-add",0],[0.276123046875,"ival-mult",3600],[0.005126953125,"ival-sub",800],[3.892578125,"ival-cos",800],[0.298828125,"ival-neg",1200],[1.312255859375,"ival-mult",1600],[1.503173828125,"adjust",2800],[0.173583984375,"ival-div",2000],[0.689697265625,"ival-div",2400],[4.177978515625,"ival-cos",1600],[0.02001953125,"ival-mult",2000],[0.10791015625,"ival-neg",1600],[21.60791015625,"ival-cos",2400],[5.011962890625,"adjust",2000],[1.032470703125,"ival-div",1200],[14.42822265625,"ival-mult",0],[2.488037109375,"ival-mult",400],[9.381103515625,"ival-sin",0],[0.005126953125,"ival-add",2000],[1.16650390625,"ival-cos",2000],[0.9609375,"ival-div",800],[7.59912109375,"ival-cos",3600],[0.097412109375,"ival-neg",2000],[0.271484375,"ival-true",0],[0.52880859375,"exact",0],[2.962890625,"ival-neg",0]],"outcomes":[[23.241455078125,1,"valid",42],[87.180908203125,2,"valid",69],[38.690185546875,3,"valid",23],[52.807373046875,0,"valid",122]],"time":235.973876953125,"type":"localize"},{"count":[[22,74]],"inputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (sin.f64 x) x)","(sin.f64 x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (/.f64 (cos.f64 x) x))","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 (cos.f64 x) x) x)","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(cos.f64 x)","(/.f64 (cos.f64 x) x)","(*.f64 (cos.f64 x) x)"]],"memory":[[-9657552,8101936]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/6 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(pow x 2)","-2","(- (* -1/6 (pow x 2)) 2)","(- (* (pow x 2) (- (* -1/120 (pow x 2)) 1/6)) 2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -1/3024 (pow x 2)) 1/120)) 1/6)) 2)","(* -1/2 (pow x 2))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1/2 x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(* -1 (pow x 4))","(* -1/2 (pow x 4))","(* (pow x 4) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* (pow x 2) (+ 1 (* -1/2 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ 1 x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(* x (+ 1 (* -1/2 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (* (sin x) (sin (* 1/2 x))) (* x (cos (* 1/2 x))))","(/ (sin x) x)","(sin x)","(/ (- 1 (cos x)) (pow x 2))","(* -1/24 (pow x 2))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/ (pow x 2) (- (cos x) 1))","(- (cos x) 1)","(/ (- (cos x) 1) x)","(* -1 (/ (cos x) x))","(* (pow x 2) (- (cos x) 1))","(* (pow x 2) (cos x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(cos x)","(/ (cos x) x)","(* x (cos x))","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/ (+ 1 (* -1 (cos x))) (pow x 2))"]],"series":[[9.35595703125,"((/ (* (/ (sin x) x) (tan (* 1/2 x))) x) (* (/ (sin x) x) (tan (* 1/2 x))) (/ (sin x) x) (sin x) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (/ -1 (/ (* x x) (- (cos x) 1))) (/ (* x x) (- (cos x) 1)) (- (cos x) 1) (- (/ -1 x) (neg (/ (cos x) x))) (/ (- (/ -1 x) (neg (/ (cos x) x))) (neg x)) (/ -1 x) (neg (/ (cos x) x)) (/ (+ (* (* (cos x) x) x) (* (neg x) x)) (* (* (neg x) x) (* x x))) (* (* (neg x) x) (* x x)) (+ (* (* (cos x) x) x) (* (neg x) x)) (* (* (cos x) x) x) (tan (* 1/2 x)) (cos x) (/ (cos x) x) (* (cos x) x))","x","-inf"],[10.702880859375,"((/ (* (/ (sin x) x) (tan (* 1/2 x))) x) (* (/ (sin x) x) (tan (* 1/2 x))) (/ (sin x) x) (sin x) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (/ -1 (/ (* x x) (- (cos x) 1))) (/ (* x x) (- (cos x) 1)) (- (cos x) 1) (- (/ -1 x) (neg (/ (cos x) x))) (/ (- (/ -1 x) (neg (/ (cos x) x))) (neg x)) (/ -1 x) (neg (/ (cos x) x)) (/ (+ (* (* (cos x) x) x) (* (neg x) x)) (* (* (neg x) x) (* x x))) (* (* (neg x) x) (* x x)) (+ (* (* (cos x) x) x) (* (neg x) x)) (* (* (cos x) x) x) (tan (* 1/2 x)) (cos x) (/ (cos x) x) (* (cos x) x))","x","inf"],[2.40185546875,"((/ (* (/ (sin x) x) (tan (* 1/2 x))) x) (* (/ (sin x) x) (tan (* 1/2 x))) (/ (sin x) x) (sin x) (/ (- 1 (cos x)) (* x x)) (+ (* (* x x) -1/24) 1/2) (* x x) (/ -1 (/ (* x x) (- (cos x) 1))) (/ (* x x) (- (cos x) 1)) (- (cos x) 1) (- (/ -1 x) (neg (/ (cos x) x))) (/ (- (/ -1 x) (neg (/ (cos x) x))) (neg x)) (/ -1 x) (neg (/ (cos x) x)) (/ (+ (* (* (cos x) x) x) (* (neg x) x)) (* (* (neg x) x) (* x x))) (* (* (neg x) x) (* x x)) (+ (* (* (cos x) x) x) (* (neg x) x)) (* (* (cos x) x) x) (tan (* 1/2 x)) (cos x) (/ (cos x) x) (* (cos x) x))","x","0"]],"time":23.81005859375,"type":"series"},{"count":[[74,73]],"egraph":[[0,8024,681,0.09596882],[5,7138,765,0.021210614],[4,4610,767,0.025627014],[3,3179,767,0.016851657],[2,1039,773,0.01333926],[1,430,791,0.005080949],[0,160,791,0.001936742]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/6 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(pow x 2)","-2","(- (* -1/6 (pow x 2)) 2)","(- (* (pow x 2) (- (* -1/120 (pow x 2)) 1/6)) 2)","(- (* (pow x 2) (- (* (pow x 2) (- (* -1/3024 (pow x 2)) 1/120)) 1/6)) 2)","(* -1/2 (pow x 2))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* -1/2 x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(/ -1 x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(* -1 (pow x 4))","(* -1/2 (pow x 4))","(* (pow x 4) (- (* 1/24 (pow x 2)) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(* (pow x 2) (+ 1 (* -1/2 (pow x 2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ 1 x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(* x (+ 1 (* -1/2 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (* (sin x) (sin (* 1/2 x))) (* x (cos (* 1/2 x))))","(/ (sin x) x)","(sin x)","(/ (- 1 (cos x)) (pow x 2))","(* -1/24 (pow x 2))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/ (pow x 2) (- (cos x) 1))","(- (cos x) 1)","(/ (- (cos x) 1) x)","(* -1 (/ (cos x) x))","(* (pow x 2) (- (cos x) 1))","(* (pow x 2) (cos x))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(cos x)","(/ (cos x) x)","(* x (cos x))","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/ (+ 1 (* -1 (cos x))) (pow x 2))"]],"memory":[[6809872,45645312]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/6 (pow x 2)))","(fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6)))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(pow x 2)","(*.f64 x x)","-2","#s(literal -2 binary64)","(- (* -1/6 (pow x 2)) 2)","(fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))","(- (* (pow x 2) (- (* -1/120 (pow x 2)) 1/6)) 2)","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal -2 binary64))","(- (* (pow x 2) (- (* (pow x 2) (- (* -1/3024 (pow x 2)) 1/120)) 1/6)) 2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3024 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal -2 binary64))","(* -1/2 (pow x 2))","(*.f64 #s(literal -1/2 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(* (pow x 2) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* x (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/2 (pow x 2)) 1) x)","(fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/2 (* -1/24 (pow x 2)))) 1) x)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x (/.f64 #s(literal -1 binary64) x))","(/ (- (* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))) 1) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x (/.f64 #s(literal -1 binary64) x))","(* -1 (pow x 4))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(* -1/2 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64))","(* (pow x 4) (- (* 1/24 (pow x 2)) 1/2))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 4) (- (* (pow x 2) (+ 1/24 (* (pow x 2) (- (* 1/40320 (pow x 2)) 1/720)))) 1/2))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)))","(* (pow x 2) (+ 1 (* -1/2 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64) (*.f64 x x))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/24 binary64) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64) (*.f64 x x)))","(* (pow x 2) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/2 binary64) (*.f64 x x)))","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* -1/2 (pow x 2))) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64)) x)","(* x (+ 1 (* -1/2 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (* (sin x) (sin (* 1/2 x))) (* x (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin x) x)","(/.f64 (sin.f64 x) x)","(sin x)","(sin.f64 x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(* -1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/24 binary64))","(* (pow x 2) (- (* 1/2 (/ 1 (pow x 2))) 1/24))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/ (pow x 2) (- (cos x) 1))","(*.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x)","(- (cos x) 1)","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(/ (- (cos x) 1) x)","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(* -1 (/ (cos x) x))","(/.f64 (cos.f64 x) (neg.f64 x))","(* (pow x 2) (- (cos x) 1))","(*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)","(* (pow x 2) (cos x))","(*.f64 (*.f64 (cos.f64 x) x) x)","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(cos x)","(cos.f64 x)","(/ (cos x) x)","(/.f64 (cos.f64 x) x)","(* x (cos x))","(*.f64 (cos.f64 x) x)","(* -1 (/ (+ 1 (* -1 (cos x))) x))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":291.412109375,"type":"simplify"},{"count":[[22,1226]],"egraph":[[0,8827,135,0.074172362],[2,1723,135,0.032090039],[1,228,142,0.007124462],[0,59,154,0.00184925],[0,34,160,0.000494466]],"inputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (sin.f64 x) x)","(sin.f64 x)","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(*.f64 x x)","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (/.f64 (cos.f64 x) x))","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 (cos.f64 x) x) x)","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(cos.f64 x)","(/.f64 (cos.f64 x) x)","(*.f64 (cos.f64 x) x)"]],"memory":[[-1829296,68240768]],"outputs":[["(*.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x) (/.f64 (/.f64 (sin.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) (/.f64 (/.f64 (sin.f64 x) x) x))","(*.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) x))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (/.f64 (sin.f64 x) x) (neg.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (/.f64 (sin.f64 x) x) x))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal 1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (neg.f64 x)))","(*.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x x)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) x))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (neg.f64 (/.f64 (sin.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (sin.f64 x) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)))","(*.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 (sin.f64 x) x) x)))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 (sin.f64 x) x) x))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (*.f64 (/.f64 x (sin.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)))","(pow.f64 (/.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))) x)","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 (/.f64 x (sin.f64 x)) x)))","(/.f64 (/.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)) (neg.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x)) (/.f64 x (sin.f64 x)))","(/.f64 (*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) x)","(/.f64 (*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 x (sin.f64 x)) x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(/.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) x)","(neg.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 x (/.f64 (sin.f64 x) x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (neg.f64 (sin.f64 x)) x))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 (/.f64 (neg.f64 (sin.f64 x)) x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x) (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(pow.f64 (/.f64 x (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (sin.f64 x)))) x)","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 x) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (sin.f64 x)))) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 x (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) (neg.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 (/.f64 x (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (*.f64 x (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))) x)","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) x)","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (sin.f64 x) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (sin.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 x (sin.f64 x)))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))) (neg.f64 x))","(/.f64 (neg.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (sin.f64 x))) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 x (sin.f64 x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) (/.f64 x (sin.f64 x)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (/.f64 x (sin.f64 x)))","(*.f64 (/.f64 (sin.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) x))","(*.f64 (sin.f64 x) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 x (sin.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))) (neg.f64 x))","(/.f64 (/.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) x)","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (sin.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (sin.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (sin.f64 x)))","(/.f64 (sin.f64 x) x)","(neg.f64 (/.f64 (neg.f64 (sin.f64 x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (neg.f64 (sin.f64 x)) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (sin.f64 x))) #s(literal -1 binary64)))","(neg.f64 (sin.f64 (neg.f64 x)))","(sin.f64 x)","(-.f64 (*.f64 (sin.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (cos.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))","(/.f64 (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal -1/48 binary64)))) (fma.f64 #s(literal -1/13824 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))))","(fma.f64 (*.f64 #s(literal -1/24 binary64) x) x #s(literal 1/2 binary64))","(fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal -1/24 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal -1/24 binary64) (*.f64 x x)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal -1/24 binary64) (*.f64 x x)))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(*.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) x) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64))) x)","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))) x)","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 x (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (cos.f64 x))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 x x) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (*.f64 x x) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))) x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))) x)","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) (neg.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x)) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (/.f64 (cos.f64 x) (*.f64 (neg.f64 x) x)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(*.f64 (/.f64 (neg.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 x (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 x (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 x x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (neg.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (neg.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 x x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 x x) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 x (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 x x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x)","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (*.f64 x x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x))","(*.f64 x (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(pow.f64 (/.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (*.f64 (*.f64 x x) #s(literal 1 binary64)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (neg.f64 x) x)) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(pow.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (neg.f64 (cos.f64 x))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 (neg.f64 (cos.f64 x)))) (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(fma.f64 (cos.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (cos.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 x) #s(literal -1 binary64))))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 (cos.f64 x) #s(literal 1 binary64))","(+.f64 (cos.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (cos.f64 x))))","(+.f64 #s(literal -1 binary64) (cos.f64 x))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64))) (fma.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)) (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)) (/.f64 (cos.f64 x) x)))))","(/.f64 (+.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 x (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 x (*.f64 (cos.f64 x) x))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))) (*.f64 x (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))))) (*.f64 x (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))) (*.f64 x (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64))))) (*.f64 x (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))))","(/.f64 (-.f64 x (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (neg.f64 x)) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x)))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))))) (*.f64 (neg.f64 x) (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))) (*.f64 (neg.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64))))) (*.f64 (neg.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (cos.f64 x)))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) x (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (neg.f64 x) (*.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) x (neg.f64 x)) (*.f64 x x))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 x) (*.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) x (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 (neg.f64 (cos.f64 x)) (neg.f64 x) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (fma.f64 (cos.f64 x) (neg.f64 x) (*.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 x (cos.f64 x))) (neg.f64 x)))","(/.f64 (+.f64 x (*.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (+.f64 x (/.f64 (neg.f64 x) (cos.f64 x))) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (+.f64 x (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64) (*.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 x (cos.f64 x)) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 x) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (+.f64 x (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (+.f64 x (*.f64 (neg.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (+.f64 (/.f64 x (cos.f64 x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal -1 binary64))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (cos.f64 x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x)","(/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 (cos.f64 x) x))","(fma.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(fma.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) x))","(-.f64 (/.f64 (fma.f64 (cos.f64 x) x #s(literal 0 binary64)) (*.f64 x x)) (/.f64 x (*.f64 x x)))","(-.f64 (/.f64 (*.f64 (cos.f64 x) x) (*.f64 x x)) (/.f64 x (*.f64 x x)))","(-.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 (*.f64 x (neg.f64 (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x x)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 x)) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 x)))","(-.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (cos.f64 x) x) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) (neg.f64 x)))","(+.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 0 binary64)) (/.f64 (cos.f64 x) x))","(+.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x))","(*.f64 (/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(*.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) x) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64))) x)","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))) x)","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 x (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 x (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (cos.f64 x) x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 x (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (cos.f64 x))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) (neg.f64 x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (*.f64 x x) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (cos.f64 x)) x)) (*.f64 (*.f64 x x) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))) x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))) x)","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) (neg.f64 x))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) x))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x)) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64)) (*.f64 (neg.f64 x) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x)) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (neg.f64 (fma.f64 (/.f64 (cos.f64 x) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (/.f64 (cos.f64 x) (*.f64 (neg.f64 x) x)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) (neg.f64 x))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (cos.f64 x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (cos.f64 x) x) x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) x))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 (neg.f64 x) (cos.f64 x)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (/.f64 x (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (cos.f64 x) (neg.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x))))))","(/.f64 (neg.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))) x)","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) x)","(/.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) x)","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 x))","(/.f64 (neg.f64 (cos.f64 x)) x)","(/.f64 (cos.f64 x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 x) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (cos.f64 x))))","(neg.f64 (/.f64 (cos.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))) (/.f64 (pow.f64 (/.f64 x (cos.f64 x)) #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (cos.f64 x) x))","(-.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) x))","(+.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (neg.f64 x) x) x) (/.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) x))","(*.f64 (/.f64 (/.f64 x x) x) (/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))))","(*.f64 (/.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))) (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))) (*.f64 x (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))))","(*.f64 (/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 x (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(*.f64 (/.f64 x (neg.f64 (*.f64 (neg.f64 x) x))) (/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (*.f64 x x)) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (*.f64 x x)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 x x))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) x) (/.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (cos.f64 x) x) (neg.f64 x))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) x) (/.f64 (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -4 binary64)))","(*.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 (neg.f64 x) (*.f64 x x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(*.f64 (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) x) #s(literal -1 binary64)) (pow.f64 (/.f64 x (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (/.f64 (neg.f64 x) x)) #s(literal -1 binary64)) (pow.f64 (*.f64 (/.f64 x x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 x) x) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (/.f64 x x)) #s(literal -1 binary64)) (pow.f64 (*.f64 (/.f64 x x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 x)) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (*.f64 x (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) (/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) x))","(*.f64 (*.f64 x (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (/.f64 x x)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (neg.f64 x) x))","(*.f64 (/.f64 x (*.f64 (neg.f64 x) x)) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (/.f64 x (*.f64 x x)))","(*.f64 (*.f64 (/.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 x (*.f64 x x)) (/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 x x)))","(*.f64 (/.f64 x (*.f64 x x)) (*.f64 (/.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 (neg.f64 x) x) (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 (neg.f64 x) x) (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (/.f64 x (pow.f64 x #s(literal 3 binary64))))","(*.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 x x) (/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 x x) (/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 x x) (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 x x) (neg.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 x)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (neg.f64 (*.f64 (neg.f64 x) x))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (*.f64 (/.f64 x (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 x x)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (/.f64 x x)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (pow.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 x (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 x (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))))","(*.f64 (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (pow.f64 x #s(literal -4 binary64)))","(*.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))))","(*.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (neg.f64 x) (/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (neg.f64 x) (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 x (/.f64 (neg.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 x (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))))","(pow.f64 (/.f64 (*.f64 x x) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) x) x)","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) x)) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 x)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (*.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (/.f64 x x)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x)","(/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (neg.f64 x) (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (/.f64 (*.f64 x x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) x)","(*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))","(*.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x))","(*.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(neg.f64 (pow.f64 x #s(literal 4 binary64)))","(*.f64 (*.f64 x (*.f64 x (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x))) (/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (-.f64 (*.f64 (cos.f64 x) x) (neg.f64 x))))","(*.f64 (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))) x)","(*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) #s(literal -1 binary64)))","(*.f64 x (*.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(pow.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal 4 binary64)))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 6 binary64))))))","(fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x))","(fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x))","(fma.f64 (cos.f64 x) (*.f64 x x) (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal -1 binary64) (*.f64 x x) (*.f64 (*.f64 (cos.f64 x) x) x))","(fma.f64 (*.f64 x x) (cos.f64 x) (*.f64 (neg.f64 x) x))","(fma.f64 x (*.f64 (cos.f64 x) x) (*.f64 (neg.f64 x) x))","(fma.f64 x (neg.f64 x) (*.f64 (*.f64 (cos.f64 x) x) x))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 x x))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x))","(+.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (cos.f64 x) x) x))","(+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 (cos.f64 x) x) x)","(*.f64 (cos.f64 x) (*.f64 x x))","(*.f64 (*.f64 x x) (cos.f64 x))","(*.f64 x (*.f64 (cos.f64 x) x))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x))) (neg.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(fma.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(+.f64 (*.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x))","(pow.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) x)","(/.f64 (neg.f64 (cos.f64 x)) (neg.f64 x))","(/.f64 (cos.f64 x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (cos.f64 x)))","(neg.f64 (/.f64 (cos.f64 x) (neg.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (cos.f64 x) (neg.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (cos.f64 x) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) x)","(*.f64 x (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":252.783935546875,"type":"rewrite"},{"compiler":[[20478,3138]],"memory":[[3842224,87021280]],"time":193.50390625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","fresh",33.827485876955684,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","fresh",48.31788680576535,"binary64"],["(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","fresh",33.81624452318665,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","done",32.79359328250719,"binary64"],["(/.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) x) x)","fresh",15.51828265987637,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","fresh",32.809882052044074,"binary64"],["(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","fresh",32.8102260903814,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))) (neg.f64 x))","fresh",32.84618806195899,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","fresh",32.82551393477682,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","fresh",55.03354266637298,"binary64"],["(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","next",32.85715429212328,"binary64"],["(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","done",39.019490234897454,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",33.81497200573726,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","next",48.17886393122907,"binary64"],["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","done",0.19472509768442017,"binary64"],["(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","fresh",16.51599292892201,"binary64"],["(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x)))))","fresh",0.7014869635345528,"binary64"],["(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x))) x)","fresh",32.822715654461504,"binary64"],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","next",0.6796707037661107,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","next",33.33904763798183,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","done",33.83758338672413,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","fresh",45.696676523728954,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","fresh",13.234856190187205,"binary64"],["(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","next",33.80444174466935,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","fresh",33.817408037460275,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",32.79978454227563,"binary64"],["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","fresh",16.042352027065,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.669295761900397,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.408643660097695,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","done",29.684051035308705,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",28.9638490363403,"binary64"]],"compiler":[[12,7],[18,7],[14,8],[8,6],[11,8],[10,7],[10,8],[13,9],[13,8],[19,10],[11,8],[10,7],[8,6],[10,7],[11,8],[11,8],[18,12],[12,9],[11,8],[10,7],[10,8],[31,18],[17,13],[12,9],[13,9],[10,8],[11,8],[25,15],[20,13],[15,11],[10,8],[12,7],[18,7],[14,8],[11,8],[10,7],[10,8],[13,9],[13,8],[19,10],[11,8],[10,7],[11,8],[18,12],[12,9],[11,8],[10,7],[31,18],[17,13],[12,9],[13,9],[10,8],[11,8],[25,15],[20,13]],"count":[[1071,31]],"kept":[{"done":[4,4],"fresh":[18,14],"new":[1044,10],"picked":[5,3]}],"memory":[[105024,50751728]],"min-error":[[0.0,"binary64"]],"time":44.59619140625,"type":"prune"},{"egraph":[[0,4681,147,0.011351786],[16,4681,147,0.035048439],[15,4681,147,0.030490754],[14,4681,147,0.027055209],[13,4681,147,0.024631013],[12,4657,147,0.02984457],[11,4418,147,0.029212122],[10,4306,147,0.02612699],[9,4306,147,0.014417378],[8,4300,147,0.01494611],[7,4249,147,0.016010748],[6,3616,147,0.018225928],[5,2991,147,0.020811081],[4,1632,147,0.020872491],[3,570,147,0.008322627],[2,175,153,0.002317556],[1,100,153,0.000786484],[0,57,157,0.000501616],[0,32,162,0.000368826]],"inputs":[["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(*.f64 x (/.f64 x (sin.f64 x)))","(/.f64 x (sin.f64 x))","(sin.f64 x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","x","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","#s(literal 1 binary64)","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","(/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x)))","(cos.f64 x)","(neg.f64 (*.f64 (neg.f64 x) x))","(*.f64 (neg.f64 x) x)","(neg.f64 x)"]],"locations":[["(/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x)))","cost-diff",0],["(pow.f64 x #s(literal -2 binary64))","cost-diff",0],["(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","cost-diff",0],["(neg.f64 (*.f64 (neg.f64 x) x))","cost-diff",2],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","cost-diff",0],["(neg.f64 (/.f64 #s(literal -1 binary64) x))","cost-diff",1],["(-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))","cost-diff",2],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","cost-diff",0],["(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","cost-diff",0],["(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","cost-diff",2],["(*.f64 x x)","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","cost-diff",0],["(*.f64 x (/.f64 x (sin.f64 x)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","cost-diff",0]],"memory":[[-419920,7486144]],"method":["egg-herbie"],"outputs":[["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","x","(*.f64 x (/.f64 x (sin.f64 x)))","(*.f64 (/.f64 x (sin.f64 x)) x)","(/.f64 x (sin.f64 x))","(sin.f64 x)","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x)","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(literal 1 binary64)","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","x","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","#s(literal 1 binary64)","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","x","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos.f64 x)","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 (cos.f64 x) x)","(cos.f64 x)","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)","(/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (cos.f64 x) x) x)","(cos.f64 x)","(neg.f64 (*.f64 (neg.f64 x) x))","(*.f64 x x)","(*.f64 (neg.f64 x) x)","(neg.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":380.892822265625,"type":"simplify"},{"compiler":[[158,31]],"locations":[["(neg.f64 x)","accuracy",0.0],["(cos.f64 x)","accuracy",0.12175751953688403],["(/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x)))","accuracy",0.7044477924280361],["(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","accuracy",32.716549096790835],["(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","accuracy",0.0703125],["(/.f64 (cos.f64 x) x)","accuracy",0.09765625],["(cos.f64 x)","accuracy",0.12175751953688403],["(-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))","accuracy",32.24226762812759],["(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","accuracy",0.15625],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","accuracy",0.6034606451554585],["(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","accuracy",14.789619176771755],["(-.f64 #s(literal 1 binary64) (cos.f64 x))","accuracy",17.14904098109514],["(*.f64 x x)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","accuracy",15.921065016462242],["(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","accuracy",17.14904098109514],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",26.931778678852986],["(/.f64 x (sin.f64 x))","accuracy",0.109375],["(sin.f64 x)","accuracy",0.125],["(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","accuracy",0.2285538086106521],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","accuracy",0.6151793951554585]],"memory":[[-4918032,43569840]],"mixsample":[[20.148681640625,"ival-div",0],[7.583740234375,"adjust",800],[0.161865234375,"ival-mult",1200],[0.352294921875,"ival-neg",2400],[0.544921875,"ival-div",400],[0.583740234375,"ival-pow",1600],[0.158447265625,"ival-assert",0],[0.5498046875,"ival-div",1600],[0.3408203125,"ival-neg",800],[26.00537109375,"ival-sub",0],[9.5205078125,"ival-tan",0],[6.8583984375,"ival-cos",0],[3.63623046875,"ival-cos",1200],[0.18896484375,"ival-cos",400],[0.59033203125,"ival-pow",800],[0.161376953125,"ival-neg",400],[5.933837890625,"ival-pow",0],[0.163330078125,"ival-mult",800],[0.808837890625,"ival-cos",800],[0.547119140625,"ival-neg",1200],[0.12841796875,"ival-mult",1600],[0.50048828125,"ival-div",2000],[0.123291015625,"ival-mult",2400],[0.249267578125,"ival-pow",400],[0.48095703125,"ival-pow",2400],[0.916259765625,"ival-div",2400],[3.82568359375,"ival-cos",1600],[0.189208984375,"ival-mult",2000],[0.1142578125,"ival-neg",1600],[26.35107421875,"ival-cos",2400],[0.74951171875,"ival-pow",2000],[3.02978515625,"adjust",2000],[1.3193359375,"ival-div",1200],[0.675048828125,"ival-pow",1200],[0.052001953125,"ival-mult",400],[11.21630859375,"ival-mult",0],[7.31201171875,"ival-sin",0],[10.38720703125,"ival-cos",2000],[0.8935546875,"ival-div",800],[0.1572265625,"ival-neg",2000],[0.271728515625,"ival-true",0],[0.720458984375,"exact",0],[3.7373046875,"ival-neg",0]],"outcomes":[[42.75341796875,1,"valid",75],[99.8623046875,2,"valid",60],[50.330322265625,0,"valid",121]],"time":229.373046875,"type":"localize"},{"count":[[25,64]],"inputs":[["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x (/.f64 x (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x)))","(sin.f64 x)","(/.f64 x (sin.f64 x))","(cos.f64 x)","(/.f64 (cos.f64 x) x)","(neg.f64 x)"]],"memory":[[-769696,6861856]],"outputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","x","(* x (+ 1 (* 1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(/ 2 x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(/ 1 x)","(/ -1 x)","(/ 1 (pow x 2))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ 1 (* 1/6 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2)))))))","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(* -1 x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (pow x 2) (sin x))","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)","(/ (pow x 2) (- 1 (cos x)))","(/ x (- 1 (cos x)))","(/ (- 1 (cos x)) x)","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/ (cos x) (pow x 2))","(sin x)","(/ x (sin x))","(/ (cos x) x)","(/ (+ 1 (* -1 (cos x))) x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))"]],"series":[[5.27587890625,"((/ (tan (* 1/2 x)) (* x (/ x (sin x)))) (tan (* 1/2 x)) (* 1/2 x) (* x (/ x (sin x))) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (/ 1 (* (/ x (- 1 (cos x))) x)) (* (/ x (- 1 (cos x))) x) (/ x (- 1 (cos x))) (- 1 (cos x)) (- (neg (/ -1 x)) (/ (cos x) x)) (neg (/ -1 x)) (/ (- (neg (/ -1 x)) (/ (cos x) x)) x) (/ -1 x) (neg (* (neg x) x)) (- (pow x -2) (/ (cos x) (neg (* (neg x) x)))) (pow x -2) (/ (cos x) (neg (* (neg x) x))) (sin x) (/ x (sin x)) (cos x) (/ (cos x) x) (neg x))","x","-inf"],[7.89990234375,"((/ (tan (* 1/2 x)) (* x (/ x (sin x)))) (tan (* 1/2 x)) (* 1/2 x) (* x (/ x (sin x))) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (/ 1 (* (/ x (- 1 (cos x))) x)) (* (/ x (- 1 (cos x))) x) (/ x (- 1 (cos x))) (- 1 (cos x)) (- (neg (/ -1 x)) (/ (cos x) x)) (neg (/ -1 x)) (/ (- (neg (/ -1 x)) (/ (cos x) x)) x) (/ -1 x) (neg (* (neg x) x)) (- (pow x -2) (/ (cos x) (neg (* (neg x) x)))) (pow x -2) (/ (cos x) (neg (* (neg x) x))) (sin x) (/ x (sin x)) (cos x) (/ (cos x) x) (neg x))","x","inf"],[3.68994140625,"((/ (tan (* 1/2 x)) (* x (/ x (sin x)))) (tan (* 1/2 x)) (* 1/2 x) (* x (/ x (sin x))) (/ (- 1 (cos x)) (* x x)) (- 1 (cos x)) (cos x) (* x x) (/ 1 (* (/ x (- 1 (cos x))) x)) (* (/ x (- 1 (cos x))) x) (/ x (- 1 (cos x))) (- 1 (cos x)) (- (neg (/ -1 x)) (/ (cos x) x)) (neg (/ -1 x)) (/ (- (neg (/ -1 x)) (/ (cos x) x)) x) (/ -1 x) (neg (* (neg x) x)) (- (pow x -2) (/ (cos x) (neg (* (neg x) x)))) (pow x -2) (/ (cos x) (neg (* (neg x) x))) (sin x) (/ x (sin x)) (cos x) (/ (cos x) x) (neg x))","x","0"]],"time":18.166015625,"type":"series"},{"count":[[64,63]],"egraph":[[0,8593,578,0.097466799],[6,7604,650,0.025210019],[5,5229,650,0.028275087],[4,4764,650,0.016611982],[3,2778,650,0.016276723],[2,966,650,0.009489381],[1,391,662,0.00361062],[0,145,662,0.001785841]],"inputs":[["1/2","(+ 1/2 (* -1/24 (pow x 2)))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(* 1/2 x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","x","(* x (+ 1 (* 1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(pow x 2)","2","(+ 2 (* 1/6 (pow x 2)))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(/ 2 x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(/ 1 x)","(/ -1 x)","(/ 1 (pow x 2))","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ 1 (* 1/6 (pow x 2)))","(+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2)))))","(+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2)))))))","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(* -1 x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/ (pow x 2) (sin x))","(/ (- 1 (cos x)) (pow x 2))","(- 1 (cos x))","(cos x)","(/ (pow x 2) (- 1 (cos x)))","(/ x (- 1 (cos x)))","(/ (- 1 (cos x)) x)","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/ (cos x) (pow x 2))","(sin x)","(/ x (sin x))","(/ (cos x) x)","(/ (+ 1 (* -1 (cos x))) x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))"]],"memory":[[7465024,43582704]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/24 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24)))","(fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/24 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* 1/240 (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/240 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (+ 1/24 (* (pow x 2) (+ 1/240 (* 17/40320 (pow x 2))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 17/40320 binary64) (*.f64 x x) #s(literal 1/240 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","x","(* x (+ 1 (* 1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 7/360 binary64) (*.f64 x x) #s(literal 1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 31/15120 binary64) (*.f64 x x) #s(literal 7/360 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(* (pow x 2) (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","(* (pow x 2) (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x) x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(pow x 2)","(*.f64 x x)","2","#s(literal 2 binary64)","(+ 2 (* 1/6 (pow x 2)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64))","(+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/3024 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64))","(/ 2 x)","(/.f64 #s(literal 2 binary64) x)","(/ (+ 2 (* 1/6 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* 1/120 (pow x 2))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(/ (+ 2 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 1/120 (* 1/3024 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/3024 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 2 binary64)) x)","(* x (+ 1/2 (* -1/24 (pow x 2))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* 1/720 (pow x 2)) 1/24))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* (pow x 2) (- (* (pow x 2) (+ 1/720 (* -1/40320 (pow x 2)))) 1/24))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ 1 (pow x 2))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(/ (+ 1 (* -1/2 (pow x 2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x) x)","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(+ 1 (* 1/6 (pow x 2)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/6 (* 7/360 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 7/360 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (+ 1/6 (* (pow x 2) (+ 7/360 (* 31/15120 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 31/15120 binary64) (*.f64 x x) #s(literal 7/360 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ (+ 1 (* -1/2 (pow x 2))) x)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(/ (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(/ (* (sin x) (sin (* 1/2 x))) (* (pow x 2) (cos (* 1/2 x))))","(*.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (sin (* 1/2 x)) (cos (* 1/2 x)))","(/.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) (cos.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/ (pow x 2) (sin x))","(*.f64 (/.f64 x (sin.f64 x)) x)","(/ (- 1 (cos x)) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(- 1 (cos x))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ (pow x 2) (- 1 (cos x)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/ x (- 1 (cos x)))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/ (- 1 (cos x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(* -1 (/ (- (cos x) 1) (pow x 2)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/ (cos x) (pow x 2))","(/.f64 (/.f64 (cos.f64 x) x) x)","(sin x)","(sin.f64 x)","(/ x (sin x))","(/.f64 x (sin.f64 x))","(/ (cos x) x)","(/.f64 (cos.f64 x) x)","(/ (+ 1 (* -1 (cos x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(/ (+ 1 (* -1 (cos x))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":317.02197265625,"type":"simplify"},{"count":[[25,1642]],"egraph":[[0,8548,127,0.079191168],[2,1475,127,0.037735283],[1,212,127,0.008849884],[0,57,137,0.002780041],[0,32,144,0.000372019]],"inputs":[["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x (/.f64 x (sin.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 x x)","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(/.f64 #s(literal -1 binary64) x)","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x)))","(sin.f64 x)","(/.f64 x (sin.f64 x))","(cos.f64 x)","(/.f64 (cos.f64 x) x)","(neg.f64 x)"]],"memory":[[-3265584,75724784]],"outputs":[["(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (sin.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (sin.f64 x))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (sin.f64 x) x) x))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (sin.f64 x))) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 x x)) (/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 x (sin.f64 x))) (/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) (/.f64 x (sin.f64 x))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (neg.f64 x)) (neg.f64 (sin.f64 x)))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) #s(literal 1 binary64)) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 x x)) (sin.f64 x))","(*.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) x) (sin.f64 x))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 x (sin.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (pow.f64 (pow.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))","(*.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 x (sin.f64 x)) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 x (sin.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (/.f64 x (sin.f64 x)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (sin.f64 x) x) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (/.f64 (sin.f64 x) x) x))","(pow.f64 (/.f64 (/.f64 x (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) x)) (neg.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 x (sin.f64 x)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (/.f64 (sin.f64 x) x) x))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))) (neg.f64 (neg.f64 (/.f64 x (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (/.f64 x (sin.f64 x)) x))))","(/.f64 (/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 x (sin.f64 x))) x)","(/.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (/.f64 (/.f64 (sin.f64 x) x) x)) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (*.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 x (sin.f64 x)) x))","(/.f64 (neg.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)) (neg.f64 (/.f64 x (sin.f64 x))))","(/.f64 (neg.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x)))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (*.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (/.f64 x (sin.f64 x)) x)))","(/.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x) (/.f64 x (sin.f64 x)))","(/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (sin.f64 x)) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (/.f64 x (sin.f64 x)) x))","(neg.f64 (/.f64 (neg.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (/.f64 x (sin.f64 x)) x)))","(neg.f64 (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x)))) (/.f64 (tan.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (/.f64 x (sin.f64 x)) x) (tan.f64 (*.f64 x #s(literal 1/2 binary64))))) #s(literal -1 binary64)))","(*.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))))) (neg.f64 (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64)))) (neg.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (sin.f64 (*.f64 x #s(literal 1/2 binary64))) (cos.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (*.f64 x #s(literal 1/2 binary64))) (sin.f64 (*.f64 x #s(literal 1/2 binary64)))))","(tan.f64 (*.f64 x #s(literal 1/2 binary64)))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 (/.f64 #s(literal -1 binary64) (sin.f64 x)) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (*.f64 x x))","(*.f64 (neg.f64 x) (/.f64 (neg.f64 x) (sin.f64 x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))","(*.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (sin.f64 x)) x))","(*.f64 (/.f64 x (sin.f64 x)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 x (sin.f64 x)) x)","(*.f64 x (/.f64 x (sin.f64 x)))","(pow.f64 (/.f64 (sin.f64 x) (*.f64 x x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 (sin.f64 x) x)))","(/.f64 (*.f64 x #s(literal 1 binary64)) (/.f64 (sin.f64 x) x))","(/.f64 (*.f64 (neg.f64 x) x) (neg.f64 (sin.f64 x)))","(/.f64 (neg.f64 x) (neg.f64 (/.f64 (sin.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sin.f64 x) (*.f64 x x))))","(/.f64 (*.f64 x x) (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 x x) (sin.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) (*.f64 x x)))","(/.f64 x (/.f64 (sin.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 (sin.f64 x) x)) (/.f64 (neg.f64 x) (/.f64 (sin.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 x) (/.f64 x (sin.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) x) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 x x)) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 x x)))","(*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x))","(pow.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) x)) x)","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x))) x)","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64))))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) x) (*.f64 x (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (*.f64 x #s(literal 1 binary64))) (*.f64 x (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x) (*.f64 x x)) (*.f64 (*.f64 x x) (*.f64 (/.f64 x #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(approx (cos x) #s(literal 1 binary64)) x)) x)","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) x) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) (*.f64 x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 x x)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))) (/.f64 (*.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))))))","(-.f64 (/.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(approx (cos x) #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x x) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(approx (cos x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(-.f64 (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","(+.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))","(*.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (cos x) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) x)","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 x (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) x)","(*.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) x)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))) (/.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 x x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(pow.f64 (exp.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (fma.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (*.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (pow.f64 x #s(literal -1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (pow.f64 x #s(literal -1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (/.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) (neg.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 (/.f64 (cos.f64 x) x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) x))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 x (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 x (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (/.f64 (neg.f64 x) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (neg.f64 x) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (/.f64 x (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (neg.f64 x) x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (*.f64 (neg.f64 x) x) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 #s(literal -1 binary64) x)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (neg.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (neg.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (/.f64 (*.f64 (neg.f64 x) x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 x (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 x (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 x x))","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(*.f64 (neg.f64 x) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal 1 binary64))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)","(*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 x (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))) #s(literal 1 binary64))","(/.f64 (*.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 x) x) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 (neg.f64 x) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)))","(/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal 1 binary64))","(/.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (*.f64 x x) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))) (/.f64 x (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (/.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 (neg.f64 x) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 (neg.f64 x) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (fma.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 (neg.f64 (*.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (*.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (neg.f64 x) (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 (neg.f64 x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(/.f64 x (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(neg.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))))","(-.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (cos.f64 x))","(+.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))","(*.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 x) x) (/.f64 (sin.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(pow.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) (*.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (*.f64 #s(literal 0 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (cos.f64 x)))) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (neg.f64 (-.f64 x (*.f64 x (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) x)","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (*.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 x (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 x (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (*.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (neg.f64 x)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (neg.f64 (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (neg.f64 (/.f64 x (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) x) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (/.f64 x (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (*.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x)))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (-.f64 x (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x (*.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (cos.f64 x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))) x)","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) x)","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 x))))","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(/.f64 (-.f64 x (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 x x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 x #s(literal 1 binary64))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (neg.f64 x))","(/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 x)))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64) (/.f64 (neg.f64 (cos.f64 x)) x))","(fma.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) x))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 x))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (neg.f64 x))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (/.f64 (*.f64 (neg.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 x (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 x (*.f64 x x)) (/.f64 (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x))) (*.f64 x x)))","(-.f64 (/.f64 x (*.f64 x x)) (/.f64 (*.f64 x (cos.f64 x)) (*.f64 x x)))","(-.f64 (/.f64 (/.f64 x (cos.f64 x)) (/.f64 x (/.f64 (cos.f64 x) x))) (/.f64 (*.f64 x #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 x (+.f64 (cos.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 x (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) x))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x))","(-.f64 #s(literal 0 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))))) (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (neg.f64 (log.f64 x)))","(+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(pow.f64 (exp.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (fma.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (*.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (pow.f64 x #s(literal -1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (pow.f64 x #s(literal -1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (/.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) (neg.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 (/.f64 (cos.f64 x) x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) x))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x)) x)","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 x (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) x)","(*.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) x)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))) (/.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))) (/.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 x x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 x) x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 x)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) x) (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 #s(literal -1 binary64) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (/.f64 #s(literal -1 binary64) x) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(pow.f64 (exp.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (fma.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (*.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) x) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (pow.f64 x #s(literal -1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 x (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 x (neg.f64 (cos.f64 x)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x))) (*.f64 x (pow.f64 x #s(literal -1 binary64)))) (/.f64 x (/.f64 (cos.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (neg.f64 x)) (*.f64 x (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (neg.f64 x)) (*.f64 x (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x #s(literal 1 binary64))) (*.f64 x (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) (*.f64 (neg.f64 x) (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))) (*.f64 (neg.f64 x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)) (*.f64 (neg.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (/.f64 (cos.f64 x) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 x (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (cos.f64 x)))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (/.f64 (neg.f64 x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 x x) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 x (cos.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (cos.f64 x))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (neg.f64 (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (*.f64 x x) (/.f64 (neg.f64 (cos.f64 x)) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 x x) (neg.f64 (cos.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 x (*.f64 (*.f64 x x) (/.f64 (cos.f64 x) x))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x))))","(/.f64 (-.f64 (/.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)) (*.f64 (*.f64 x x) (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (cos.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x)) x)","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) (neg.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x (/.f64 (cos.f64 x) x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) (-.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64))) (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 (cos.f64 x) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 (cos.f64 x) x) (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 (/.f64 (cos.f64 x) x) x) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 (cos.f64 x) (/.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 x (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (*.f64 x (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) x))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) x) (/.f64 (/.f64 (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x) (pow.f64 (/.f64 (cos.f64 x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -2 binary64)))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) x) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x)) x))","(-.f64 (/.f64 (pow.f64 x #s(literal -4 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -6 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))) (/.f64 (pow.f64 (/.f64 (/.f64 (cos.f64 x) x) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (/.f64 (cos.f64 x) x) x) (/.f64 (-.f64 #s(literal -1 binary64) (cos.f64 x)) (*.f64 (neg.f64 x) x)) (pow.f64 x #s(literal -4 binary64)))))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (*.f64 x (/.f64 (cos.f64 x) x)) (*.f64 x x)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (/.f64 (cos.f64 x) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))","(+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 x))","(pow.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 #s(literal 0 binary64) x) (+.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) x) (*.f64 x (/.f64 #s(literal -1 binary64) x))) (*.f64 x x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 x) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 x x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","(*.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (cos.f64 x) x))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (/.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (cos.f64 x) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (cos.f64 x) x))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))) #s(literal -1 binary64))","(*.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (cos.f64 x))","(*.f64 (/.f64 (cos.f64 x) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (cos.f64 x) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 (cos.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (cos.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (/.f64 (neg.f64 x) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (cos.f64 x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (cos.f64 x) x) x))","(pow.f64 (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (neg.f64 (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -6 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 x #s(literal -4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64))) (*.f64 x x))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))) x)","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (cos.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)))) (*.f64 x x))","(/.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (cos.f64 x))) (neg.f64 x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 x (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) (*.f64 x x))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (cos.f64 x))) (*.f64 x x))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (neg.f64 (cos.f64 x)) x) (neg.f64 x))","(/.f64 (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 (cos.f64 x) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (cos.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 x (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 x (cos.f64 x)) (neg.f64 x)))","(/.f64 (cos.f64 x) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (/.f64 (cos.f64 x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 (cos.f64 x) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (cos.f64 x) x)))","(neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (/.f64 x (cos.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (cos.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) x) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (cos.f64 x)) (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 (cos.f64 x) x))) #s(literal -1 binary64)))","(neg.f64 (sin.f64 (neg.f64 x)))","(sin.f64 x)","(-.f64 (*.f64 (sin.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (cos.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 x) #s(literal -1 binary64)) x)","(*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sin.f64 x)))","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 x) (sin.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 x (sin.f64 x)))","(*.f64 x (pow.f64 (sin.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sin.f64 x) x) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (neg.f64 x) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (fma.f64 (/.f64 x (sin.f64 x)) (/.f64 x (sin.f64 x)) (*.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (/.f64 (neg.f64 x) (sin.f64 x))))))","(/.f64 (neg.f64 (*.f64 x #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) x)) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 x #s(literal 1 binary64)) (sin.f64 x))","(/.f64 (neg.f64 x) (neg.f64 (neg.f64 (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 x) (neg.f64 (sin.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (sin.f64 x) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sin.f64 x) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (sin.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sin.f64 x) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 x) x))","(/.f64 x (neg.f64 (neg.f64 (sin.f64 x))))","(/.f64 x (sin.f64 x))","(neg.f64 (/.f64 (neg.f64 x) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (sin.f64 x)) (/.f64 (neg.f64 x) (sin.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (/.f64 (neg.f64 x) (sin.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 x))","(fma.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(+.f64 (*.f64 (cos.f64 #s(literal 0 binary64)) (cos.f64 x)) (*.f64 (sin.f64 #s(literal 0 binary64)) (sin.f64 (neg.f64 x))))","(*.f64 (/.f64 (cos.f64 x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (cos.f64 x) x) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (cos.f64 x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (cos.f64 x)) x))","(*.f64 (cos.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) x))","(pow.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))) (neg.f64 x))","(/.f64 (/.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) x)","(/.f64 (*.f64 (cos.f64 x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (cos.f64 x))) x)","(/.f64 (neg.f64 (cos.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (cos.f64 x))))","(/.f64 (cos.f64 x) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (cos.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (cos.f64 x)))","(neg.f64 (/.f64 (neg.f64 (cos.f64 x)) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (neg.f64 (cos.f64 x)) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) x)","(*.f64 x #s(literal -1 binary64))","(pow.f64 (neg.f64 x) #s(literal 1 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))))","(/.f64 (*.f64 (neg.f64 x) x) (+.f64 #s(literal 0 binary64) x))","(/.f64 (neg.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (*.f64 x x) (neg.f64 (+.f64 #s(literal 0 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(/.f64 x #s(literal -1 binary64))","(neg.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal 0 binary64) x)))","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":360.611083984375,"type":"rewrite"},{"compiler":[[21862,3388]],"memory":[[6271136,96188912]],"time":128.383056640625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","fresh",33.827485876955684,"binary64"],["(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","fresh",33.81624452318665,"binary64"],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","done",32.79359328250719,"binary64"],["(/.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) x) x)","fresh",15.51828265987637,"binary64"],["(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","fresh",32.809882052044074,"binary64"],["(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","fresh",32.8102260903814,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) x)) x)","fresh",32.85715429212328,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))) (neg.f64 x))","fresh",32.84618806195899,"binary64"],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","fresh",32.82551393477682,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","fresh",55.03354266637298,"binary64"],["(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","done",39.019490234897454,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","done",33.81497200573726,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","done",48.17886393122907,"binary64"],["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","done",0.19472509768442017,"binary64"],["(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","fresh",32.822715654461504,"binary64"],["(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","fresh",16.51599292892201,"binary64"],["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","done",0.6796707037661107,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","done",33.33904763798183,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) x))","fresh",16.12073136938537,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","fresh",13.234856190187205,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","done",33.83758338672413,"binary64"],["(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","fresh",45.696676523728954,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","fresh",33.85263090136514,"binary64"],["(-.f64 #s(approx (pow x -2) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","fresh",33.77112832574628,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","fresh",33.817408037460275,"binary64"],["(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","fresh",32.79978454227563,"binary64"],["(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","fresh",16.042352027065,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.669295761900397,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","fresh",29.408643660097695,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","done",29.684051035308705,"binary64"],["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","done",28.9638490363403,"binary64"]],"compiler":[[768,200],[12,7],[12,7],[8,6],[11,8],[10,7],[10,8],[10,7],[13,9],[13,8],[19,10],[10,7],[8,6],[10,7],[11,8],[11,9],[11,8],[11,8],[10,7],[15,11],[17,13],[10,8],[31,18],[14,10],[18,13],[13,9],[10,8],[11,8],[25,15],[20,13],[15,11],[10,8]],"count":[[1153,31]],"kept":[{"done":[7,7],"fresh":[19,14],"new":[1122,7],"picked":[5,3]}],"memory":[[-2055968,56491232]],"min-error":[[0.0,"binary64"]],"time":49.35693359375,"type":"prune"},{"accuracy":[0.19472509768442015],"baseline":[0.19472509768442017],"branch":[["x",0.19472509768442017,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",0.19472509768442015,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[53,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x))) x)","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x)) x)","(/.f64 #s(approx (- (* (neg x) x) (* (* (neg x) x) (cos x))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(-.f64 #s(approx (pow x -2) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal -4 binary64)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))","(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(/.f64 (/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) x) x)","(fma.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 x (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) #s(literal 1 binary64))) x))","(/.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x)))))"]],"memory":[[-1034752,14470432]],"oracle":[63.688342738870695],"outputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)"]],"repr":["binary64"],"time":25.844970703125,"times":[[11.800048828125,"x"],[11.0458984375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.6796707037661107],"baseline":[0.6796707037661107],"branch":[["x",0.6796707037661107,1,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",0.6796707037661107,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[47,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x))) x)","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x)) x)","(/.f64 #s(approx (- (* (neg x) x) (* (* (neg x) x) (cos x))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(-.f64 #s(approx (pow x -2) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal -4 binary64)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x #s(literal 2 binary64)))) (*.f64 x x))"]],"memory":[[-3642176,13263664]],"oracle":[63.68827881051534],"outputs":[["(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))"]],"repr":["binary64"],"time":23.927978515625,"times":[[11.135986328125,"x"],[10.093994140625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.19493554930272855],"baseline":[13.234856190187205],"branch":[["x",0.19493554930272855,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",0.7620866789220061,2,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[45,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x))) x)","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x)) x)","(/.f64 #s(approx (- (* (neg x) x) (* (* (neg x) x) (cos x))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(-.f64 #s(approx (pow x -2) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))","(/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (pow.f64 x #s(literal -4 binary64)))","(-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (*.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (sin.f64 x)) (*.f64 x x))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x #s(literal 2 binary64))))"]],"memory":[[5293536,12838480]],"oracle":[63.68827881051534],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x)))"]],"repr":["binary64"],"time":21.361083984375,"times":[[10.452880859375,"x"],[8.474853515625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[0.21196910287794912],"baseline":[13.234856190187205],"branch":[["x",0.21196910287794912,2,"binary64"]],"compiler":[[1,1]],"count":[[38,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x))) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(/.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 x))) x)","(/.f64 (/.f64 (-.f64 x (*.f64 x (cos.f64 x))) (*.f64 x x)) x)","(/.f64 (/.f64 (fma.f64 (neg.f64 x) (cos.f64 x) x) (*.f64 x x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 (cos.f64 x) x)) x)","(/.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (-.f64 (cos.f64 x) #s(literal 1 binary64))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (cos.f64 x)))) x)","(*.f64 (/.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) (/.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 (cos.f64 x) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 (-.f64 x (*.f64 (cos.f64 x) x)) (*.f64 (neg.f64 x) x)) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (cos.f64 x) x))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (cos.f64 x) x)) (*.f64 x x)) x)","(/.f64 #s(approx (- (* (neg x) x) (* (* (neg x) x) (cos x))) (*.f64 (*.f64 (-.f64 (cos.f64 x) #s(literal 1 binary64)) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 (/.f64 #s(literal -1 binary64) x) (cos.f64 x))) (neg.f64 x))","(-.f64 #s(approx (pow x -2) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (/.f64 (cos.f64 x) (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (neg.f64 x) x (*.f64 (*.f64 (cos.f64 x) x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (fma.f64 (*.f64 (cos.f64 x) x) x (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (+.f64 (*.f64 (*.f64 (cos.f64 x) x) x) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (/.f64 x (cos.f64 x)))) (neg.f64 x))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x x) (cos.f64 x))) (*.f64 x x)) (*.f64 x x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 x) x) (/.f64 (cos.f64 x) x))) (*.f64 (*.f64 (neg.f64 x) x) x))","(-.f64 (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))) (/.f64 (*.f64 (*.f64 (neg.f64 x) x) (cos.f64 x)) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x))))"]],"memory":[[-751024,6831872]],"oracle":[63.685534362783145],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x)"]],"repr":["binary64"],"time":10.755859375,"times":[[8.66796875,"x"]],"type":"regimes"},{"accuracy":[0.7404662139950711],"baseline":[13.234856190187205],"branch":[["x",0.7404662139950711,2,"binary64"]],"compiler":[[1,1]],"count":[[9,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"memory":[[2747728,2747728]],"oracle":[63.247644851486506],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"repr":["binary64"],"time":3.7509765625,"times":[[2.930908203125,"x"]],"type":"regimes"},{"accuracy":[13.234856190187209],"baseline":[13.234856190187205],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",13.234856190187209,1,"binary64"],["x",13.234856190187209,1,"binary64"]],"compiler":[[8,6],[1,1]],"count":[[8,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ x (- 1 (cos x))) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 2 binary64))))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/40320 binary64) (*.f64 x x) #s(literal 1/720 binary64)) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 x x) #s(approx (- (cos x) 1) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 x x) #s(literal -1/720 binary64)) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x))))"]],"memory":[[-6415552,4399696]],"oracle":[63.247644851486506],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":7.705078125,"times":[[3.991943359375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"],[2.55712890625,"x"]],"type":"regimes"},{"accuracy":[14.752375978670157],"baseline":[28.9638490363403],"branch":[["x",14.752375978670157,2,"binary64"],["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",28.963849036340257,1,"binary64"]],"compiler":[[1,1],[8,6]],"count":[[4,2]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (fma.f64 #s(literal 1/720 binary64) (*.f64 x x) #s(literal -1/24 binary64)) (*.f64 x x) #s(literal 1/2 binary64)))"]],"memory":[[3446688,3446688]],"oracle":[62.958719833746976],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x))"]],"repr":["binary64"],"time":5.407958984375,"times":[[2.18798828125,"x"],[2.375,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"]],"type":"regimes"},{"accuracy":[28.963849036340257],"baseline":[28.9638490363403],"branch":[["(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))",28.963849036340257,1,"binary64"],["x",28.963849036340346,1,"binary64"]],"compiler":[[8,6],[1,1]],"count":[[2,1]],"inputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))","#s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64)))"]],"link":["."],"memory":[[-5402080,2962176]],"name":["cos2 (problem 3.4.1)"],"oracle":[29.77155559482369],"outputs":[["#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"repr":["binary64"],"time":3.467041015625,"times":[[1.217041015625,"(/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x))"],[1.649169921875,"x"]],"type":"regimes"},{"bstep":[[10.5361328125,6.574731927770586e-6,0.41864631480631465]],"compiler":[[8,8],[15,12],[8,8],[15,12],[8,8],[15,12],[8,8],[15,12],[8,8],[15,12],[8,8],[15,12],[8,8],[15,12],[8,8],[15,12],[10,9],[1,1]],"memory":[[3884816,3884816]],"method":["binary-search"],"mixsample":[[0.643310546875,"ival-sub",0],[0.687255859375,"ival-div",0],[0.07470703125,"ival-true",0],[1.511474609375,"ival-cos",0],[0.7890625,"ival-mult",0],[0.076416015625,"exact",0],[0.04150390625,"ival-assert",0]],"outcomes":[[5.913818359375,0,"valid",128]],"stop":[["narrow-enough",1]],"time":12.39794921875,"type":"bsearch"},{"bstep":[[0.955078125,6.574731927770586e-6,0.41864631480631465]],"compiler":[[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[10,9],[1,1]],"memory":[[614512,614512]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.43701171875,"type":"bsearch"},{"bstep":[[0.86083984375,6.574731927770586e-6,0.41864631480631465]],"compiler":[[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[8,7],[15,12],[10,9],[1,1]],"memory":[[578944,578944]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.193115234375,"type":"bsearch"},{"bstep":[[15.40185546875,9.775280406946412e+74,1.444601702155094e+79]],"compiler":[[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,8],[10,9],[10,9],[1,1]],"memory":[[-3748848,4334736]],"method":["binary-search"],"mixsample":[[0.639404296875,"ival-sub",0],[0.66015625,"ival-div",0],[0.081787109375,"ival-true",0],[5.396240234375,"ival-cos",0],[0.831298828125,"ival-mult",0],[0.083740234375,"exact",0],[0.048583984375,"ival-assert",0]],"outcomes":[[10.84619140625,0,"valid",128]],"stop":[["narrow-enough",1]],"time":16.90283203125,"type":"bsearch"},{"egraph":[[8,5327,154,0.031342664],[7,1842,154,0.023425407],[6,569,154,0.009131789],[5,285,154,0.002961909],[4,164,154,0.001578859],[3,108,154,0.001144642],[2,82,154,0.001037859],[1,64,154,0.000916694],[0,47,154,0.000787447]],"inputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(if (<=.f64 x #s(literal 130000000000000009331693572985691597674199002984591404980029211519262914510848 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"memory":[[3794256,11482288]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))","(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))","(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))","(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))","(if (<=.f64 x #s(literal 130000000000000009331693572985691597674199002984591404980029211519262914510848 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))","#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]],"stop":[["node limit",1]],"time":95.779052734375,"type":"simplify"},{"compiler":[[154,48],[1,2],[7,5],[1,2],[8,7],[6,5],[6,5],[6,5],[22,14],[19,12],[33,16],[19,12]],"egraph":[[0,8024,681,0.097821615],[5,7138,765,0.018329083],[4,4610,767,0.025166568],[3,3179,767,0.015961375],[2,1039,773,0.011157685],[1,430,791,0.003289802],[0,160,791,0.001448729],[0,1295,111,0.007686793],[1,182,111,0.004407733],[0,49,117,0.001524346],[0,30,121,0.000286598],[0,8119,135,0.071442749],[13,7710,153,0.037251919],[12,7708,153,0.021717789],[11,7690,153,0.021428923],[10,7480,153,0.025060924],[9,6581,153,0.029647592],[8,4960,153,0.02583721],[7,3409,153,0.019364683],[6,2536,153,0.011400979],[5,1981,153,0.008102261],[4,1281,153,0.006739527],[3,601,153,0.003723559],[2,258,153,0.001779456],[1,105,153,0.000787747],[0,42,153,0.000410555],[0,9915,17,0.070240414],[3,2843,17,0.033568626],[2,270,17,0.007887565],[1,40,17,0.001089958],[0,10,17,0.000589818],[0,6,17,0.000101148]],"memory":[[-7041472,6611440]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":2400.64501953125,"type":"soundness"},{"compiler":[[154,48],[154,48],[8,6],[8,6],[11,8],[11,8]],"memory":[[4815904,28415856]],"remove-preprocessing":[["(abs x)"],[],[],[],[],[],[],[],[]],"time":41.4130859375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]