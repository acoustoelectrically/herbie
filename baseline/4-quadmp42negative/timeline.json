[{"memory":[[20384,20384]],"time":0.2939453125,"type":"start"},{"compiler":[[19,16]],"memory":[[3885504,45167344]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":255.651123046875,"type":"analyze"},{"bogosity":[{"infinite":0.06371305133767935,"invalid":0.24922682317866574,"precondition":0.0014641286106780171,"valid":0.6855959968729769}],"memory":[[25878448,446943456]],"mixsample":[[6.845703125,"ival-sub",1200],[0.14013671875,"ival-sub",4800],[119.954345703125,"ival-div",0],[71.1015625,"adjust",800],[5.67236328125,"ival-mult",1200],[0.013916015625,"ival-div",400],[2.769287109375,"ival-sub",1600],[4.6376953125,"ival-assert",0],[0.055908203125,"ival-sub",3600],[0.33837890625,"ival-sqrt",4800],[11.935302734375,"ival-sqrt",1200],[141.2958984375,"ival-sub",0],[4.66455078125,"ival-sub",400],[81.763671875,"ival-sqrt",0],[7.171875,"ival-mult",800],[0.416015625,"ival-sub",4400],[5.443603515625,"ival-sub",800],[0.91552734375,"ival-mult",1600],[2.9111328125,"adjust",2800],[0.008056640625,"ival-div",2000],[0.137939453125,"ival-sqrt",3600],[0.197265625,"ival-sub",4000],[8.2255859375,"ival-sqrt",400],[5.752197265625,"ival-sqrt",2000],[9.474853515625,"ival-sqrt",800],[3.809814453125,"ival-sub",2000],[0.098388671875,"ival-mult",2000],[0.57958984375,"ival-sqrt",4000],[1.10546875,"ival-sqrt",4400],[27.39208984375,"adjust",2000],[3.562744140625,"ival-sub",2400],[6.28369140625,"ival-mult",400],[288.929931640625,"ival-mult",0],[5.1669921875,"ival-sqrt",1600],[0.030029296875,"ival-div",800],[7.955810546875,"ival-true",0],[6.342041015625,"ival-sqrt",2400],[12.060302734375,"exact",0],[59.2314453125,"ival-neg",0]],"outcomes":[[231.494384765625,1,"valid",1307],[313.322265625,2,"valid",1239],[104.837158203125,0,"invalid",941],[49.720947265625,3,"valid",158],[550.02001953125,0,"valid",5552]],"time":1763.5439453125,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[127,0,14,115]],"explanations":[["/.f64","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","n/o",1,0,[["(*.f64 #s(literal 2 binary64) a)","overflow",1]],[[]]],["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",4,0,[["(*.f64 b b)","overflow",66],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",26],["(*.f64 a c)","overflow",26]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",4,0,[["(*.f64 b b)","underflow",38],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",33],["(*.f64 a c)","underflow",33],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[1,2]]],["/.f64","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",12,0,[["(*.f64 b b)","underflow",38],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",19],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",33],["(*.f64 a c)","underflow",33],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",4]],[[]]],["-.f64","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",70,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",83,0,[["(*.f64 b b)","overflow",66],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",26],["(*.f64 a c)","overflow",26],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",83]],[[1,2]]]],"fperrors":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",15,0,false,2,[1.0384966886929255e-39,-4.659661720174616e-15,3.4281990509814275e-294]],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",4,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",88,0,false,1,[3.2812125950858135e-122,1.5259976382052252e-155,1.3954224672378931e-244]],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",70,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,3],[2,27],[1,111],[0,115]],"maybe-confusion":[[127,0,0,14,0,115]],"memory":[[-28155136,87944592]],"mixsample":[[0.31640625,"ival-sub",1200],[6.14306640625,"ival-div",0],[4.30078125,"adjust",800],[0.249267578125,"ival-sqrt",2000],[0.19921875,"ival-mult",1200],[0.16943359375,"ival-sub",1600],[0.1279296875,"ival-sub",2000],[0.49755859375,"ival-sqrt",800],[0.22705078125,"ival-assert",0],[0.02587890625,"ival-sqrt",4000],[0.572509765625,"ival-sqrt",1200],[6.71826171875,"ival-sub",0],[4.1494140625,"ival-sqrt",0],[0.446044921875,"ival-sub",400],[1.468017578125,"adjust",2000],[0.202880859375,"ival-sub",2400],[0.417724609375,"ival-mult",800],[0.317138671875,"ival-sqrt",1600],[0.4970703125,"ival-mult",400],[13.48583984375,"ival-mult",0],[0.279296875,"ival-sub",800],[0.06591796875,"ival-mult",1600],[0.031005859375,"adjust",2800],[0.27490234375,"ival-sqrt",2400],[0.50927734375,"ival-true",0],[0.01123046875,"ival-sub",4000],[0.551513671875,"exact",0],[0.67041015625,"ival-sqrt",400],[2.469482421875,"ival-neg",0]],"outcomes":[[17.435302734375,1,"valid",92],[21.818359375,2,"valid",80],[0.712890625,3,"valid",2],[34.938232421875,0,"valid",338]],"time":184.2060546875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"egraph":[[0,2395,15,0.007158365],[12,2395,16,0.015292929],[11,2389,16,0.018314896],[10,2389,16,0.013250186],[9,2379,16,0.014092141],[8,2306,16,0.016426504],[7,2142,16,0.015359331],[6,1613,16,0.014572738],[5,746,16,0.008838119],[4,409,16,0.004194627],[3,247,16,0.002133331],[2,104,17,0.000926009],[1,45,17,0.000625387],[0,23,17,0.000488915],[0,14,17,0.000175571],[9,6750,144,0.031840651],[8,6478,144,0.029780679],[7,6439,144,0.022825962],[6,6353,144,0.023790116],[5,5865,144,0.0264226],[4,4733,144,0.027740537],[3,1958,144,0.023693157],[2,590,147,0.010809379],[1,189,151,0.001873323],[0,56,158,0.00058089]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[2635968,10526912]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["node limit",1]],"symmetry":[[]],"time":378.2548828125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.08203125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",30.21638203730341,"binary64"]],"compiler":[[17,14]],"memory":[[353424,353424]],"time":0.612060546875,"type":"prune"},{"egraph":[[0,2395,65,0.010571955],[12,2395,69,0.016425033],[11,2389,69,0.017241974],[10,2389,69,0.013883203],[9,2379,69,0.013446137],[8,2306,69,0.016025639],[7,2142,69,0.01656056],[6,1613,69,0.015652482],[5,746,69,0.009058777],[4,409,69,0.003601981],[3,247,69,0.001732948],[2,104,70,0.000976509],[1,45,70,0.000442197],[0,23,70,0.000301012],[0,14,70,0.000174447]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[-3482656,4771088]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":177.2119140625,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.8085937500000001],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4797070244161143],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",15.928659324446457],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",20.358910206262816]],"memory":[[-734128,16552096]],"mixsample":[[0.156494140625,"ival-sub",1200],[3.38037109375,"ival-div",0],[2.2119140625,"adjust",800],[0.137451171875,"ival-sqrt",2000],[0.093994140625,"ival-mult",1200],[0.086181640625,"ival-sub",1600],[0.09423828125,"ival-sub",2000],[0.303466796875,"ival-sqrt",800],[0.14306640625,"ival-assert",0],[0.01318359375,"ival-sqrt",4000],[0.460205078125,"ival-sqrt",1200],[3.70654296875,"ival-sub",0],[2.119873046875,"ival-sqrt",0],[1.208251953125,"ival-sub",400],[0.8720703125,"adjust",2000],[0.081298828125,"ival-sub",2400],[0.201171875,"ival-mult",800],[0.15625,"ival-sqrt",1600],[0.29052734375,"ival-mult",400],[7.397705078125,"ival-mult",0],[0.196044921875,"ival-sub",800],[0.02197265625,"ival-mult",1600],[0.01513671875,"adjust",2800],[0.152099609375,"ival-sqrt",2400],[0.22314453125,"ival-true",0],[0.005859375,"ival-sub",4000],[0.294677734375,"exact",0],[0.339111328125,"ival-sqrt",400],[1.505615234375,"ival-neg",0]],"outcomes":[[10.712890625,1,"valid",46],[18.43603515625,2,"valid",40],[0.2919921875,3,"valid",1],[19.89306640625,0,"valid",169]],"time":63.316162109375,"type":"localize"},{"count":[[5,99]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[744480,8404720]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[5.2568359375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[2.449951171875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.69677734375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.906005859375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[3.366943359375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[3.18994140625,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[3.737060546875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[3.677001953125,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[2.053955078125,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":29.394775390625,"type":"series"},{"count":[[99,98]],"egraph":[[0,8487,2534,0.128572217],[2,5883,2670,0.029155929],[1,1718,2710,0.020876665],[0,545,2739,0.005290256]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[6361520,52985760]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) #s(literal 2 binary64))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c)) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) a) b) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64)) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* -1 (/ c b))","(/.f64 c (neg.f64 b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c))) (neg.f64 b))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64))) b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal -1 binary64)) b)","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) (neg.f64 b))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b)) #s(literal -2 binary64)) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64)))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c)) c)","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) c) b) c)))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":331.067138671875,"type":"simplify"},{"count":[[5,512]],"egraph":[[0,8102,44,0.059925378],[2,591,48,0.023277948],[1,81,51,0.002437283],[0,23,51,0.000859506],[0,14,51,0.000165038]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[5929728,53146144]],"outputs":[["(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 a)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 1 binary64))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a) #s(literal -2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 b a) a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a))","(/.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))))","(neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 1 binary64) (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 b (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 b (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64)))))","(/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 b b)) c) a))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 c #s(literal 4 binary64)) (neg.f64 a) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))","(fma.f64 (neg.f64 c) (*.f64 a #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (neg.f64 a) (*.f64 c #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 a #s(literal 4 binary64)) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal -1 binary64) (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal 4 binary64) (neg.f64 c)) (*.f64 b b))","(fma.f64 a (neg.f64 (*.f64 c #s(literal 4 binary64))) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (*.f64 b b) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 b b) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 b b) #s(literal -1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 b (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 b b (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(sqrt.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(-.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(hypot.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 b b) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(hypot.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) (*.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (fma.f64 b (/.f64 b (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (+.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (fma.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (fma.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (*.f64 b b) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1 binary64)))","(neg.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(fma.f64 (/.f64 (*.f64 b b) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (/.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (pow.f64 b #s(literal 3/2 binary64)) (/.f64 (pow.f64 b #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) b)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 #s(literal 1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64) b)","(fma.f64 (*.f64 b b) (/.f64 b (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 b (/.f64 b (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 b (/.f64 (*.f64 b b) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 b #s(literal 1 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(-.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(+.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(+.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(+.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(+.f64 b (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(*.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b))","(*.f64 b #s(literal -1 binary64))","(*.f64 b #s(literal 1 binary64))","(pow.f64 b #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b b) #s(literal 0 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b))","(/.f64 (*.f64 b b) b)","(neg.f64 b)","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) #s(literal 0 binary64))","(fma.f64 b #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(-.f64 #s(literal 0 binary64) b)","(exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b)","(+.f64 b #s(literal 0 binary64))","b","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fabs.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":234.926025390625,"type":"rewrite"},{"compiler":[[21740,2333]],"memory":[[-1300928,58352944]],"time":135.197021484375,"type":"eval"},{"alts":[["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","fresh",30.411636507318224,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","fresh",45.43312424532945,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","fresh",41.82291426104281,"binary64"],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","next",30.21638203730341,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",34.51752534060088,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",30.475585082375744,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","next",33.07742701310272,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","next",48.85399099310724,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",39.863875731246665,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","next",46.06816259872266,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",45.20342157060516,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.923312162201036,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","fresh",40.97571465237961,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) (neg.f64 b)))","fresh",48.871065999705614,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","fresh",42.234046526329124,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","fresh",46.023225263639425,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",45.87554862949924,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","next",40.48990469781258,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.99993916834247,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","fresh",46.06576801555993,"binary64"]],"compiler":[[18,13],[27,16],[23,17],[16,13],[25,14],[20,16],[28,20],[21,16],[23,18],[26,19],[25,19],[15,12],[15,12],[44,30],[31,21],[27,19],[22,17],[22,17],[25,18],[29,21],[18,13],[27,16],[23,17],[16,13],[25,14],[20,16],[28,20],[21,16],[23,18],[26,19],[25,19],[15,12],[15,12],[44,30],[31,21],[27,19],[22,17],[22,17],[25,18],[29,21]],"count":[[608,20]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[607,20],"picked":[1,0]}],"memory":[[-4422960,31813504]],"min-error":[[5.495189226750218,"binary64"]],"time":33.866943359375,"type":"prune"},{"egraph":[[0,8004,368,0.035913459],[7,7838,368,0.011902565],[6,5993,368,0.034213841],[5,2785,368,0.035305636],[4,1307,368,0.013628931],[3,734,376,0.005834554],[2,304,379,0.002521765],[1,141,381,0.001216998],[0,71,381,0.000709175],[0,44,395,0.000455904]],"inputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","c","(neg.f64 b)","b","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(*.f64 #s(literal -2 binary64) c)","#s(literal -2 binary64)","c","(/.f64 a b)","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))","#s(literal -4 binary64)","a","(/.f64 (*.f64 b b) c)","(*.f64 b b)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","cost-diff",2],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(neg.f64 b)","cost-diff",0],["(/.f64 c (neg.f64 b))","cost-diff",0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","cost-diff",0],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","cost-diff",0],["(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","cost-diff",0],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[3361376,18428240]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","a","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","c","(neg.f64 b)","b","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) b))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)","(*.f64 #s(literal -2 binary64) c)","#s(literal -2 binary64)","c","(/.f64 a b)","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) b))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))","#s(approx (- (* b b) (* 4 (* a c))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))","(fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c))","#s(literal -4 binary64)","a","(/.f64 (*.f64 b b) c)","(*.f64 b b)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":208.7939453125,"type":"simplify"},{"compiler":[[313,34]],"locations":[["(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","accuracy",4.53681385453628],["(/.f64 (*.f64 b b) c)","accuracy",6.4102008156715184],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))))","accuracy",15.928659324446457],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))","accuracy",20.358910206262816],["(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","accuracy",1.6925353666928058],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4797070244161143],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","accuracy",15.928659324446457],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","accuracy",46.40818275050315],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4797070244161143],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","accuracy",15.928659324446457],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","accuracy",20.358910206262816],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","accuracy",22.985845971601638],["(/.f64 c (neg.f64 b))","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","accuracy",40.48990469781258],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.8085937500000001],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4797070244161143],["(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","accuracy",15.928659324446457],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",20.358910206262816]],"memory":[[1061344,43326368]],"mixsample":[[0.122802734375,"ival-sub",1200],[4.59716796875,"adjust",800],[11.6669921875,"ival-div",0],[0.005859375,"ival-mult",1200],[0.0478515625,"ival-neg",2400],[0.120849609375,"ival-sub",1600],[0.110595703125,"ival-assert",0],[0.5869140625,"ival-neg",800],[5.142578125,"ival-sub",0],[0.486083984375,"ival-sqrt",1200],[0.15283203125,"ival-sub",400],[3.816162109375,"ival-sqrt",0],[0.160400390625,"ival-neg",400],[0.052978515625,"ival-mult",800],[4.180419921875,"ival-add",0],[0.1181640625,"ival-sub",800],[0.119140625,"ival-neg",1200],[0.250244140625,"ival-add",400],[0.041015625,"adjust",2800],[0.074951171875,"ival-add",2400],[0.00390625,"ival-sub",4000],[0.005126953125,"ival-neg",4000],[0.59375,"ival-sqrt",400],[0.197265625,"ival-add",1200],[0.264892578125,"ival-sqrt",2000],[0.05029296875,"ival-sub",2000],[0.49169921875,"ival-sqrt",800],[0.02490234375,"ival-sqrt",4000],[0.06103515625,"ival-neg",1600],[0.005126953125,"ival-add",4000],[1.97802734375,"adjust",2000],[0.0517578125,"ival-sub",2400],[0.105712890625,"ival-add",1600],[0.3076171875,"ival-sqrt",1600],[16.5068359375,"ival-mult",0],[0.07421875,"ival-mult",400],[0.08740234375,"ival-add",2000],[0.052978515625,"ival-neg",2000],[0.241943359375,"ival-true",0],[0.23681640625,"ival-sqrt",2400],[0.516357421875,"exact",0],[0.188232421875,"ival-add",800],[19.763427734375,"ival-neg",0]],"outcomes":[[21.521728515625,1,"valid",46],[26.525390625,2,"valid",40],[0.77294921875,3,"valid",1],[61.12939453125,0,"valid",169]],"time":142.01904296875,"type":"localize"},{"count":[[21,135]],"inputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","(neg.f64 b)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))","(/.f64 (*.f64 b b) c)"]],"memory":[[-1861856,13603824]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 b)","(- (* 2 (/ (* a c) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 (/ c b))","(- (pow b 2) (* 4 (* a c)))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(/ (pow b 2) c)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))"]],"series":[[3.4638671875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","c","-inf"],[4.4638671875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","c","inf"],[3.04296875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","c","0"],[2.612060546875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","b","-inf"],[2.89599609375,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","b","inf"],[3.177978515625,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","b","0"],[4.574951171875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","a","-inf"],[4.52880859375,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","a","inf"],[2.1689453125,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (+ (* -4 a) (/ (* b b) c)) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))) (+ (* (* -2 c) (/ a b)) b) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* b b) c))","a","0"]],"time":35.090087890625,"type":"series"},{"count":[[135,134]],"egraph":[[0,8092,3615,0.102161396],[2,6772,3776,0.030908781],[1,2011,3823,0.021576444],[0,633,3868,0.007091486]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 b)","(- (* 2 (/ (* a c) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 (/ c b))","(- (pow b 2) (* 4 (* a c)))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(/ (pow b 2) c)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))"]],"memory":[[4192144,54423904]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 c b) a (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","(* -1 b)","(neg.f64 b)","(- (* 2 (/ (* a c) b)) b)","(fma.f64 (*.f64 (/.f64 a b) #s(literal 2 binary64)) c (neg.f64 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b))) a (neg.f64 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (neg.f64 b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) c (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -2 binary64)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64))))) (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (/ b a)))","(*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 c b) (/.f64 b a)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) a)) a)))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (-.f64 (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a)))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a)))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 c b) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 a c) (*.f64 b b)) b)","(/ (pow b 2) c)","(/.f64 (*.f64 b b) c)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64)))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 2 binary64))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -1 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64)))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c))) (neg.f64 b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) (/.f64 a b) (*.f64 a c))) b)","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) (/.f64 a b) (*.f64 a c)) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64) (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) b) (/.f64 a b) (*.f64 a c))) (*.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (neg.f64 b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal 2 binary64) #s(literal -1 binary64)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64)))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 (/.f64 c b) b)) #s(literal -2 binary64))) b)","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) b)","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) (/.f64 a b))) c (neg.f64 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (neg.f64 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 a (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) c) (/.f64 a b)) b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64)))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 a c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64))))) (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (+ (* -2 (/ a b)) (/ b c)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal -2 binary64) (/.f64 b c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) (neg.f64 c))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))) (/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) c)) c)))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (-.f64 (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 a b) #s(literal 2 binary64) (/.f64 (neg.f64 b) c)))"]],"stop":[["iter limit",1],["node limit",1]],"time":290.5478515625,"type":"simplify"},{"count":[[21,997]],"egraph":[[0,8219,300,0.072961396],[2,2284,300,0.037251674],[1,292,300,0.008256716],[0,71,300,0.002222408],[0,44,311,0.000458737]],"inputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","(neg.f64 b)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c))))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))","(/.f64 (*.f64 b b) c)"]],"memory":[[1475504,74833264]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) #s(literal 3 binary64))) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) a (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) a (*.f64 a (/.f64 b #s(literal -2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (neg.f64 b) a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 b #s(literal -2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) a (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 b (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal 2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) #s(literal 3 binary64))) (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a))))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))) (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))) (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal -2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (*.f64 #s(literal -2 binary64) a)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)))","(*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(*.f64 #s(literal -1 binary64) (+.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 b b))) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (+.f64 #s(literal 0 binary64) b) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (neg.f64 b) b))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) b) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (neg.f64 b) b))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b)))","(/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(neg.f64 (+.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (neg.f64 b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64) (neg.f64 b))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))) (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))))","(-.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) (/.f64 (*.f64 b b) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(-.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(-.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b)))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(-.f64 #s(literal 0 binary64) (+.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) b)","(+.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) b)","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))","(+.f64 b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))) (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(-.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(+.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(*.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(*.f64 #s(literal -1 binary64) (/.f64 c b))","(*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","(*.f64 #s(literal 1 binary64) (/.f64 c (neg.f64 b)))","(*.f64 (neg.f64 c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 c (/.f64 #s(literal -1 binary64) b))","(pow.f64 (/.f64 (/.f64 (neg.f64 b) c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 b) c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 c #s(literal -1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) b)","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) b)","(/.f64 (/.f64 c #s(literal -1 binary64)) b)","(/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (neg.f64 b) c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 b) c)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (neg.f64 b) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 b) c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c))","(/.f64 (neg.f64 c) b)","(/.f64 c (neg.f64 b))","(neg.f64 (/.f64 c b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 c b))","(-.f64 #s(literal 0 binary64) (/.f64 c b))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 b #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))","(/.f64 (*.f64 b b) (neg.f64 (+.f64 #s(literal 0 binary64) b)))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b)) (/.f64 (*.f64 b b) (+.f64 #s(literal 0 binary64) b)))","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(neg.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) #s(literal -1 binary64)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (fma.f64 b b (-.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))","(neg.f64 (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(fma.f64 #s(literal -1 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))","(-.f64 (/.f64 (*.f64 b b) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(-.f64 #s(literal 0 binary64) (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))","(+.f64 (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))","(*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)","(*.f64 c (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 2 binary64))) c)) (neg.f64 (-.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 b b) c))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 3 binary64))) c)) (neg.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (/.f64 (*.f64 b b) c) (-.f64 (/.f64 (*.f64 b b) c) (*.f64 a #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 a #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 b b) c))))","(/.f64 (neg.f64 (*.f64 c (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (/.f64 (*.f64 b b) c) (-.f64 (/.f64 (*.f64 b b) c) (*.f64 a #s(literal -4 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 2 binary64))) c) (-.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 b b) c)))","(/.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 3 binary64))) c) (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (/.f64 (*.f64 b b) c) (-.f64 (/.f64 (*.f64 b b) c) (*.f64 a #s(literal -4 binary64))))))","(/.f64 (*.f64 c (-.f64 (pow.f64 (*.f64 a #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 2 binary64)))) (-.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 b b) c)))","(/.f64 (*.f64 c (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 (/.f64 (*.f64 b b) c) #s(literal 3 binary64)))) (fma.f64 (*.f64 a a) #s(literal 16 binary64) (*.f64 (/.f64 (*.f64 b b) c) (-.f64 (/.f64 (*.f64 b b) c) (*.f64 a #s(literal -4 binary64))))))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 (neg.f64 (*.f64 a c)) #s(literal 4 binary64) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 (neg.f64 (*.f64 a c)) #s(literal 4 binary64) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 a c) #s(literal 4 binary64)) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 a c) #s(literal 4 binary64)) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 (/.f64 (*.f64 b b) c) c (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 a c)) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 a c)) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 c (/.f64 (*.f64 b b) c)))","(fma.f64 c (/.f64 (*.f64 b b) c) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 (/.f64 (*.f64 b b) c) c))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 c (/.f64 (*.f64 b b) c)))","(+.f64 (*.f64 (/.f64 (*.f64 b b) c) c) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(+.f64 (*.f64 c (/.f64 (*.f64 b b) c)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(+.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 b b) c) c))","(+.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 c (/.f64 (*.f64 b b) c)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) #s(literal -1 binary64)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(neg.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))))","(-.f64 #s(literal 0 binary64) (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(*.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1 binary64))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(pow.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(neg.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 a c)) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b) b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 a c) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 a c)) (*.f64 b b))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 b b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(+.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1 binary64))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(sqrt.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)) (pow.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b))) (neg.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) c) b))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))))","(fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c b)","(fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) a) (pow.f64 b #s(literal -1 binary64)) b)","(fma.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64) b)","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(fma.f64 #s(literal 1 binary64) b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(fma.f64 #s(literal -2 binary64) (*.f64 (/.f64 a b) c) b)","(fma.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) c)) b)","(fma.f64 c (*.f64 #s(literal -2 binary64) (/.f64 a b)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))) (/.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))) (/.f64 (*.f64 b b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))))","(+.f64 (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c) b)","(+.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(*.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)))))","(*.f64 (/.f64 b c) b)","(*.f64 (pow.f64 c #s(literal -1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 c #s(literal -1 binary64)) (*.f64 b b))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) c))","(*.f64 (*.f64 (neg.f64 b) b) (pow.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 (*.f64 b b) (pow.f64 c #s(literal -1 binary64)))","(*.f64 b (/.f64 b c))","(pow.f64 (/.f64 (/.f64 c (*.f64 b b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 c (*.f64 b b)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 c (*.f64 b b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 c (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 c (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 c (*.f64 b b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 c (*.f64 b b)))","(/.f64 (*.f64 (neg.f64 b) b) (neg.f64 (neg.f64 (neg.f64 c))))","(/.f64 (*.f64 (neg.f64 b) b) (neg.f64 c))","(/.f64 (*.f64 b b) (neg.f64 (neg.f64 c)))","(/.f64 (*.f64 b b) c)","(neg.f64 (/.f64 (*.f64 (neg.f64 b) b) c))","(-.f64 (/.f64 #s(literal 0 binary64) c) (/.f64 (*.f64 (neg.f64 b) b) c))","(exp.f64 (*.f64 (log.f64 (/.f64 c (*.f64 b b))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":276.859130859375,"type":"rewrite"},{"compiler":[[45373,4503]],"memory":[[4649600,114686576]],"time":246.322998046875,"type":"eval"},{"alts":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","next",30.313163865586606,"binary64"],["(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","next",30.83314605475229,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","fresh",45.43312424532945,"binary64"],["(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","fresh",62.698750954795855,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.07422163211675,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","fresh",41.82291426104281,"binary64"],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","done",30.21638203730341,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",34.51752534060088,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",30.475585082375744,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","done",33.07742701310272,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",39.863875731246665,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","fresh",55.42915709593634,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",45.20342157060516,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.923312162201036,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","next",48.85789724310724,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","fresh",40.97571465237961,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)) (neg.f64 b)))","fresh",48.871065999705614,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","next",42.234046526329124,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","fresh",46.023225263639425,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","next",45.87554862949924,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.99993916834247,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","fresh",46.06576801555993,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","fresh",46.02045856232698,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",40.48990469781258,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","fresh",40.80132035935904,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","fresh",40.568029697812634,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","fresh",52.675771628618136,"binary64"]],"compiler":[[18,14],[26,17],[27,16],[57,23],[33,23],[23,17],[16,13],[25,14],[20,16],[28,20],[23,18],[35,25],[25,19],[15,12],[21,16],[15,12],[44,30],[31,21],[27,19],[22,17],[25,18],[29,21],[28,21],[22,17],[24,19],[23,18],[26,21],[18,14],[26,17],[27,16],[57,23],[33,23],[23,17],[25,14],[20,16],[23,18],[35,25],[25,19],[15,12],[21,16],[15,12],[44,30],[31,21],[27,19],[22,17],[25,18],[29,21],[28,21],[24,19],[23,18],[26,21]],"count":[[1184,27]],"kept":[{"done":[0,0],"fresh":[15,8],"new":[1164,16],"picked":[5,3]}],"memory":[[-12791936,56942560]],"min-error":[[5.495189226739133,"binary64"]],"time":51.81787109375,"type":"prune"},{"egraph":[[0,8099,319,0.045620636],[6,7566,319,0.018585497],[5,4655,319,0.030221317],[4,1932,319,0.019263357],[3,741,320,0.008219381],[2,304,325,0.002662931],[1,146,334,0.001310822],[0,77,336,0.000799919],[0,48,352,0.000404143]],"inputs":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(literal -1/2 binary64)","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(*.f64 a c)","a","c","#s(literal -4 binary64)","(*.f64 b b)","b","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(*.f64 b b)","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","(fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)","(/.f64 c b)","c","b","(/.f64 (*.f64 a c) b)","(*.f64 a c)","a","(neg.f64 b)","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(*.f64 a c)","c","#s(literal -4 binary64)","(*.f64 b b)","(*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a))"]],"locations":[["(*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","cost-diff",1],["(*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a))","cost-diff",2],["(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","cost-diff",2],["(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","cost-diff",6],["(/.f64 c b)","cost-diff",0],["(fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)","cost-diff",0],["(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","cost-diff",0],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","cost-diff",1],["(neg.f64 b)","cost-diff",0],["(/.f64 (neg.f64 b) a)","cost-diff",0],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","cost-diff",0],["(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","cost-diff",0],["(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","cost-diff",0],["(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)","cost-diff",0],["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","cost-diff",3]],"memory":[[2833088,24806896]],"method":["egg-herbie"],"outputs":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","#s(literal -1/2 binary64)","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)","(/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a)","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 a c)","(*.f64 c a)","a","c","#s(literal -4 binary64)","(*.f64 b b)","b","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) b)","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(*.f64 b b)","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (*.f64 (/.f64 c b) a) (/.f64 c b) c) (neg.f64 b)))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","(/.f64 (fma.f64 (*.f64 (/.f64 c b) a) (/.f64 c b) c) (neg.f64 b))","(fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)","(fma.f64 (*.f64 (/.f64 c b) a) (/.f64 c b) c)","(/.f64 c b)","c","b","(/.f64 (*.f64 a c) b)","(*.f64 (/.f64 c b) a)","(*.f64 a c)","(*.f64 c a)","a","(neg.f64 b)","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -2 binary64))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 a c)","(*.f64 c a)","c","#s(literal -4 binary64)","(*.f64 b b)","(*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 4 binary64) a)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":198.97998046875,"type":"simplify"},{"compiler":[[334,48]],"locations":[["(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","accuracy",0.8085937500000001],["(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","accuracy",3.4771263771657113],["(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","accuracy",20.358910206262816],["(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","accuracy",26.147478682956077],["(fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)","accuracy",0.05078125],["(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","accuracy",0.2599993243251477],["(/.f64 (*.f64 a c) b)","accuracy",5.411319500068666],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","accuracy",40.748918045397424],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","accuracy",3.364923474933965],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","accuracy",15.928659324446457],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","accuracy",20.358910206262816],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","accuracy",22.985845971601638],["(/.f64 (neg.f64 b) a)","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","accuracy",45.87554862949924],["(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)","accuracy",0.08984375],["(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","accuracy",0.8085937500000001],["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","accuracy",18.588107259818468],["(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","accuracy",20.358910206262816]],"memory":[[7001264,56578736]],"mixsample":[[0.132080078125,"ival-sub",1200],[21.076904296875,"ival-div",0],[7.052001953125,"adjust",800],[0.555419921875,"ival-mult",1200],[0.02294921875,"ival-sqrt",3200],[0.10546875,"ival-neg",2400],[0.07373046875,"ival-sub",1600],[0.69189453125,"ival-div",400],[0.33349609375,"ival-div",1600],[0.14306640625,"ival-assert",0],[0.248779296875,"ival-neg",800],[0.890380859375,"ival-sqrt",1200],[5.742431640625,"ival-sub",0],[0.183837890625,"ival-sub",400],[6.58203125,"ival-sqrt",0],[0.33349609375,"ival-neg",400],[0.067138671875,"ival-sqrt",2800],[8.3876953125,"ival-add",0],[0.722900390625,"ival-mult",800],[0.125244140625,"ival-sub",800],[0.239501953125,"ival-neg",1200],[0.327392578125,"ival-mult",1600],[0.3095703125,"ival-add",400],[0.05810546875,"adjust",2800],[0.4140625,"ival-div",2000],[0.0068359375,"ival-div",4000],[0.124755859375,"ival-add",2400],[0.197998046875,"ival-mult",2400],[0.004150390625,"ival-sub",4000],[0.009033203125,"ival-neg",4000],[0.17236328125,"ival-div",2400],[0.784423828125,"ival-sqrt",400],[0.449462890625,"ival-add",1200],[0.455322265625,"ival-sqrt",2000],[0.40966796875,"ival-mult",2000],[0.051513671875,"ival-sub",2000],[0.65673828125,"ival-sqrt",800],[0.082763671875,"ival-mult",2800],[0.035888671875,"ival-sqrt",4000],[0.140380859375,"ival-neg",1600],[0.00390625,"ival-add",4000],[0.013671875,"ival-add",3200],[0.0302734375,"ival-div",3200],[0.09228515625,"ival-div",2800],[3.0263671875,"adjust",2000],[0.0546875,"ival-sub",2400],[0.581787109375,"ival-div",1200],[0.81396484375,"ival-mult",400],[28.650634765625,"ival-mult",0],[0.552734375,"ival-sqrt",1600],[0.13330078125,"ival-add",1600],[0.041259765625,"ival-add",2800],[0.1748046875,"ival-add",2000],[0.105224609375,"ival-neg",2000],[0.811767578125,"ival-div",800],[0.36328125,"ival-sqrt",2400],[0.29296875,"ival-true",0],[0.01513671875,"ival-mult",3200],[0.908203125,"exact",0],[0.300537109375,"ival-add",800],[0.011962890625,"ival-mult",4000],[3.64306640625,"ival-neg",0]],"outcomes":[[32.358154296875,1,"valid",44],[44.277099609375,2,"valid",42],[1.14306640625,3,"valid",1],[65.898681640625,0,"valid",169]],"time":186.152099609375,"type":"localize"},{"count":[[21,210]],"inputs":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","(fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)","(/.f64 c b)","(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(/.f64 (*.f64 a c) b)"]],"memory":[[-4952800,19735616]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/ b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ 1/2 a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","c","(+ c (/ (* a (pow c 2)) (pow b 2)))","(* -4 b)","(+ (* -4 b) (* 4 (/ (* a c) b)))","(+ (* -4 b) (* a (+ (* 4 (/ c b)) (* 4 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* -4 b) (* a (+ (* 4 (/ c b)) (* a (+ (* 4 (/ (pow c 2) (pow b 3))) (* 8 (/ (* a (pow c 3)) (pow b 5))))))))","(* 4 a)","(+ (* -2 b) (* 4 (/ (* a c) b)))","(+ (* -2 b) (* a (+ (* 4 (/ c b)) (* 4 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* -2 b) (* a (+ (* 4 (/ c b)) (* a (+ (* 4 (/ (pow c 2) (pow b 3))) (* 8 (/ (* a (pow c 3)) (pow b 5))))))))","(/ (* a c) b)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (/ c a)) (sqrt -4))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* -1 (/ (* a (pow c 2)) (pow b 3)))","(* a (+ (* -1 (/ c (* a b))) (* -1 (/ (pow c 2) (pow b 3)))))","(/ (* a (pow c 2)) (pow b 2))","(* a (+ (/ c a) (/ (pow c 2) (pow b 2))))","(* -2 (* (sqrt (* a c)) (sqrt -4)))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (* -2 (/ b a))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -2 (/ b a)) (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -2 (/ b a)) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (/ c (* a b)) (/ (pow c 2) (pow b 3)))))","(* -1 (* a (+ (* -1 (/ c a)) (* -1 (/ (pow c 2) (pow b 2))))))","(* 4 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* 2 (/ b a)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a))) a)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/256 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 b)","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(/ (+ (* -1 (* a (pow c 2))) (* -1 (* (pow b 2) c))) (pow b 3))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 2))","(/ c b)","(+ (* -2 b) (* -2 (* (sqrt (* a c)) (sqrt -4))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* b (- (* -1 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 2)))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* b (- (* b (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) 2)))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* (pow b 2) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* (pow b 2) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(- (pow b 2) (* 4 (* a c)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(* b (- (* 4 (/ (* a c) (pow b 2))) 4))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 4))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 4))","(* b (- (* 4 (/ (* a c) (pow b 2))) 2))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -4 (/ (* a c) b))","(* -1 (/ (+ (* 4 (* a c)) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* 4 (* a c)) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b))","(* -1 (/ (+ (* 4 (* a c)) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (+ (* 4 (/ (* (pow a 4) (pow c 4)) (pow b 6))) (+ (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (* 16 (/ (* (pow a 4) (pow c 4)) (pow b 6))))))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 3) (pow c 4))) (* 16 (* (pow a 3) (pow c 4)))) (pow b 6))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* 2 b)","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2)))","(* -1 (* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2)))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ (* -2 (/ c b)) (/ b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (+ 1 (/ (* a c) (pow b 2))))","(+ (* -4 b) (* c (+ (* 4 (/ a b)) (* 4 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* -4 b) (* c (+ (* 4 (/ a b)) (* c (+ (* 4 (/ (pow a 2) (pow b 3))) (* 8 (/ (* (pow a 3) c) (pow b 5))))))))","(+ (* -2 b) (* c (+ (* 4 (/ a b)) (* 4 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* -2 b) (* c (+ (* 4 (/ a b)) (* c (+ (* 4 (/ (pow a 2) (pow b 3))) (* 8 (/ (* (pow a 3) c) (pow b 5))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* (pow c 2) (- (* -1 (/ a (pow b 3))) (/ 1 (* b c))))","(* (pow c 2) (+ (/ 1 c) (/ a (pow b 2))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (* -2 (/ b c))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -2 (/ b c)) (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -2 (/ b c)) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* 2 (/ b c)))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/256 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"series":[[5.864013671875,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","c","-inf"],[6.514892578125,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","c","inf"],[6.994140625,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","c","0"],[5.43896484375,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","b","-inf"],[4.949951171875,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","b","inf"],[4.547119140625,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","b","0"],[10.404052734375,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","a","-inf"],[5.574951171875,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","a","inf"],[4.279052734375,"((+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (sqrt (+ (* (* a c) -4) (* b b))) (+ (* (* a c) -4) (* b b)) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (neg b) a) (neg b) (* (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c)))))) (/ 1/2 a) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/ (+ (* (/ c b) (/ (* a c) b)) c) (neg b)) (+ (* (/ c b) (/ (* a c) b)) c) (/ c b) (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (/ (+ (* (/ (neg b) a) (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b)))))) (* 2 (* 2 a))) (* 2 (* 2 a)) (* 2 (neg (sqrt (+ (* (* a c) -4) (* b b))))) (- (* b b) (* 4 (* a c))) (sqrt (- (* b b) (* 4 (* a c)))) (/ (* a c) b))","a","0"]],"time":62.921875,"type":"series"},{"count":[[210,208]],"egraph":[[0,9070,5595,0.128019305],[1,3010,5878,0.029749618],[0,913,5959,0.010906974]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/ b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ 1/2 a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","c","(+ c (/ (* a (pow c 2)) (pow b 2)))","(* -4 b)","(+ (* -4 b) (* 4 (/ (* a c) b)))","(+ (* -4 b) (* a (+ (* 4 (/ c b)) (* 4 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* -4 b) (* a (+ (* 4 (/ c b)) (* a (+ (* 4 (/ (pow c 2) (pow b 3))) (* 8 (/ (* a (pow c 3)) (pow b 5))))))))","(* 4 a)","(+ (* -2 b) (* 4 (/ (* a c) b)))","(+ (* -2 b) (* a (+ (* 4 (/ c b)) (* 4 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* -2 b) (* a (+ (* 4 (/ c b)) (* a (+ (* 4 (/ (pow c 2) (pow b 3))) (* 8 (/ (* a (pow c 3)) (pow b 5))))))))","(/ (* a c) b)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (/ c a)) (sqrt -4))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* -1 (/ (* a (pow c 2)) (pow b 3)))","(* a (+ (* -1 (/ c (* a b))) (* -1 (/ (pow c 2) (pow b 3)))))","(/ (* a (pow c 2)) (pow b 2))","(* a (+ (/ c a) (/ (pow c 2) (pow b 2))))","(* -2 (* (sqrt (* a c)) (sqrt -4)))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (* -2 (/ b a))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -2 (/ b a)) (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -2 (/ b a)) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (/ c (* a b)) (/ (pow c 2) (pow b 3)))))","(* -1 (* a (+ (* -1 (/ c a)) (* -1 (/ (pow c 2) (pow b 2))))))","(* 4 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* 2 (/ b a)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a))) a)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/256 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 b)","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(/ (+ (* -1 (* a (pow c 2))) (* -1 (* (pow b 2) c))) (pow b 3))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 2))","(/ c b)","(+ (* -2 b) (* -2 (* (sqrt (* a c)) (sqrt -4))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* b (- (* -1 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 2)))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* b (- (* b (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) 2)))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* (pow b 2) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* (pow b 2) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(- (pow b 2) (* 4 (* a c)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(* b (- (* 4 (/ (* a c) (pow b 2))) 4))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 4))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 4))","(* b (- (* 4 (/ (* a c) (pow b 2))) 2))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2))","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -4 (/ (* a c) b))","(* -1 (/ (+ (* 4 (* a c)) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* 4 (* a c)) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b))","(* -1 (/ (+ (* 4 (* a c)) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (+ (* 4 (/ (* (pow a 4) (pow c 4)) (pow b 6))) (+ (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (* 16 (/ (* (pow a 4) (pow c 4)) (pow b 6))))))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 3) (pow c 4))) (* 16 (* (pow a 3) (pow c 4)))) (pow b 6))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* 2 b)","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2)))","(* -1 (* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2)))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ (* -2 (/ c b)) (/ b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (+ 1 (/ (* a c) (pow b 2))))","(+ (* -4 b) (* c (+ (* 4 (/ a b)) (* 4 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* -4 b) (* c (+ (* 4 (/ a b)) (* c (+ (* 4 (/ (pow a 2) (pow b 3))) (* 8 (/ (* (pow a 3) c) (pow b 5))))))))","(+ (* -2 b) (* c (+ (* 4 (/ a b)) (* 4 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* -2 b) (* c (+ (* 4 (/ a b)) (* c (+ (* 4 (/ (pow a 2) (pow b 3))) (* 8 (/ (* (pow a 3) c) (pow b 5))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* (pow c 2) (- (* -1 (/ a (pow b 3))) (/ 1 (* b c))))","(* (pow c 2) (+ (/ 1 c) (/ a (pow b 2))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (* -2 (/ b c))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -2 (/ b c)) (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -2 (/ b c)) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* 2 (/ b c)))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/256 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"memory":[[3468240,66793120]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(/ b a)","(/.f64 b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) b) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","(* -1 (/ c b))","(/.f64 c (neg.f64 b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","c","(+ c (/ (* a (pow c 2)) (pow b 2)))","(fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)","(* -4 b)","(*.f64 #s(literal -4 binary64) b)","(+ (* -4 b) (* 4 (/ (* a c) b)))","(fma.f64 (/.f64 (*.f64 c a) b) #s(literal 4 binary64) (*.f64 #s(literal -4 binary64) b))","(+ (* -4 b) (* a (+ (* 4 (/ c b)) (* 4 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) (*.f64 #s(literal -4 binary64) b))","(+ (* -4 b) (* a (+ (* 4 (/ c b)) (* a (+ (* 4 (/ (pow c 2) (pow b 3))) (* 8 (/ (* a (pow c 3)) (pow b 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 8 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 4 binary64))) a (*.f64 #s(literal -4 binary64) b))","(* 4 a)","(*.f64 #s(literal 4 binary64) a)","(+ (* -2 b) (* 4 (/ (* a c) b)))","(fma.f64 #s(literal -2 binary64) b (*.f64 (/.f64 (*.f64 c a) b) #s(literal 4 binary64)))","(+ (* -2 b) (* a (+ (* 4 (/ c b)) (* 4 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) (*.f64 #s(literal -2 binary64) b))","(+ (* -2 b) (* a (+ (* 4 (/ c b)) (* a (+ (* 4 (/ (pow c 2) (pow b 3))) (* 8 (/ (* a (pow c 3)) (pow b 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 8 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 4 binary64))) a (*.f64 #s(literal -2 binary64) b))","(/ (* a c) b)","(/.f64 (*.f64 c a) b)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* (sqrt (/ c a)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 (*.f64 #s(literal -4 binary64) a) c)","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* -1 (/ (* a (pow c 2)) (pow b 3)))","(*.f64 (neg.f64 a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))))","(* a (+ (* -1 (/ c (* a b))) (* -1 (/ (pow c 2) (pow b 3)))))","(*.f64 (neg.f64 a) (+.f64 (/.f64 (/.f64 c a) b) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))))","(/ (* a (pow c 2)) (pow b 2))","(*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))","(* a (+ (/ c a) (/ (pow c 2) (pow b 2))))","(*.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a)) a)","(* -2 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (* -2 (/ b a))))","(*.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -2 (/ b a)) (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -2 (/ b a)) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))) a)","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))) a)","(* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))))) a)","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/64 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (/ c (* a b)) (/ (pow c 2) (pow b 3)))))","(*.f64 (neg.f64 a) (+.f64 (/.f64 (/.f64 c a) b) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))))","(* -1 (* a (+ (* -1 (/ c a)) (* -1 (/ (pow c 2) (pow b 2))))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a))))","(* 4 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* 2 (/ b a)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal 2 binary64))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) b)) (neg.f64 a))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a))) a)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal -2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/32 binary64)))) (neg.f64 a))) (neg.f64 a))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/32 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (*.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -4 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/256 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -1/256 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(* -1 b)","(neg.f64 b)","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(/ (+ (* -1 (* a (pow c 2))) (* -1 (* (pow b 2) c))) (pow b 3))","(/.f64 (neg.f64 (fma.f64 (*.f64 b b) c (*.f64 (*.f64 c c) a))) (pow.f64 b #s(literal 3 binary64)))","(/ (+ (* a (pow c 2)) (* (pow b 2) c)) (pow b 2))","(/.f64 (fma.f64 (*.f64 b b) c (*.f64 (*.f64 c c) a)) (*.f64 b b))","(/ c b)","(/.f64 c b)","(+ (* -2 b) (* -2 (* (sqrt (* a c)) (sqrt -4))))","(*.f64 #s(literal -2 binary64) (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) b))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* b (- (* -1 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 2)))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (neg.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -2 binary64)) b))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* b (- (* b (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) 2)))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) b #s(literal -2 binary64)) b))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* (pow b 2) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) (*.f64 b b) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(+ (* -2 (* (sqrt (* a c)) (sqrt -4))) (* (pow b 2) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/4 binary64))) (*.f64 b b) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) (*.f64 b b)))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(*.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))) b)","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)) b)","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a)) b)","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 2 binary64))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))","(* b (- (* 4 (/ (* a c) (pow b 2))) 4))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 4 binary64) #s(literal -4 binary64)) b)","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 4))","(*.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal -4 binary64)) b)","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 4))","(*.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64))) b)","(* b (- (* 4 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 4 binary64) #s(literal -2 binary64)) b)","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2))","(*.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal -2 binary64)) b)","(* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2))","(*.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64))) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) (neg.f64 b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a))) (neg.f64 b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))) (neg.f64 b))","(* -2 (/ (* a c) b))","(*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) (neg.f64 b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 c a (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -4 (/ (* a c) b))","(*.f64 (/.f64 (*.f64 c a) b) #s(literal -4 binary64))","(* -1 (/ (+ (* 4 (* a c)) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(/.f64 (*.f64 #s(literal -4 binary64) (fma.f64 c a (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)))) b)","(* -1 (/ (+ (* 4 (* a c)) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 4 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -1 (/ (+ (* 4 (* a c)) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (+ (* 4 (/ (* (pow a 4) (pow c 4)) (pow b 6))) (+ (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (* 16 (/ (* (pow a 4) (pow c 4)) (pow b 6))))))) b))","(/.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 16 binary64) (pow.f64 a #s(literal 4 binary64))) (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 c #s(literal 4 binary64))) (pow.f64 a #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64)))))) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 3) (pow c 4))) (* 16 (* (pow a 3) (pow c 4)))) (pow b 6))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) (neg.f64 b))","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 2)))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 4 binary64) #s(literal -2 binary64)) (neg.f64 b))","(* -1 (* b (- (+ (* 4 (/ (* a c) (pow b 2))) (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2)))","(*.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 b))","(* -1 (* b (- (+ (* 4 (/ (* a c) (pow b 2))) (+ (* 4 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 8 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2)))","(*.f64 (fma.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64))) (neg.f64 b))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -2 (/ c b)) (/ b a))","(fma.f64 #s(literal -2 binary64) (/.f64 c b) (/.f64 b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -2 binary64) b)) c (/.f64 b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64))) c (/.f64 #s(literal -2 binary64) b)) c (/.f64 b a))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) b)) c)","(* c (+ 1 (/ (* a c) (pow b 2))))","(*.f64 (fma.f64 (/.f64 a b) (/.f64 c b) #s(literal 1 binary64)) c)","(+ (* -4 b) (* c (+ (* 4 (/ a b)) (* 4 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal -4 binary64) b))","(+ (* -4 b) (* c (+ (* 4 (/ a b)) (* c (+ (* 4 (/ (pow a 2) (pow b 3))) (* 8 (/ (* (pow a 3) c) (pow b 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 4 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 4 binary64))) c (*.f64 #s(literal -4 binary64) b))","(+ (* -2 b) (* c (+ (* 4 (/ a b)) (* 4 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal 4 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(+ (* -2 b) (* c (+ (* 4 (/ a b)) (* c (+ (* 4 (/ (pow a 2) (pow b 3))) (* 8 (/ (* (pow a 3) c) (pow b 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 4 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 4 binary64))) c (*.f64 #s(literal -2 binary64) b))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* (pow c 2) (- (* -1 (/ a (pow b 3))) (/ 1 (* b c))))","(*.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (*.f64 b c))) (*.f64 c c))","(* (pow c 2) (+ (/ 1 c) (/ a (pow b 2))))","(*.f64 (+.f64 (/.f64 a (*.f64 b b)) (/.f64 #s(literal 1 binary64) c)) (*.f64 c c))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (* -2 (/ b c))))","(*.f64 (*.f64 c #s(literal -2 binary64)) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -2 (/ b c)) (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -2 (/ b c)) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)) (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (neg.f64 (sqrt.f64 #s(literal -4 binary64))))))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(neg.f64 (*.f64 (neg.f64 c) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))) (neg.f64 c))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (-.f64 (/.f64 b c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) (neg.f64 c)) b) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* 2 (/ b c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 b c) #s(literal 2 binary64))) (neg.f64 c))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ (* -2 b) (* -1 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (fma.f64 #s(literal -2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/32 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/32 binary64) (*.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -4 (* (sqrt (/ a c)) (sqrt -1))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/256 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/256 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":349.33203125,"type":"simplify"},{"count":[[21,766]],"egraph":[[0,9059,246,0.09258803],[2,2341,249,0.037524883],[1,302,252,0.008218021],[0,77,257,0.00214903],[0,48,267,0.000449168]],"inputs":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b))","(fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)","(/.f64 c b)","(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(/.f64 (*.f64 a c) b)"]],"memory":[[11867536,73212128]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (pow.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (fma.f64 (pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))) (*.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) a) (*.f64 (neg.f64 a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 b a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a) (*.f64 (neg.f64 a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 b a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 4 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a) (*.f64 (neg.f64 a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 b a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 b a))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 b))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) b)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 #s(literal 4 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) #s(literal -2 binary64) (*.f64 (neg.f64 a) (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (neg.f64 a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -2 binary64) (*.f64 (neg.f64 a) (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (*.f64 b #s(literal 1 binary64)))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a (*.f64 #s(literal 2 binary64) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal -4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 4 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 b #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a (*.f64 a (*.f64 b #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) #s(literal -2 binary64) (*.f64 a (/.f64 b a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 a #s(literal -1 binary64))) (*.f64 a (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a (*.f64 (neg.f64 a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal -2 binary64) (*.f64 (neg.f64 a) (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1 binary64)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 b #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) #s(literal -2 binary64) (*.f64 a (/.f64 b a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 a #s(literal -1 binary64))) (*.f64 a (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 b #s(literal 1 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 b a))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 b))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) b)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 b #s(literal 1 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b #s(literal 1 binary64)))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) a (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (/.f64 b a) (neg.f64 a) (*.f64 #s(literal -2 binary64) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) (neg.f64 a) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) #s(literal -4 binary64))","(/.f64 (fma.f64 (/.f64 b a) a (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) (neg.f64 a) (*.f64 #s(literal -2 binary64) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b a) a (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (/.f64 b a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 b a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (neg.f64 a)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) a))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 2 binary64) a (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) a))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal -2 binary64) a (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b)) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64)) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 4 binary64) a))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 b (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 b (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 b #s(literal 2 binary64))) a)","(/.f64 (-.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (-.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)))) (/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal -1/8 binary64))) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) a (*.f64 a (*.f64 b #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal -2 binary64) a) b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) a (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 a a))))","(/.f64 (fma.f64 (pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal -1/2 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(*.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(neg.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal 16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) b) b))))","(neg.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b (neg.f64 b)) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 4 binary64) (*.f64 c a)) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 (neg.f64 a) c) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 b b (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 b b))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))) (/.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 c a)) (fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 c a)))","(exp.f64 (fma.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64) (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)))","(+.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","(*.f64 #s(literal -1 binary64) (/.f64 b a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b))","(*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) a))","(*.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 b (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (neg.f64 a) b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 a) b) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 a (neg.f64 b))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(/.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 a) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 a) b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b))","(/.f64 (neg.f64 b) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 b) a)","(/.f64 b (neg.f64 a))","(neg.f64 (/.f64 b a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 b a))","(-.f64 #s(literal 0 binary64) (/.f64 b a))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 b #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) b))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(neg.f64 b)","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 a (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 (neg.f64 a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal -1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1/2 binary64) a)","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(neg.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) (neg.f64 b)))","(*.f64 (pow.f64 (/.f64 (neg.f64 b) (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c))) #s(literal -1 binary64)) (pow.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 b) (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) b))","(*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (pow.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) (neg.f64 b)))","(*.f64 (neg.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) (/.f64 #s(literal -1 binary64) b))","(pow.f64 (/.f64 (/.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) #s(literal -1 binary64)) b)","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (/.f64 #s(literal -1 binary64) b)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)))","(/.f64 (*.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) b)) (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) #s(literal 1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c))) (neg.f64 b))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) #s(literal 1 binary64)) (*.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))) (neg.f64 b)))","(/.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (*.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)))","(/.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64))) (*.f64 (neg.f64 b) (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)) b)","(/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) (neg.f64 b))","(neg.f64 (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) b))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c) b))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (pow.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))) (*.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) (*.f64 c c))) (*.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))","(/.f64 (-.f64 (*.f64 c c) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))) (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c))) (neg.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))","(/.f64 (neg.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c)) (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 c c (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) c))))","(/.f64 (+.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 c (-.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)))) (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 (/.f64 c b) a) c) (pow.f64 b #s(literal -1 binary64)) c)","(fma.f64 (*.f64 (*.f64 c a) c) (pow.f64 b #s(literal -2 binary64)) c)","(fma.f64 (*.f64 (/.f64 c b) a) (/.f64 c b) c)","(fma.f64 (/.f64 c b) (*.f64 (/.f64 c b) a) c)","(fma.f64 (*.f64 c a) (pow.f64 (*.f64 b (/.f64 b c)) #s(literal -1 binary64)) c)","(fma.f64 c (/.f64 (*.f64 (/.f64 c b) a) b) c)","(fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c)","(fma.f64 c (pow.f64 (*.f64 b (/.f64 (/.f64 b c) a)) #s(literal -1 binary64)) c)","(fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) c)","(-.f64 (/.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))) (/.f64 (*.f64 c c) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))","(+.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) c)","(+.f64 c (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) c)","(*.f64 #s(literal 1 binary64) (/.f64 c b))","(*.f64 (neg.f64 c) (/.f64 #s(literal -1 binary64) b))","(*.f64 c (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b c) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 c)) b)","(/.f64 (*.f64 c #s(literal 1 binary64)) b)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b c)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b c))","(/.f64 (neg.f64 c) (neg.f64 b))","(/.f64 c b)","(neg.f64 (/.f64 (neg.f64 c) b))","(neg.f64 (/.f64 c (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64))) (-.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64)))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64))) (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) a) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) a (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))","(fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) a) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))","(fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))","(fma.f64 a (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 a (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/4 binary64) a) (pow.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal -4 binary64) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) (/.f64 #s(literal 1/4 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64)) a)","(/.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) a) #s(literal 2 binary64))","(/.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a)) #s(literal 2 binary64))","(/.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 4 binary64)) a)","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (/.f64 #s(literal 1/4 binary64) a)) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1/4 binary64) a)) (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 4 binary64) a))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))))) (neg.f64 (*.f64 #s(literal -4 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 4 binary64) a)))","(/.f64 (*.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 4 binary64) a)))","(/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 3 binary64)) #s(literal 8 binary64))) (*.f64 (*.f64 #s(literal 4 binary64) a) (-.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) (*.f64 #s(literal -4 binary64) a))","(/.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) (*.f64 #s(literal 4 binary64) a))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64)))) (*.f64 #s(literal 4 binary64) a)))","(neg.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))) (*.f64 #s(literal -4 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 4 binary64) a) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (*.f64 (/.f64 (neg.f64 b) a) a) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))","(*.f64 #s(literal 4 binary64) a)","(*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 a #s(literal 4 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(neg.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1 binary64))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(sqrt.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 c a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 c a))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b) a))","(*.f64 (*.f64 (neg.f64 a) c) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 c b) a)","(*.f64 (*.f64 c a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 c (*.f64 a (pow.f64 b #s(literal -1 binary64))))","(*.f64 c (/.f64 a b))","(*.f64 a (/.f64 c b))","(pow.f64 (/.f64 (/.f64 (/.f64 b c) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 b c) a) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (neg.f64 a) c) #s(literal -1 binary64)) b)","(/.f64 (neg.f64 (*.f64 (neg.f64 a) c)) b)","(/.f64 (*.f64 (*.f64 c a) #s(literal 1 binary64)) b)","(/.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 b c))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b c) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 b c) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b c) a))","(/.f64 (*.f64 (neg.f64 a) c) (neg.f64 b))","(/.f64 (*.f64 c a) b)","(/.f64 a (/.f64 b c))","(neg.f64 (/.f64 (*.f64 (neg.f64 a) c) b))","(neg.f64 (/.f64 (*.f64 c a) (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 b c) a)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":290.2470703125,"type":"rewrite"},{"compiler":[[41884,4297]],"memory":[[-6097920,111225344]],"time":268.425048828125,"type":"eval"},{"alts":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","done",30.313163865586606,"binary64"],["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* (* a c) -4) (* b b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","fresh",39.86529228260164,"binary64"],["(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","next",45.87554862949924,"binary64"],["(/.f64 (fma.f64 (/.f64 b a) a (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","fresh",30.816339980992527,"binary64"],["(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) a (*.f64 a (*.f64 b #s(literal -1/2 binary64)))) (*.f64 a a))","fresh",42.03536432790225,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","next",45.43312424532945,"binary64"],["(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","fresh",62.698750954795855,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.07422163211675,"binary64"],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","done",30.21638203730341,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",34.51752534060088,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","next",30.475585082375744,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","done",33.07742701310272,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",39.863875731246665,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","next",55.42915709593634,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",45.20342157060516,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.923312162201036,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","fresh",40.97571465237961,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","fresh",46.046662763639425,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","fresh",46.01913260881873,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","fresh",45.89898612949924,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)) (neg.f64 b)))","fresh",48.871065999705614,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","fresh",46.023225263639425,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","fresh",42.33144678560655,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (/.f64 #s(literal -1 binary64) b)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))","fresh",49.75597327093673,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","done",45.87554862949924,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) (/ (* a c) b)) c) (*.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a)) a)) (neg.f64 b)))","fresh",44.38694578608495,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","fresh",45.922423629502696,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.99993916834247,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","fresh",46.02045856232698,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",40.48990469781258,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","fresh",40.80132035935904,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","next",40.568029697812634,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","fresh",52.675771628618136,"binary64"],["#s(approx (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","fresh",46.136050394668096,"binary64"]],"compiler":[[18,14],[25,19],[23,17],[22,16],[22,15],[27,16],[57,23],[33,23],[16,13],[25,14],[20,16],[28,20],[23,18],[35,25],[25,19],[15,12],[15,12],[27,20],[25,19],[21,17],[44,30],[27,19],[31,21],[45,29],[22,17],[45,27],[24,19],[25,18],[28,21],[22,17],[24,19],[23,18],[26,21],[32,23],[25,19],[23,17],[22,16],[22,15],[27,16],[57,23],[33,23],[25,14],[20,16],[23,18],[35,25],[25,19],[15,12],[15,12],[27,20],[25,19],[21,17],[44,30],[27,19],[31,21],[45,29],[45,27],[24,19],[25,18],[28,21],[24,19],[23,18],[26,21],[32,23]],"count":[[1174,34]],"kept":[{"done":[3,3],"fresh":[19,17],"new":[1147,12],"picked":[5,2]}],"memory":[[-8655408,59369328]],"min-error":[[5.495046547535909,"binary64"]],"time":50.509033203125,"type":"prune"},{"egraph":[[0,8102,403,0.037614347],[9,7880,410,0.013517786],[8,7196,410,0.027881977],[7,6372,410,0.028869877],[6,5294,410,0.032211743],[5,2466,410,0.030328411],[4,1160,410,0.01143645],[3,642,411,0.004520725],[2,310,413,0.002250124],[1,168,415,0.001243454],[0,89,417,0.00076441],[0,58,423,0.00045919]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(neg.f64 b)","b","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","(/.f64 #s(literal -1 binary64) b)","#s(literal -1 binary64)","b","c","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(literal -1/2 binary64)","#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","(/.f64 b a)","b","a","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/.f64 a b)","a","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","b","(fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))","(*.f64 c a)","c","a","#s(literal 4 binary64)","(*.f64 b b)","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)"]],"locations":[["(*.f64 c a)","cost-diff",0],["(fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))","cost-diff",0],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","cost-diff",0],["(fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","cost-diff",1],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(/.f64 b (*.f64 #s(literal -2 binary64) a))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","cost-diff",0],["(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","cost-diff",1],["(/.f64 #s(literal -1 binary64) b)","cost-diff",0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) b) c)","cost-diff",1],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","cost-diff",1],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[4104592,18946128]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))) a)","(-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","(neg.f64 b)","b","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","a","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","(/.f64 c (neg.f64 b))","(/.f64 #s(literal -1 binary64) b)","#s(literal -1 binary64)","b","c","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(*.f64 (+.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b a)) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","(/.f64 b a)","b","a","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 b a) #s(literal -1/2 binary64))","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 c b) #s(literal -2 binary64)) a))) b))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 c b) #s(literal -2 binary64)) a))))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 c b) #s(literal -2 binary64)) a)))","#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 c b) #s(literal -2 binary64)) a))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (*.f64 (/.f64 c b) #s(literal -2 binary64)) a)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/.f64 a b)","a","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (/.f64 (/.f64 (fma.f64 #s(literal 2 binary64) (*.f64 b b) (*.f64 (*.f64 a c) #s(literal 4 binary64))) a) #s(literal 2 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(fma.f64 #s(literal 2 binary64) (*.f64 b b) (*.f64 (*.f64 a c) #s(literal 4 binary64)))","b","(fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))","(*.f64 c a)","(*.f64 a c)","c","a","#s(literal 4 binary64)","(*.f64 b b)","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":254.697998046875,"type":"simplify"},{"compiler":[[366,53]],"locations":[["(fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))","accuracy",1.1132771216604118],["(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","accuracy",10.413486334482704],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","accuracy",16.641574965746603],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",20.358910206262816],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","accuracy",4.490697044656084],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","accuracy",15.928659324446457],["#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","accuracy",38.318333347333954],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","accuracy",46.40818275050315],["(/.f64 b a)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) a)","accuracy",0.0],["(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","accuracy",18.588107259818468],["#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","accuracy",46.31778948791368],["(/.f64 #s(literal -1 binary64) b)","accuracy",0.0],["(*.f64 (/.f64 #s(literal -1 binary64) b) c)","accuracy",0.2109375],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","accuracy",40.48990469781258],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.8085937500000001],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4797070244161143],["(-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","accuracy",15.928659324446457],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","accuracy",20.30924009730325]],"memory":[[-52912,65812256]],"mixsample":[[0.1201171875,"ival-sub",1200],[22.990966796875,"ival-div",0],[12.1767578125,"adjust",800],[0.15869140625,"ival-mult",1200],[0.01904296875,"ival-add",4800],[0.018798828125,"ival-sqrt",3200],[0.0634765625,"ival-sub",1600],[1.445556640625,"ival-div",400],[0.12060546875,"ival-assert",0],[0.4345703125,"ival-div",1600],[0.02685546875,"ival-sqrt",4800],[0.86865234375,"ival-sqrt",1200],[8.087646484375,"ival-sub",0],[8.703125,"ival-sqrt",0],[0.152587890625,"ival-sub",400],[0.038818359375,"ival-sqrt",2800],[8.30126953125,"ival-add",0],[0.25048828125,"ival-mult",800],[0.116455078125,"ival-sub",800],[0.0859375,"ival-mult",1600],[0.475830078125,"ival-add",400],[0.900146484375,"adjust",2800],[0.51953125,"ival-div",2000],[0.025146484375,"ival-div",4000],[0.0341796875,"ival-mult",2400],[0.225341796875,"ival-add",2400],[0.00390625,"ival-sub",4000],[0.32373046875,"ival-div",2400],[0.90234375,"ival-sqrt",400],[0.535888671875,"ival-add",1200],[0.580322265625,"ival-sqrt",2000],[0.841552734375,"ival-sqrt",800],[0.145263671875,"ival-mult",2000],[0.05322265625,"ival-sub",2000],[0.028076171875,"ival-mult",2800],[0.08642578125,"ival-sqrt",4000],[0.073974609375,"ival-sqrt",4400],[0.029541015625,"ival-add",4000],[0.0087890625,"ival-add",3200],[0.028076171875,"ival-div",3200],[0.056884765625,"ival-div",2800],[5.95654296875,"adjust",2000],[0.0498046875,"ival-sub",2400],[0.7587890625,"ival-div",1200],[0.2451171875,"ival-mult",400],[27.123046875,"ival-mult",0],[0.442138671875,"ival-sqrt",1600],[0.22802734375,"ival-add",1600],[0.01904296875,"ival-add",2800],[0.2421875,"ival-add",2000],[0.78759765625,"ival-div",800],[0.47314453125,"ival-sqrt",2400],[0.260498046875,"ival-true",0],[0.01416015625,"ival-mult",3200],[0.4814453125,"ival-add",800],[0.863525390625,"exact",0],[0.031982421875,"ival-add",4400],[1.45458984375,"ival-neg",0]],"outcomes":[[44.462158203125,1,"valid",71],[62.52880859375,2,"valid",69],[12.269775390625,3,"valid",12],[38.865966796875,0,"valid",104]],"time":230.35986328125,"type":"localize"},{"count":[[25,234]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(neg.f64 b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(/.f64 #s(literal -1 binary64) b)","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","(/.f64 b a)","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","(fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))","(*.f64 c a)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 #s(literal -2 binary64) a)","#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))"]],"memory":[[-4451456,22959856]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","(* -1/2 (/ b a))","(* 2 (pow b 2))","(+ (* 2 (pow b 2)) (* 4 (* a c)))","(* -1/2 (/ (pow b 3) (* (pow a 2) c)))","(/ (+ (* -1/2 (* a (- (* 2 b) b))) (* -1/2 (/ (pow b 3) c))) (pow a 2))","(/ (+ (* -1/2 (/ (pow b 3) c)) (* a (+ (* -1/2 (- (* 2 b) b)) (* 1/2 (* a (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2)))))))) (pow a 2))","(/ (+ (* -1/2 (/ (pow b 3) c)) (* a (+ (* -1/2 (- (* 2 b) b)) (* a (+ (* 1/2 (* a (+ (* -1 (/ (* c (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2)))) (pow b 2))) (+ (* 1/4 (/ (* (pow b 3) (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (* 2 (/ (* (pow c 2) (- (* 2 b) b)) (pow b 4))))))) (* 1/2 (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2))))))))) (pow a 2))","(pow b 2)","(+ (* 4 (* a c)) (pow b 2))","(* a c)","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(+ (* -4 (* a c)) (pow b 2))","(* -2 a)","(* -2 (/ (* a c) b))","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -4))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* 4 (* a c))","(* a (+ (* 2 (/ (pow b 2) a)) (* 4 c)))","(* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4))))) a)","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4))))) (pow a 2))) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))))) a)","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4))))) (pow a 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (* a (* (pow b 2) (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))))) (* c (pow (sqrt -4) 2)))) (* (sqrt (/ a c)) (/ (* b (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4)))))) (sqrt -4)))) (pow a 3))) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4))))))) a)","(* a (+ (* 4 c) (/ (pow b 2) a)))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(* -1 (* a (+ (* -4 c) (* -2 (/ (pow b 2) a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (/ (+ (* -1/2 (/ (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* 1/2 (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b))) (* 1/2 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))) (* 1/2 (/ (+ (* -1/8 (/ (* a (* (pow b 2) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a))) a)) (* 1/2 (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (* a (+ (* -4 c) (* -1 (/ (pow b 2) a)))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 (/ c b))","(/ -1 b)","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* -1/2 (* b (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* b (+ (* -1/2 (* b (- (* 2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (sqrt -4))))))) (* -1/2 (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* (pow b 2) (+ 2 (* 4 (/ (* a c) (pow b 2)))))","(* -1 (* (pow b 3) (+ (* 1/2 (/ 1 (* a (pow b 2)))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(* (pow b 3) (- (* 1/2 (/ (+ c (* 2 c)) (pow b 4))) (+ (/ 1/2 (* a (pow b 2))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(* (pow b 3) (- (+ (* 1/2 (/ (+ c (* 2 c)) (pow b 4))) (* 1/2 (/ (+ (* -1 (* a (* c (+ c (* 2 c))))) (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 3) (pow c 2)))) (* 2 (* a (pow c 2))))) (pow b 6)))) (+ (/ 1/2 (* a (pow b 2))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(* (pow b 2) (+ 1 (* 4 (/ (* a c) (pow b 2)))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a)))))","(* -1 (* b (+ (* -1/2 (/ (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))) (pow b 4))) (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a))))))","(* -1 (* b (+ (* -1/2 (/ (+ (* -2 (* (pow a 2) (pow c 3))) (+ (* -1 (* (pow a 2) (* (pow c 2) (- (* 2 c) (* -1 c))))) (* a (* c (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))) (pow b 4))) (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a)))))))","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* 2 b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ (* -2 (/ c b)) (/ b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(/ (+ (* -1/2 (* c (- (* 2 (/ b a)) (/ b a)))) (* -1/2 (/ (pow b 3) (pow a 2)))) c)","(/ (+ (* -1/2 (/ (pow b 3) (pow a 2))) (* c (+ (* -1/2 (- (* 2 (/ b a)) (/ b a))) (* 1/2 (* c (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2)))))))) c)","(/ (+ (* -1/2 (/ (pow b 3) (pow a 2))) (* c (+ (* -1/2 (- (* 2 (/ b a)) (/ b a))) (* c (+ (* 1/2 (* c (+ (* -1 (/ (* a (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2)))) (pow b 2))) (+ (* 1/4 (/ (* (pow b 3) (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 3))) (* 2 (/ (* (pow a 2) (- (* 2 (/ b a)) (/ b a))) (pow b 4))))))) (* 1/2 (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2))))))))) c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* 2 (/ (pow b 2) c)) (* 4 a)))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4))))) (pow c 2))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4))))) (pow c 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (* (pow b 2) (* c (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))))) (* a (pow (sqrt -4) 2)))) (* (sqrt (/ c a)) (/ (* b (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4)))))) (sqrt -4)))) (pow c 3))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))))))","(* c (+ (* 4 a) (/ (pow b 2) c)))","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(* -1 (* c (+ (* -4 a) (* -2 (/ (pow b 2) c)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a))) (* -1/2 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (* -1/8 (/ (* (pow b 2) (* c (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))) a)) (* 1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) c)) (* 1/2 (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1))))))) c)) (* -1/2 (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))) c)))","(* -1 (* c (+ (* -4 a) (* -1 (/ (pow b 2) c)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))"]],"series":[[10.556884765625,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","c","-inf"],[10.927978515625,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","c","inf"],[6.674072265625,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","c","0"],[10.455810546875,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","b","-inf"],[8.9638671875,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","b","inf"],[8.241943359375,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","b","0"],[9.48193359375,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","a","-inf"],[10.677001953125,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","a","inf"],[5.90478515625,"((/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (* (/ -1 b) c) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ -1 b) (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/ b a) (/ b (* -2 a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* b b) (+ (* (* c a) 4) (* b b))) (/ (+ (* b b) (+ (* (* c a) 4) (* b b))) (* (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (* -2 a))) (+ (* (* c a) 4) (* b b)) (* c a) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (+ (* -4 (* c a)) (* b b)) (* -2 a) (+ (* (* -2 c) (/ a b)) b) (* (* (/ a b) -2) c) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))))","a","0"]],"time":99.089111328125,"type":"series"},{"count":[[234,233]],"egraph":[[0,8237,7637,0.131506698],[1,4247,7977,0.034703097],[0,1290,8179,0.016692337]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","(* -1/2 (/ b a))","(* 2 (pow b 2))","(+ (* 2 (pow b 2)) (* 4 (* a c)))","(* -1/2 (/ (pow b 3) (* (pow a 2) c)))","(/ (+ (* -1/2 (* a (- (* 2 b) b))) (* -1/2 (/ (pow b 3) c))) (pow a 2))","(/ (+ (* -1/2 (/ (pow b 3) c)) (* a (+ (* -1/2 (- (* 2 b) b)) (* 1/2 (* a (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2)))))))) (pow a 2))","(/ (+ (* -1/2 (/ (pow b 3) c)) (* a (+ (* -1/2 (- (* 2 b) b)) (* a (+ (* 1/2 (* a (+ (* -1 (/ (* c (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2)))) (pow b 2))) (+ (* 1/4 (/ (* (pow b 3) (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (* 2 (/ (* (pow c 2) (- (* 2 b) b)) (pow b 4))))))) (* 1/2 (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2))))))))) (pow a 2))","(pow b 2)","(+ (* 4 (* a c)) (pow b 2))","(* a c)","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(+ (* -4 (* a c)) (pow b 2))","(* -2 a)","(* -2 (/ (* a c) b))","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -4))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* 4 (* a c))","(* a (+ (* 2 (/ (pow b 2) a)) (* 4 c)))","(* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4))))) a)","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4))))) (pow a 2))) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))))) a)","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4))))) (pow a 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (* a (* (pow b 2) (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))))) (* c (pow (sqrt -4) 2)))) (* (sqrt (/ a c)) (/ (* b (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4)))))) (sqrt -4)))) (pow a 3))) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4))))))) a)","(* a (+ (* 4 c) (/ (pow b 2) a)))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(* -1 (* a (+ (* -4 c) (* -2 (/ (pow b 2) a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (/ (+ (* -1/2 (/ (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* 1/2 (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b))) (* 1/2 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))) (* 1/2 (/ (+ (* -1/8 (/ (* a (* (pow b 2) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a))) a)) (* 1/2 (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (* a (+ (* -4 c) (* -1 (/ (pow b 2) a)))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 (/ c b))","(/ -1 b)","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* -1/2 (* b (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* b (+ (* -1/2 (* b (- (* 2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (sqrt -4))))))) (* -1/2 (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* (pow b 2) (+ 2 (* 4 (/ (* a c) (pow b 2)))))","(* -1 (* (pow b 3) (+ (* 1/2 (/ 1 (* a (pow b 2)))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(* (pow b 3) (- (* 1/2 (/ (+ c (* 2 c)) (pow b 4))) (+ (/ 1/2 (* a (pow b 2))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(* (pow b 3) (- (+ (* 1/2 (/ (+ c (* 2 c)) (pow b 4))) (* 1/2 (/ (+ (* -1 (* a (* c (+ c (* 2 c))))) (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 3) (pow c 2)))) (* 2 (* a (pow c 2))))) (pow b 6)))) (+ (/ 1/2 (* a (pow b 2))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(* (pow b 2) (+ 1 (* 4 (/ (* a c) (pow b 2)))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a)))))","(* -1 (* b (+ (* -1/2 (/ (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))) (pow b 4))) (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a))))))","(* -1 (* b (+ (* -1/2 (/ (+ (* -2 (* (pow a 2) (pow c 3))) (+ (* -1 (* (pow a 2) (* (pow c 2) (- (* 2 c) (* -1 c))))) (* a (* c (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))) (pow b 4))) (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a)))))))","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* 2 b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ (* -2 (/ c b)) (/ b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(/ (+ (* -1/2 (* c (- (* 2 (/ b a)) (/ b a)))) (* -1/2 (/ (pow b 3) (pow a 2)))) c)","(/ (+ (* -1/2 (/ (pow b 3) (pow a 2))) (* c (+ (* -1/2 (- (* 2 (/ b a)) (/ b a))) (* 1/2 (* c (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2)))))))) c)","(/ (+ (* -1/2 (/ (pow b 3) (pow a 2))) (* c (+ (* -1/2 (- (* 2 (/ b a)) (/ b a))) (* c (+ (* 1/2 (* c (+ (* -1 (/ (* a (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2)))) (pow b 2))) (+ (* 1/4 (/ (* (pow b 3) (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 3))) (* 2 (/ (* (pow a 2) (- (* 2 (/ b a)) (/ b a))) (pow b 4))))))) (* 1/2 (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2))))))))) c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* 2 (/ (pow b 2) c)) (* 4 a)))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4))))) (pow c 2))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4))))) (pow c 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (* (pow b 2) (* c (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))))) (* a (pow (sqrt -4) 2)))) (* (sqrt (/ c a)) (/ (* b (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4)))))) (sqrt -4)))) (pow c 3))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))))))","(* c (+ (* 4 a) (/ (pow b 2) c)))","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(* -1 (* c (+ (* -4 a) (* -2 (/ (pow b 2) c)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a))) (* -1/2 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (* -1/8 (/ (* (pow b 2) (* c (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))) a)) (* 1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) c)) (* 1/2 (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1))))))) c)) (* -1/2 (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))) c)))","(* -1 (* c (+ (* -4 a) (* -1 (/ (pow b 2) c)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))"]],"memory":[[8798960,62264240]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (/.f64 (*.f64 a c) b) #s(literal -2 binary64) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a b)","(/ b a)","(/.f64 b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/.f64 (fma.f64 (/.f64 (*.f64 a c) b) #s(literal -2 binary64) b) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a b) a)","(* -1/2 (/ b a))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(* 2 (pow b 2))","(*.f64 (*.f64 b b) #s(literal 2 binary64))","(+ (* 2 (pow b 2)) (* 4 (* a c)))","(fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 (*.f64 b b) #s(literal 2 binary64)))","(* -1/2 (/ (pow b 3) (* (pow a 2) c)))","(*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) c))","(/ (+ (* -1/2 (* a (- (* 2 b) b))) (* -1/2 (/ (pow b 3) c))) (pow a 2))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) a (/.f64 (pow.f64 b #s(literal 3 binary64)) c)) a))","(/ (+ (* -1/2 (/ (pow b 3) c)) (* a (+ (* -1/2 (- (* 2 b) b)) (* 1/2 (* a (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2)))))))) (pow a 2))","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (fma.f64 (/.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) b) (/.f64 c b) (*.f64 (/.f64 c b) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) #s(literal -1/2 binary64))) a (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) c) #s(literal -1/2 binary64))) (*.f64 a a))","(/ (+ (* -1/2 (/ (pow b 3) c)) (* a (+ (* -1/2 (- (* 2 b) b)) (* a (+ (* 1/2 (* a (+ (* -1 (/ (* c (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2)))) (pow b 2))) (+ (* 1/4 (/ (* (pow b 3) (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (* 2 (/ (* (pow c 2) (- (* 2 b) b)) (pow b 4))))))) (* 1/2 (+ (* 2 (/ c b)) (/ (* c (- (* 2 b) b)) (pow b 2))))))))) (pow a 2))","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 c c)) #s(literal 1/4 binary64) (*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64))) (*.f64 c (/.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) b) (/.f64 c b) (*.f64 (/.f64 c b) #s(literal 2 binary64))) (*.f64 b b)))) a (fma.f64 (/.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) b) (/.f64 c b) (*.f64 (/.f64 c b) #s(literal 2 binary64))))) a (*.f64 (fma.f64 #s(literal 2 binary64) b (neg.f64 b)) #s(literal -1/2 binary64))) a (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) c) #s(literal -1/2 binary64))) (*.f64 a a))","(pow b 2)","(*.f64 b b)","(+ (* 4 (* a c)) (pow b 2))","(fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))","(* a c)","(*.f64 a c)","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(fma.f64 (*.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64) (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 a b) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 a b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) c) b) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) b))) a (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(* -2 a)","(*.f64 #s(literal -2 binary64) a)","(* -2 (/ (* a c) b))","(*.f64 (/.f64 (*.f64 a c) b) #s(literal -2 binary64))","(* 2 (/ (* a c) b))","(*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 c b) #s(literal 2 binary64))) a)","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a)","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal 1/2 binary64) (*.f64 #s(literal 4 binary64) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))))) a (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (*.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(neg.f64 (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 (neg.f64 b) a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* (sqrt (/ c a)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))))","(* 4 (* a c))","(*.f64 (*.f64 #s(literal 4 binary64) a) c)","(* a (+ (* 2 (/ (pow b 2) a)) (* 4 c)))","(*.f64 (fma.f64 (/.f64 (*.f64 b b) a) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) c)) a)","(* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64))","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4))))) a)","(/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64))) a)","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4))))) (pow a 2))) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))))) a)","(/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) a) (*.f64 (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))) a)","(/ (+ (* -1/2 (/ (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))) a)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4))))) (pow a 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (* a (* (pow b 2) (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2)))))) (* c (pow (sqrt -4) 2)))) (* (sqrt (/ a c)) (/ (* b (+ (* -2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ a c)) (/ (* b (- (* -2 (* (sqrt (/ a c)) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* a b) (pow (sqrt -4) 2))))) (sqrt -4)))))) (sqrt -4)))) (pow a 3))) (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4))))))) a)","(/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) a) (fma.f64 (/.f64 (fma.f64 (*.f64 b (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 b b) a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal -4 binary64) (/.f64 (*.f64 a b) #s(literal -4 binary64))))) c))) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64))))) a)","(* a (+ (* 4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 7 binary64))))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) a) (pow.f64 c #s(literal 3 binary64))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))))","(* -4 (* a c))","(*.f64 (*.f64 #s(literal -4 binary64) a) c)","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* a (+ (* -2 (/ c b)) (/ b a)))","(*.f64 (fma.f64 (/.f64 c b) #s(literal -2 binary64) (/.f64 b a)) a)","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (/.f64 b a)) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal 1/2 binary64) b)) a))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) b) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) a)) a))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))) #s(literal 2 binary64))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b a) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) a) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64)))))) a) b) a) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))) #s(literal -2 binary64))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/64 binary64))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (fma.f64 #s(literal -1/512 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/64 binary64)))))","(* -1 (* a (+ (* -4 c) (* -2 (/ (pow b 2) a)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (*.f64 b b) a) #s(literal -2 binary64) (*.f64 #s(literal -4 binary64) c)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(neg.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(* -1 (/ (+ (* -1/2 (/ (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a)) a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))))) a)","(* -1 (/ (+ (* -1 (/ (+ (* 1/2 (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b))) (* 1/2 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(/.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))) (/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a))))) a))) a))) a)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))) (* 1/2 (/ (+ (* -1/8 (/ (* a (* (pow b 2) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))))) (* 1/4 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a))) a)) (* 1/2 (- (* -1 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* a b)))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(/.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))) (/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a)) #s(literal 1/2 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a)))))) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 b b) a) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a))) c) #s(literal -1/8 binary64))) a) #s(literal 1/2 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) a))))) #s(literal -1/2 binary64))) a)) a))) a)","(* -1 (* a (+ (* -4 c) (* -1 (/ (pow b 2) a)))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal -4 binary64) c (neg.f64 (/.f64 (*.f64 b b) a))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) #s(literal 1/2 binary64))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/64 binary64))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) a) (pow.f64 c #s(literal 3 binary64))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (pow.f64 a #s(literal 3 binary64))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (neg.f64 (/.f64 (*.f64 b b) a))))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 c b) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 b) a) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))))) a)) a) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (neg.f64 (/.f64 #s(literal 1/2 binary64) a))) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) b (neg.f64 (/.f64 #s(literal 1/2 binary64) a))) b))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) #s(literal -1/2 binary64) #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/8 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))))) b #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(/ -1 b)","(/.f64 #s(literal -1 binary64) b)","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* -1/2 (* b (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 #s(literal -4 binary64) a))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* b (+ (* -1/2 (* b (- (* 2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* -1 (* (sqrt (/ 1 (* a c))) (/ (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (sqrt -4))))))) (* -1/2 (- (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* 4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) c) (*.f64 a a))) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 2 binary64))) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))) b (-.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 2 binary64))))) b (/.f64 #s(literal 2 binary64) (*.f64 #s(literal -4 binary64) a))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 a c))) (*.f64 (*.f64 b b) (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (*.f64 b b) (/.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 #s(literal -1/4 binary64) c) a)) #s(literal 1/32 binary64) (/.f64 #s(literal 1/256 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1/4 binary64)))) (sqrt.f64 (*.f64 a c)) (*.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (*.f64 a c))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) c (*.f64 b b)) b)","(- b (* (sqrt (* a c)) (sqrt -4)))","(-.f64 b (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) #s(literal -1/2 binary64) #s(literal 1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/8 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))))) b #s(literal 1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(*.f64 (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64) (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (neg.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64)))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 4 binary64) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 c b) (/.f64 a b) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 c b) (/.f64 a b) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))))) b b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 c b) (/.f64 a b) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64)))))) b b)","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)) b)","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 c b) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a))) b)","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 c b) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)))) b)","(* (pow b 2) (+ 2 (* 4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 4 binary64) #s(literal 2 binary64)) (*.f64 b b))","(* -1 (* (pow b 3) (+ (* 1/2 (/ 1 (* a (pow b 2)))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(*.f64 (neg.f64 (pow.f64 b #s(literal 3 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) c)) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b b) a))))","(* (pow b 3) (- (* 1/2 (/ (+ c (* 2 c)) (pow b 4))) (+ (/ 1/2 (* a (pow b 2))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 3 binary64) c)) (pow.f64 b #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) c)) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b b) a)))) (pow.f64 b #s(literal 3 binary64)))","(* (pow b 3) (- (+ (* 1/2 (/ (+ c (* 2 c)) (pow b 4))) (* 1/2 (/ (+ (* -1 (* a (* c (+ c (* 2 c))))) (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 3) (pow c 2)))) (* 2 (* a (pow c 2))))) (pow b 6)))) (+ (/ 1/2 (* a (pow b 2))) (* 1/2 (/ 1 (* (pow a 2) c))))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (/.f64 (*.f64 #s(literal 3 binary64) c) (pow.f64 b #s(literal 4 binary64))) (/.f64 (fma.f64 (neg.f64 a) (*.f64 (*.f64 #s(literal 3 binary64) c) c) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (*.f64 c c)) (*.f64 (*.f64 (*.f64 c c) a) #s(literal 2 binary64)))) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) c)) (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b b) a))))) (pow.f64 b #s(literal 3 binary64)))","(* (pow b 2) (+ 1 (* 4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 4 binary64) #s(literal 1 binary64)) (*.f64 b b))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64))) #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/.f64 (+.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64))) #s(literal -2 binary64) (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64)))) #s(literal 1 binary64)) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) (*.f64 b b))","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (*.f64 a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (fma.f64 a c (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a c (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (neg.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))) c)) b)","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (neg.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b)))) c)) b)","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (*.f64 a c)))) b)","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (fma.f64 a c (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)))))) b)","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (neg.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a c (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)))))) b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 c b) (/.f64 a b) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 c b) (/.f64 a b) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64)))))) b b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 c b) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 c b) (fma.f64 (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)))))","(* -1 (* b (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (*.f64 #s(literal 3 binary64) c) b) (/.f64 #s(literal 1/2 binary64) a)))","(* -1 (* b (+ (* -1/2 (/ (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))) (pow b 4))) (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) c) c) a (*.f64 (*.f64 c c) a))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (*.f64 #s(literal 3 binary64) c) b) (/.f64 #s(literal 1/2 binary64) a))))","(* -1 (* b (+ (* -1/2 (/ (+ (* -2 (* (pow a 2) (pow c 3))) (+ (* -1 (* (pow a 2) (* (pow c 2) (- (* 2 c) (* -1 c))))) (* a (* c (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -1 (* a (* c (- (* 2 c) (* -1 c))))) (* -1 (* a (pow c 2)))) (pow b 4))) (+ (* 1/2 (/ (- (* 2 c) (* -1 c)) (pow b 2))) (* 1/2 (/ 1 a)))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 c #s(literal 3 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) c) c) a (*.f64 (*.f64 c c) a))) c) a) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) c) (*.f64 c c)) (*.f64 a a)))) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) c) c) a (*.f64 (*.f64 c c) a))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (*.f64 #s(literal 3 binary64) c) b) (/.f64 #s(literal 1/2 binary64) a)))))","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(neg.f64 (/.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal 1 binary64)) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64))) #s(literal -1 binary64) #s(literal -1 binary64)) b)","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(/.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64))) #s(literal -2 binary64) (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64)))) #s(literal -1 binary64) #s(literal -1 binary64)) b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -1 binary64)))","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (neg.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64)))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 4 binary64) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 c b) (/.f64 a b) (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64)))))))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal 2 binary64) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (+.f64 (/.f64 a b) (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64)))))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(+ (* -2 (/ c b)) (/ b a))","(fma.f64 (/.f64 c b) #s(literal -2 binary64) (/.f64 b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(fma.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 2 binary64) b)) c (/.f64 b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(fma.f64 (fma.f64 (fma.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (*.f64 a a) c)) (pow.f64 b #s(literal 5 binary64)))) c (neg.f64 (/.f64 #s(literal 2 binary64) b))) c (/.f64 b a))","(/ (+ (* -1/2 (* c (- (* 2 (/ b a)) (/ b a)))) (* -1/2 (/ (pow b 3) (pow a 2)))) c)","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) c (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a)))) c)","(/ (+ (* -1/2 (/ (pow b 3) (pow a 2))) (* c (+ (* -1/2 (- (* 2 (/ b a)) (/ b a))) (* 1/2 (* c (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2)))))))) c)","(/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 (pow.f64 b #s(literal 3 binary64)) a) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) c) (fma.f64 (/.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) b) (/.f64 a b) (/.f64 #s(literal 2 binary64) b)) (*.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) #s(literal -1/2 binary64))) c)) c)","(/ (+ (* -1/2 (/ (pow b 3) (pow a 2))) (* c (+ (* -1/2 (- (* 2 (/ b a)) (/ b a))) (* c (+ (* 1/2 (* c (+ (* -1 (/ (* a (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2)))) (pow b 2))) (+ (* 1/4 (/ (* (pow b 3) (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 3))) (* 2 (/ (* (pow a 2) (- (* 2 (/ b a)) (/ b a))) (pow b 4))))))) (* 1/2 (+ (* 2 (/ 1 b)) (/ (* a (- (* 2 (/ b a)) (/ b a))) (pow b 2))))))))) c)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/4 binary64) (*.f64 (/.f64 (*.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) (*.f64 a a)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) b) (/.f64 a b) (/.f64 #s(literal 2 binary64) b)) a) (*.f64 b b))) c (fma.f64 (/.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) b) (/.f64 a b) (/.f64 #s(literal 2 binary64) b)))) c (*.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)) #s(literal -1/2 binary64))) c (*.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 (pow.f64 b #s(literal 3 binary64)) a))) c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 c b) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 c b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) a) b) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) (*.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) b))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64) (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 c (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal 1/2 binary64) (*.f64 #s(literal 4 binary64) (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))))) c (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/16 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64)))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 (neg.f64 b) c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* 2 (/ (pow b 2) c)) (* 4 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 b b) c) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) a)) c)","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))))","(fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a))))) c) #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4))))) (pow c 2))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))))","(fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a))))) c) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a))))) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -2 binary64))) c) (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64))))","(+ (* -1/2 (/ (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))) c)) (+ (* 1/2 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4))))) (pow c 2))) (+ (* 1/2 (/ (+ (* 1/2 (/ (* (pow b 2) (* c (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2))))))) (* a (pow (sqrt -4) 2)))) (* (sqrt (/ c a)) (/ (* b (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* -1 (* (sqrt (/ c a)) (/ (* b (- (* -2 (* (sqrt (/ c (pow a 3))) (/ (pow b 2) (sqrt -4)))) (* 4 (/ (* b c) (* a (pow (sqrt -4) 2)))))) (sqrt -4)))))) (sqrt -4)))) (pow c 3))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))))))","(fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a))))) c) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a))))) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -2 binary64))) c) (fma.f64 (/.f64 (fma.f64 (*.f64 b (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (*.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a))))) (sqrt.f64 #s(literal -4 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -2 binary64))) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 (*.f64 (*.f64 b b) c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 c a)))))) a))) (pow.f64 c #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))))","(* c (+ (* 4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 b b) c)) c)","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 7 binary64))))) (/.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 c (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (+ (* -2 (/ a b)) (/ b c)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal -2 binary64) (/.f64 b c)) c)","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/2 binary64) (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/8 binary64) (/.f64 b c)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) c)) c))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b c) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) c) #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64)))))) c) b) c) #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/4 binary64))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -4 a) (* -2 (/ (pow b 2) c)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (*.f64 b b) c) #s(literal -2 binary64) (*.f64 #s(literal -4 binary64) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* 1/2 (/ (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)) c)))","(fma.f64 (/.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a))) c) #s(literal 1/2 binary64) (neg.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1/2 (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a))) (* -1/2 (/ (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1))))) c))) c)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal 1/4 binary64))) c))) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (/ (+ (* -1/8 (/ (* (pow b 2) (* c (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))) a)) (* 1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) c)) (* 1/2 (+ (* -1/2 (* (sqrt (/ c a)) (* b (* (sqrt -1) (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1))))))) c)) (* -1/2 (- (* -1 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (/ (* b c) a)))) c)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a))) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal 1/4 binary64)))) (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 b b) c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a)))) a) #s(literal -1/8 binary64))) c) #s(literal -1/2 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (neg.f64 b) (/.f64 c a)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal 1/4 binary64))) #s(literal 1/2 binary64))) c)) c)))","(* -1 (* c (+ (* -4 a) (* -1 (/ (pow b 2) c)))))","(*.f64 (neg.f64 c) (fma.f64 #s(literal -4 binary64) a (neg.f64 (/.f64 (*.f64 b b) c))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 c (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (pow.f64 c #s(literal 3 binary64))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (neg.f64 c) (fma.f64 #s(literal 4 binary64) a (neg.f64 (/.f64 (*.f64 b b) c))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 a b) #s(literal 2 binary64) (/.f64 (neg.f64 b) c)))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 b c) #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) b) c) #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -1/4 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))))) c)) c) #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":313.741943359375,"type":"simplify"},{"count":[[25,922]],"egraph":[[0,8802,313,0.09386182],[2,2688,317,0.039456455],[1,371,317,0.00945164],[0,89,336,0.00246583],[0,58,338,0.000483861]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(neg.f64 b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(/.f64 #s(literal -1 binary64) b)","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","(/.f64 b a)","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","(fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))","(*.f64 c a)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 #s(literal -2 binary64) a)","#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))"]],"memory":[[-2598912,75769424]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(pow.f64 (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 a #s(literal -1 binary64))) (*.f64 a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b a) a) (*.f64 #s(literal -2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -2 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) #s(literal -4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 a b) #s(literal -1 binary64))) (*.f64 (/.f64 a b) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (neg.f64 a) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) a))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 b (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (neg.f64 (neg.f64 b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (/.f64 (neg.f64 b) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a)) #s(literal 2 binary64))","(/.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64)) a)","(/.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))))","(neg.f64 (/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal -1/2 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (/.f64 #s(literal -1 binary64) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 (/.f64 #s(literal -1 binary64) b) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) b) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (*.f64 b (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 b (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 b (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (*.f64 b (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 b (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) b) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 #s(literal -1 binary64) b)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) b)) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) b) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) b)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 b))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) b)) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) b) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (+.f64 (/.f64 #s(literal -1 binary64) b) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 #s(literal -1 binary64) b)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) b)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) b) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (/.f64 #s(literal -1 binary64) b) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 b) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 b (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 b (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 b (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))))","(neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (neg.f64 b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 #s(literal -1 binary64) b)","(*.f64 b #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64))","(pow.f64 (neg.f64 b) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) b))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) b))","(/.f64 (neg.f64 b) #s(literal 1 binary64))","(/.f64 b #s(literal -1 binary64))","(neg.f64 b)","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b))))","(*.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 (*.f64 a c) #s(literal -4 binary64))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (neg.f64 c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","(*.f64 #s(literal -1 binary64) (/.f64 c b))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 b #s(literal -1 binary64)) c))","(*.f64 c (/.f64 #s(literal -1 binary64) b))","(pow.f64 (/.f64 b (neg.f64 c)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) c) (neg.f64 b))","(/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 b))","(/.f64 (neg.f64 c) b)","(/.f64 c (neg.f64 b))","(/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 c)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) b))","(pow.f64 (neg.f64 b) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 b)))","(/.f64 #s(literal -1 binary64) b)","(/.f64 #s(literal 1 binary64) (neg.f64 b))","(neg.f64 (pow.f64 b #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (neg.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)))) (pow.f64 (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a))) (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (neg.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a)))) (*.f64 (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a))) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)))) (*.f64 (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a))) (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (neg.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64))))) (neg.f64 (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (neg.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a))))","(/.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a))) (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (neg.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)) (fma.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a)))))","(+.f64 (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) #s(literal -1/2 binary64)))","#s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (neg.f64 b))","(*.f64 (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b)","(*.f64 #s(literal -1 binary64) (/.f64 b (neg.f64 a)))","(*.f64 #s(literal 1 binary64) (/.f64 b a))","(*.f64 (neg.f64 b) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 b (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal -1 binary64))","(pow.f64 (/.f64 b a) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 b)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 b #s(literal 1 binary64)) a)","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b))","(/.f64 (neg.f64 b) (neg.f64 a))","(/.f64 b a)","(neg.f64 (/.f64 (neg.f64 b) a))","(neg.f64 (/.f64 b (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 b (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)))","(*.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) b)","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal -1/2 binary64)))","(*.f64 (/.f64 b a) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(*.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 b (/.f64 #s(literal -1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 b #s(literal -1/2 binary64)) a)","(/.f64 (/.f64 b a) #s(literal -2 binary64))","(/.f64 #s(literal -1/2 binary64) (/.f64 a b))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a b) #s(literal -2 binary64)))","(/.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a))","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(neg.f64 (/.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)))","(neg.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) a) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) #s(literal -4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 b a) a) (*.f64 #s(literal -2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -2 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -2 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a b) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 a) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) a))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (/.f64 (neg.f64 b) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) a)) #s(literal 2 binary64))","(/.f64 (-.f64 (neg.f64 (neg.f64 b)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -2 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64))) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 b b (-.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64)))))","(neg.f64 (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(fma.f64 #s(literal -1 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (*.f64 b b))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))))","(-.f64 #s(literal 0 binary64) (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))))","(+.f64 (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)))) (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(fma.f64 (*.f64 #s(literal 4 binary64) c) a (fma.f64 b b (*.f64 b b)))","(fma.f64 (*.f64 #s(literal 4 binary64) a) c (fma.f64 b b (*.f64 b b)))","(fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) (*.f64 b b))","(fma.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 a c) (fma.f64 b b (*.f64 b b)))","(fma.f64 #s(literal -1 binary64) (*.f64 b (neg.f64 b)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(fma.f64 (*.f64 a c) #s(literal 4 binary64) (fma.f64 b b (*.f64 b b)))","(fma.f64 a (*.f64 c #s(literal 4 binary64)) (fma.f64 b b (*.f64 b b)))","(fma.f64 c (*.f64 #s(literal 4 binary64) a) (fma.f64 b b (*.f64 b b)))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(fma.f64 (neg.f64 b) (neg.f64 b) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))) (/.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))))","(+.f64 (fma.f64 b b (*.f64 b b)) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(+.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 b b (*.f64 b b)))","(+.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b))","(+.f64 (*.f64 b b) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -2 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 a (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (pow.f64 (pow.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(*.f64 (neg.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (pow.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (/.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -2 binary64)) a)","(/.f64 (/.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) a) #s(literal -2 binary64))","(/.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -2 binary64))) a)","(/.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b b))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(neg.f64 (/.f64 (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) b) b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) c (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b (neg.f64 b)) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 a (*.f64 c #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 c (*.f64 #s(literal 4 binary64) a) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 b b (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b))))","(+.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 a c)","(*.f64 c a)","(*.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (pow.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(fabs.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 4 binary64) (*.f64 a c)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(/.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 a c)) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (neg.f64 c) (*.f64 #s(literal 4 binary64) a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 a c)) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 4 binary64) (*.f64 a c)) (*.f64 b b))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 c (neg.f64 (*.f64 #s(literal 4 binary64) a)) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 b b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(sqrt.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 b b) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fabs.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))) #s(literal -2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(+.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(*.f64 (neg.f64 a) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) a)","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) a))","(*.f64 #s(literal 2 binary64) (neg.f64 a))","(*.f64 a #s(literal -2 binary64))","(neg.f64 (*.f64 #s(literal 2 binary64) a))","(-.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64)))","(*.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c))","(*.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b))","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 a b) c))","(*.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) c)))","(*.f64 c (*.f64 (/.f64 a b) #s(literal -2 binary64)))","(pow.f64 (/.f64 b (*.f64 (*.f64 #s(literal -2 binary64) c) a)) #s(literal -1 binary64))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b)","(/.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c)) (neg.f64 b))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) c)) (/.f64 b a))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) (neg.f64 a)) (neg.f64 b))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) #s(literal 1 binary64)) (/.f64 b a))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) a)) (neg.f64 b))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) a) b)","(/.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 b a))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 (*.f64 #s(literal -2 binary64) c) a)))","(*.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b))))","(*.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 (*.f64 a c) #s(literal -4 binary64))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) c) a (*.f64 (neg.f64 b) b)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (*.f64 a c)) (fma.f64 #s(literal 4 binary64) (*.f64 a c) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(*.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (neg.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (*.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b) (fma.f64 b b (neg.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)","(fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) b)","(-.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b)))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) b (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))))","(-.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))) b)","(+.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":383.972900390625,"type":"rewrite"},{"compiler":[[50436,5323]],"memory":[[9140832,122497024]],"time":179.85009765625,"type":"eval"},{"alts":[["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","done",30.313163865586606,"binary64"],["(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* (* a c) -4) (* b b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","fresh",39.86529228260164,"binary64"],["(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","done",45.87554862949924,"binary64"],["(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","fresh",52.95563206656982,"binary64"],["(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","fresh",62.698750954795855,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.07422163211675,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) b)) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","fresh",56.04286235544385,"binary64"],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","done",30.21638203730341,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",34.51752534060088,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","done",33.07742701310272,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",39.863875731246665,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","done",55.42915709593634,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",45.20342157060516,"binary64"],["(/.f64 #s(approx (+ (* b b) (+ (* (* c a) 4) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","fresh",31.873838192178635,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.923312162201036,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","fresh",40.97571465237961,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","fresh",46.046662763639425,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","fresh",46.01913260881873,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","fresh",45.89898612949924,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","fresh",46.023225263639425,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","fresh",42.33144678560655,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (/.f64 #s(literal -1 binary64) b)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))","fresh",49.75597327093673,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","done",45.87554862949924,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) (/ (* a c) b)) c) (*.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a)) a)) (neg.f64 b)))","fresh",44.38694578608495,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","fresh",45.922423629502696,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",45.99993916834247,"binary64"],["#s(approx (/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","fresh",46.136050394668096,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","fresh",46.02045856232698,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",40.48990469781258,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","fresh",40.80132035935904,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","done",40.568029697812634,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (exp.f64 (*.f64 (log.f64 (neg.f64 b)) #s(literal -1 binary64))) c))","fresh",42.647177697557915,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","fresh",52.675771628618136,"binary64"]],"compiler":[[1473,287],[18,14],[25,19],[23,17],[27,21],[57,23],[33,23],[42,29],[16,13],[25,14],[28,20],[23,18],[35,25],[25,19],[35,23],[15,12],[15,12],[27,20],[25,19],[21,17],[27,19],[31,21],[45,29],[22,17],[45,27],[24,19],[25,18],[33,24],[28,21],[22,17],[24,19],[23,18],[26,21],[26,21]],"count":[[1256,33]],"kept":[{"done":[5,5],"fresh":[24,20],"new":[1222,5],"picked":[5,3]}],"memory":[[-615712,64010112]],"min-error":[[5.468066506135734,"binary64"]],"time":54.18505859375,"type":"prune"},{"accuracy":[8.038724130872074],"baseline":[30.21638203730341],"branch":[["a",23.05852389652534,6,"binary64"],["b",8.038724130872074,4,"binary64"],["c",27.79717060321658,3,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",12.102257333461642,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[54,4]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* (* a c) -4) (* b b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) (/ (* a c) b)) c) (*.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a)) a)) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 #s(approx (+ (* b b) (+ (* (* c a) 4) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) b)) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) a (*.f64 a (*.f64 b #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) a (*.f64 #s(literal -2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (neg.f64 b) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (exp.f64 (*.f64 (log.f64 (neg.f64 b)) #s(literal -1 binary64))) c))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c)) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64))) #s(literal 2 binary64)) (*.f64 c c)) (/.f64 #s(literal -1 binary64) b)) (fma.f64 a (pow.f64 (/.f64 b c) #s(literal -2 binary64)) (neg.f64 c))))"]],"memory":[[-3539392,28283472]],"oracle":[63.95471482790891],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 #s(approx (+ (* b b) (+ (* (* c a) 4) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":58.93701171875,"times":[[12.40087890625,"a"],[13.62109375,"b"],[14.662109375,"c"],[14.117919921875,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[10.372280438611924],"baseline":[30.21638203730341],"branch":[["b",10.372280438611924,3,"binary64"]],"compiler":[[1,3]],"count":[[37,3]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* (* a c) -4) (* b b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) (/ (* a c) b)) c) (*.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a)) a)) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))"]],"memory":[[6894352,6894352]],"oracle":[63.43252089740875],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":10.85302734375,"times":[[8.469970703125,"b"]],"type":"regimes"},{"accuracy":[10.595444428517789],"baseline":[30.21638203730341],"branch":[["b",10.595444428517789,3,"binary64"]],"compiler":[[1,3]],"count":[[35,3]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* (* a c) -4) (* b b)) (*.f64 (*.f64 #s(literal -4 binary64) a) c))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(approx (+ (* (/ c b) (/ (* a c) b)) c) (*.f64 (fma.f64 (/.f64 c b) (/.f64 c b) (/.f64 c a)) a)) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-1565584,6685024]],"oracle":[63.40039116993994],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":10.761962890625,"times":[[8.244873046875,"b"]],"type":"regimes"},{"accuracy":[13.812464403364752],"baseline":[39.863875731246665],"branch":[["b",13.812464403364752,3,"binary64"]],"compiler":[[1,3]],"count":[[29,3]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) #s(approx (+ (* (* -2 c) (/ a b)) b) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 a c) b) c) (neg.f64 b)))"]],"memory":[[-3385952,5762704]],"oracle":[63.37867846310918],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":9.718017578125,"times":[[7.7041015625,"b"]],"type":"regimes"},{"accuracy":[23.966324543494995],"baseline":[40.48990469781258],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",30.806494604517496,4,"binary64"],["b",23.966324543494995,2,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[23,2]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))))","(fma.f64 #s(literal -1/2 binary64) #s(approx (/ (sqrt (+ (* (* a c) -4) (* b b))) a) (/.f64 b a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","#s(approx (+ (* -1/2 (/ (sqrt (+ (* (* a c) -4) (* b b))) a)) (/ b (* -2 a))) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 c (/.f64 (*.f64 c a) (*.f64 b b)) c) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b))"]],"memory":[[156304,8175984]],"oracle":[62.89387293223385],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":14.177001953125,"times":[[6.277099609375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[6.045166015625,"b"]],"type":"regimes"},{"accuracy":[24.011947941682813],"baseline":[40.48990469781258],"branch":[["b",24.011947941682813,2,"binary64"]],"compiler":[[1,3]],"count":[[7,2]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 #s(literal -2 binary64) b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c)))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b)))"]],"memory":[[2698192,2698192]],"oracle":[62.375596082512445],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":3.471923828125,"times":[[2.594970703125,"b"]],"type":"regimes"},{"accuracy":[40.48990469781255],"baseline":[40.48990469781258],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",40.48990469781255,1,"binary64"],["c",40.48990469781257,1,"binary64"],["a",40.48990469781257,1,"binary64"],["b",40.4899046978126,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[1,1]],"inputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"link":["."],"memory":[[-2111536,6161648]],"name":["quadm (p42, negative)"],"oracle":[40.48990469781258],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"repr":["binary64"],"time":5.718994140625,"times":[[1.344970703125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.1240234375,"c"],[1.3720703125,"a"],[1.195068359375,"b"]],"type":"regimes"},{"bstep":[[3.7861328125,1.1461563497064523e+150,3.497772415507211e+150],[10.547119140625,-1.1705614887240715e-82,-6.991403214829883e-83],[22.488037109375,-5.3194546480568795e+63,-4.484266880283166e+61]],"compiler":[[22,18],[18,15],[22,18],[18,15],[18,15],[35,24],[18,15],[35,24],[18,15],[35,24],[18,15],[35,24],[35,24],[22,18],[35,24],[22,18],[35,24],[22,18],[35,24],[22,18],[35,24],[22,18],[35,24],[22,18],[35,24],[22,18],[19,17],[1,3]],"memory":[[-12910208,13114560]],"method":["binary-search","binary-search","binary-search"],"mixsample":[[2.638427734375,"ival-div",0],[2.333984375,"adjust",800],[0.249267578125,"ival-sub",1600],[0.73876953125,"ival-sqrt",800],[0.07958984375,"ival-assert",0],[0.046875,"ival-sqrt",4000],[2.888427734375,"ival-sub",0],[1.5849609375,"ival-sqrt",0],[0.101806640625,"ival-sub",400],[0.830322265625,"adjust",2000],[0.4033203125,"ival-mult",800],[0.4599609375,"ival-sub",800],[5.36767578125,"ival-mult",0],[0.131591796875,"ival-mult",400],[0.454833984375,"ival-sqrt",1600],[0.055908203125,"adjust",2800],[0.158203125,"ival-true",0],[0.01708984375,"ival-sub",4000],[0.303955078125,"exact",0],[0.16162109375,"ival-sqrt",400],[1.066650390625,"ival-neg",0]],"outcomes":[[7.499267578125,1,"valid",51],[10.078125,2,"valid",51],[1.018310546875,0,"invalid",12],[0.936767578125,3,"valid",4],[7.850830078125,0,"valid",102]],"stop":[["predicate-same",1],["narrow-enough",1],["narrow-enough",1]],"time":51.202880859375,"type":"bsearch"},{"bstep":[[0.3330078125,1.1461563497064523e+150,3.497772415507211e+150],[14.73779296875,-4.381287496138232e-35,-1.728518964785181e-35]],"compiler":[[22,18],[18,15],[22,18],[18,15],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[19,17],[1,3]],"memory":[[5551440,5551440]],"method":["binary-search","binary-search"],"mixsample":[[0.803466796875,"adjust",800],[0.98193359375,"ival-div",0],[0.045654296875,"ival-sub",1600],[0.007080078125,"ival-div",400],[0.04052734375,"ival-assert",0],[1.152099609375,"ival-sub",0],[0.65673828125,"ival-sqrt",0],[0.203369140625,"ival-sub",400],[0.1826171875,"adjust",2000],[0.023193359375,"ival-mult",800],[2.577880859375,"ival-mult",0],[0.1591796875,"ival-mult",400],[0.083984375,"ival-sqrt",1600],[0.05810546875,"ival-true",0],[0.08642578125,"exact",0],[0.32763671875,"ival-sqrt",400],[0.457763671875,"ival-neg",0]],"outcomes":[[4.08203125,1,"valid",28],[2.330078125,2,"valid",12],[1.27978515625,0,"invalid",16],[3.406494140625,0,"valid",40]],"stop":[["predicate-same",1],["narrow-enough",1]],"time":17.917236328125,"type":"bsearch"},{"bstep":[[3.8349609375,4.296313174640216e+113,3.813441504096775e+116],[0.7109375,-4.381287496138232e-35,-1.728518964785181e-35]],"compiler":[[25,19],[16,14],[25,19],[16,14],[16,14],[22,18],[16,14],[22,18],[16,14],[22,18],[16,14],[22,18],[16,14],[22,18],[19,17],[1,3]],"memory":[[2066816,2066816]],"method":["binary-search","binary-search"],"mixsample":[[0.31982421875,"ival-sub",0],[0.224365234375,"ival-div",0],[0.018798828125,"ival-true",0],[0.73486328125,"ival-mult",0],[0.3525390625,"ival-sqrt",0],[0.02880859375,"exact",0],[0.0126953125,"ival-assert",0],[0.182861328125,"ival-neg",0]],"outcomes":[[2.6337890625,0,"valid",32]],"stop":[["predicate-same",1],["narrow-enough",1]],"time":5.909912109375,"type":"bsearch"},{"bstep":[[24.907958984375,2.0776542924062333e-83,2.5018656684195218e-70],[6.97802734375,-4.381287496138232e-35,-1.728518964785181e-35]],"compiler":[[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[25,19],[23,19],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[23,19],[22,18],[19,17],[1,3]],"memory":[[-5184048,10974464]],"method":["binary-search","binary-search"],"mixsample":[[0.330810546875,"adjust",800],[1.844482421875,"ival-div",0],[0.006103515625,"ival-mult",800],[0.069580078125,"ival-mult",400],[6.16259765625,"ival-mult",0],[0.052978515625,"ival-sqrt",1600],[0.02880859375,"ival-sub",1600],[0.09228515625,"ival-assert",0],[2.433837890625,"ival-sub",0],[0.192626953125,"ival-true",0],[0.07373046875,"ival-sub",400],[1.6904296875,"ival-sqrt",0],[0.23974609375,"exact",0],[0.122802734375,"ival-sqrt",400],[0.09033203125,"adjust",2000],[1.24755859375,"ival-neg",0]],"outcomes":[[1.204345703125,1,"valid",8],[2.065185546875,2,"valid",6],[3.66162109375,0,"invalid",39],[15.432861328125,0,"valid",178]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":37.118896484375,"type":"bsearch"},{"bstep":[[29.838134765625,-1.2832619072759726e-287,5.197786960749508e-307]],"compiler":[[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[19,17],[1,3]],"memory":[[3116592,10864976]],"method":["binary-search"],"mixsample":[[2.492919921875,"ival-sub",0],[1.728759765625,"ival-div",0],[0.163330078125,"ival-true",0],[6.256591796875,"ival-mult",0],[1.932373046875,"ival-sqrt",0],[0.2626953125,"exact",0],[0.121337890625,"ival-assert",0],[1.17529296875,"ival-neg",0]],"outcomes":[[6.347900390625,0,"invalid",74],[15.67236328125,0,"valid",176]],"stop":[["narrow-enough",1]],"time":36.95703125,"type":"bsearch"},{"bstep":[[21.31298828125,-5.245420851821949e-283,-1.2832619072759726e-287]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[-1745600,7731152]],"method":["binary-search"],"mixsample":[[1.7763671875,"ival-sub",0],[1.295166015625,"ival-div",0],[0.128173828125,"ival-true",0],[4.3291015625,"ival-mult",0],[1.19091796875,"ival-sqrt",0],[0.1611328125,"exact",0],[0.081298828125,"ival-assert",0],[0.842041015625,"ival-neg",0]],"outcomes":[[4.238037109375,0,"invalid",48],[11.512451171875,0,"valid",128]],"stop":[["narrow-enough",1]],"time":25.14892578125,"type":"bsearch"},{"egraph":[[6,4300,447,0.049029584],[5,1189,447,0.02051904],[4,589,447,0.006562766],[3,366,447,0.003574688],[2,206,447,0.002592623],[1,123,449,0.002747065],[0,84,449,0.001516032]],"inputs":[["(if (<=.f64 b #s(literal -859999999999999936491468657600217890772731137178600753493704704 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal -4784610960462839/68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432 binary64)) (/.f64 #s(approx (+ (* b b) (+ (* (* c a) 4) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (if (<=.f64 b #s(literal 3000000000000000124216469591213846409050312014092089967683834602291815406983585544088716834198144287435868859239419406512331498560169695228350527700992 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))))","(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3000000000000000124216469591213846409050312014092089967683834602291815406983585544088716834198144287435868859239419406512331498560169695228350527700992 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 20000000000000000311188322589336860485364027938421228667395411608616675623295114065299707798300948953524125617356800 binary64)) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -4022052505934645/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3792089677624623/31082702275611665134711390509176302506278509424834232340028998555822468563283335970816 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))","(if (<=.f64 b #s(literal -621474992168035/42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"memory":[[3954352,12109376]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -859999999999999936491468657600217890772731137178600753493704704 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal -4784610960462839/68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432 binary64)) (/.f64 #s(approx (+ (* b b) (+ (* (* c a) 4) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (if (<=.f64 b #s(literal 3000000000000000124216469591213846409050312014092089967683834602291815406983585544088716834198144287435868859239419406512331498560169695228350527700992 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))))","(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3000000000000000124216469591213846409050312014092089967683834602291815406983585544088716834198144287435868859239419406512331498560169695228350527700992 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 20000000000000000311188322589336860485364027938421228667395411608616675623295114065299707798300948953524125617356800 binary64)) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 20000000000000000311188322589336860485364027938421228667395411608616675623295114065299707798300948953524125617356800 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -4022052505934645/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3792089677624623/31082702275611665134711390509176302506278509424834232340028998555822468563283335970816 binary64)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -4022052505934645/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3792089677624623/31082702275611665134711390509176302506278509424834232340028998555822468563283335970816 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))","(if (<=.f64 b #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))","(if (<=.f64 b #s(literal -621474992168035/42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"stop":[["node limit",1]],"time":111.968017578125,"type":"simplify"},{"compiler":[[449,86],[4,5],[4,5],[4,5],[7,6],[4,5],[7,6],[13,12],[4,5],[7,6],[66,29],[4,5],[4,5],[16,13],[66,29],[4,5],[4,5],[16,13],[66,29],[21,16],[4,5]],"egraph":[[0,8487,2534,0.099163746],[2,5883,2670,0.028906052],[1,1718,2710,0.020520404],[0,545,2739,0.011768013],[0,8237,7637,0.097831462],[1,4247,7977,0.028640624],[0,1290,8179,0.014798587],[0,8102,44,0.059231262],[2,591,48,0.024867931],[1,81,51,0.002505123],[0,23,51,0.000860773],[0,14,51,0.000154851],[0,8219,300,0.072963746],[2,2284,300,0.034521005],[1,292,300,0.006940776],[0,71,300,0.002729142],[0,44,311,0.000406073]],"memory":[[-6477792,10049200]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":1350.671142578125,"type":"soundness"},{"compiler":[[449,86],[449,86],[105,28],[105,28],[17,14],[17,14]],"memory":[[1251248,42375808]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":100.2509765625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]