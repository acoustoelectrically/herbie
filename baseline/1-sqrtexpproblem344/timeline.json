[{"memory":[[14768,14768]],"time":0.2451171875,"type":"start"},{"compiler":[[14,9]],"memory":[[482320,482320]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.00048804283142089844,"valid":0.9990236759185791}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":3.15087890625,"type":"analyze"},{"bogosity":[{"exit":0.2434214906026663,"infinite":0.005494841774326553,"invalid":0.0,"precondition":0.00048828125,"valid":0.7505953863730072}],"memory":[[18687488,314062512]],"mixsample":[[87.633056640625,"ival-div",0],[9.130126953125,"ival-true",0],[93.273681640625,"ival-mult",0],[87.965087890625,"ival-sqrt",0],[7.234375,"exact",0],[178.6279296875,"ival-expm1",0],[4.774169921875,"ival-assert",0]],"outcomes":[[182.998291015625,0,"exit",2658],[526.71826171875,0,"valid",8256]],"time":1101.566162109375,"type":"sample"},{"compiler":[[12,10],[47,12],[47,12]],"confusion":[[178,0,2,76]],"explanations":[["/.f64","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","o/n",1,0,[["(exp.f64 (*.f64 #s(literal 2 binary64) x))","overflow",3],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","overflow",3]],[[1]]],["/.f64","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","o/o",2,0,[["(exp.f64 (*.f64 #s(literal 2 binary64) x))","overflow",3],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","overflow",3],["(exp.f64 x)","overflow",2],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","overflow",2]],[[1]]],["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",177,0,[],[[1,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cancellation",177,0,[],[[1,1]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))",177,0,false,0,false],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",177,0,false,0,false],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",3,0,false,0,false],["(exp.f64 (*.f64 #s(literal 2 binary64) x))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,177],[1,3],[0,76]],"maybe-confusion":[[178,0,0,2,0,76]],"memory":[[-8356384,66232800]],"mixsample":[[3.637939453125,"ival-div",0],[0.500244140625,"ival-true",0],[9.325439453125,"ival-exp",0],[3.934814453125,"ival-mult",0],[3.60302734375,"ival-sqrt",0],[6.904052734375,"ival-expm1",0],[0.551025390625,"exact",0],[0.19775390625,"ival-assert",0]],"outcomes":[[44.82470703125,0,"valid",512]],"time":131.94189453125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[12,10]],"egraph":[[0,8121,5,0.014761576],[9,6913,5,0.019912158],[8,2986,5,0.02598485],[7,591,5,0.01586611],[6,201,5,0.002968374],[5,124,5,0.001990509],[4,73,7,0.001230881],[3,47,12,0.000766631],[2,35,12,0.000587466],[1,29,12,0.000409895],[0,17,12,0.000521963],[0,10,12,0.000203255],[8,7288,13,0.019791336],[7,2129,13,0.037487333],[6,528,13,0.009356861],[5,252,13,0.002470262],[4,143,13,0.001151902],[3,89,27,0.00068599],[2,55,27,0.000435667],[1,32,27,0.000281277],[0,12,29,0.000209627]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[-26576,16104400]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"symmetry":[[]],"time":218.26806640625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06494140625,"type":"eval"},{"alts":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","next",43.66554512012142,"binary64"]],"compiler":[[12,10]],"memory":[[299968,299968]],"time":0.47998046875,"type":"prune"},{"egraph":[[0,8121,27,0.082125746],[9,6913,31,0.01928947],[8,2986,31,0.026839697],[7,591,31,0.014410329],[6,201,31,0.002407126],[5,124,31,0.001061921],[4,73,35,0.000720513],[3,47,45,0.00041911],[2,35,45,0.000261778],[1,29,45,0.000208409],[0,17,45,0.000252292],[0,10,45,0.000149959]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","cost-diff",2],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",3]],"memory":[[-586656,37606096]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(exp.f64 (*.f64 #s(literal 2 binary64) x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) x)","(*.f64 #s(literal 2 binary64) x)","(*.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(literal 1 binary64)","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":259.864990234375,"type":"simplify"},{"compiler":[[47,12]],"locations":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","accuracy",0.00390625],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.6516530622415708],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",40.913119389884834],["(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","accuracy",40.91342644022725]],"memory":[[3299056,11202368]],"mixsample":[[2.75,"ival-div",0],[0.279052734375,"ival-true",0],[6.578125,"ival-exp",0],[2.957763671875,"ival-mult",0],[2.52783203125,"ival-sqrt",0],[5.70703125,"ival-expm1",0],[0.425537109375,"exact",0],[0.136474609375,"ival-assert",0]],"outcomes":[[33.924072265625,0,"valid",256]],"time":46.737060546875,"type":"localize"},{"count":[[4,20]],"inputs":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[1236032,1236032]],"outputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"series":[[1.408935546875,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","-inf"],[1.56005859375,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","inf"],[1.447998046875,"((/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (- (exp (* 2 x)) 1) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))))","x","0"]],"time":4.968017578125,"type":"series"},{"count":[[20,19]],"egraph":[[0,8367,129,0.101973466],[5,5961,156,0.031995804],[4,2567,163,0.023386075],[3,1446,173,0.010533124],[2,673,179,0.007881188],[1,252,179,0.003746873],[0,77,213,0.000968329]],"inputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(- (exp (* 2 x)) 1)","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))"]],"memory":[[-5156640,40662112]],"method":["egg-herbie"],"outputs":[["2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* 2 x)))","(*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 2/3 binary64) x #s(literal 4/3 binary64)) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(- (exp (* 2 x)) 1)","(expm1.f64 (*.f64 #s(literal 2 binary64) x))","(- (exp x) 1)","(expm1.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":392.886962890625,"type":"simplify"},{"count":[[4,686]],"egraph":[[0,8045,15,0.089519473],[3,5021,19,0.0381407],[2,429,19,0.014922237],[1,63,19,0.001688817],[0,17,33,0.000737318],[0,10,33,0.000147034]],"inputs":[["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"]],"memory":[[3026832,58164304]],"outputs":[["(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 12 binary64)))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 8 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (expm1.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(pow.f64 (*.f64 (exp.f64 (log1p.f64 (exp.f64 x))) (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (exp.f64 (log1p.f64 (exp.f64 x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (expm1.f64 x)) (expm1.f64 x))","(/.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) (expm1.f64 x))","(/.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) #s(literal 1 binary64)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -2 binary64))) (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (-.f64 (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (neg.f64 (expm1.f64 x)) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (expm1.f64 x) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(/.f64 (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (neg.f64 (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (expm1.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (neg.f64 (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (expm1.f64 x) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x))))","(/.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (expm1.f64 x) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)))","(/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 1 binary64) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 x) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))))","(-.f64 (/.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x))) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 (exp.f64 x))) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(+.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(+.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 12 binary64)))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 8 binary64))))","(*.f64 (+.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 4 binary64) x)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 6 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 x))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (expm1.f64 x)))","(*.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(pow.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (expm1.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (expm1.f64 x)) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x)) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (expm1.f64 x))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 18 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 12 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 (*.f64 #s(literal 6 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 8 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 12 binary64)))) (fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (pow.f64 (exp.f64 x) #s(literal 8 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 2 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(fma.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)))","(expm1.f64 (*.f64 #s(literal 4 binary64) (*.f64 x #s(literal 1/2 binary64))))","(expm1.f64 (*.f64 #s(literal 2 binary64) (fma.f64 x #s(literal 1/2 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(expm1.f64 (*.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1 binary64)))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal -1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))","(+.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 x)))","(*.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 6 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(*.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (expm1.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 x)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))) (fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)))","(/.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (*.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (/.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (*.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(expm1.f64 x)","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x)))) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 (*.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (expm1.f64 x))) #s(literal -1 binary64)))","(+.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 (exp.f64 x))) #s(literal -1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 (/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (hypot.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x)))","(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (hypot.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (pow.f64 (neg.f64 (sqrt.f64 (expm1.f64 x))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(pow.f64 (*.f64 #s(literal 1 binary64) (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(/.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x)) (expm1.f64 x))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x)) (expm1.f64 x))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (sqrt.f64 (expm1.f64 x)))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))) (neg.f64 (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (fma.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)))) (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 4 binary64) x))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 6 binary64) x))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (expm1.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (sqrt.f64 (expm1.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (sqrt.f64 (expm1.f64 x))))","(neg.f64 (/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log1p.f64 (exp.f64 x))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (exp.f64 (log1p.f64 (exp.f64 x)))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 (exp.f64 x))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":306.00390625,"type":"rewrite"},{"compiler":[[16622,2395]],"memory":[[9375472,64564464]],"time":96.132080078125,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","next",0.015625,"binary64"],["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","fresh",0.8575333722862468,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","fresh",19.743368167631033,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","next",18.879816813371484,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","fresh",19.83702840388022,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","next",16.28286013768643,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","fresh",19.021759335788488,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","next",19.59500547799802,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","next",19.64400786562576,"binary64"]],"compiler":[[5,5],[11,10],[23,18],[20,16],[16,13],[14,12],[24,18],[27,20],[21,16],[5,5],[11,10],[23,18],[20,16],[16,13],[14,12],[24,18],[27,20],[21,16]],"count":[[706,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[705,9],"picked":[1,0]}],"memory":[[-9092336,29552096]],"min-error":[[0.0,"binary64"]],"time":48.60498046875,"type":"prune"},{"egraph":[[0,8420,154,0.078194211],[9,7495,154,0.019960806],[8,3782,154,0.02790029],[7,1457,154,0.014808664],[6,1059,154,0.006508784],[5,782,154,0.005277586],[4,580,166,0.004608596],[3,313,196,0.002208691],[2,174,196,0.000974998],[1,92,196,0.000659164],[0,52,196,0.000516338],[0,32,196,0.000311569]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","x","#s(literal -1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)"]],"locations":[["(sqrt.f64 #s(literal 2 binary64))","cost-diff",0],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(sqrt.f64 #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","cost-diff",0],["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal -1 binary64))","cost-diff",0],["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","cost-diff",0]],"memory":[[5134688,34481312]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","x","#s(literal -1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(literal 2 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","x","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":248.9189453125,"type":"simplify"},{"compiler":[[164,32]],"locations":[["(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))","accuracy",0.05078125],["(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","accuracy",0.16015625],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","accuracy",19.58328672799802],["(sqrt.f64 #s(literal 2 binary64))","accuracy",0.0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.1484375],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","accuracy",1.0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","accuracy",19.63228911562576],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","accuracy",19.02611761197026],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","accuracy",16.691932337485255],["(exp.f64 x)","accuracy",0.0],["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","accuracy",0.00390625],["(-.f64 (exp.f64 x) #s(literal -1 binary64))","accuracy",0.01953125]],"memory":[[-4778560,29266896]],"mixsample":[[0.15234375,"const",800],[5.483642578125,"ival-div",0],[1.01806640625,"adjust",800],[3.66845703125,"ival-exp",0],[0.102294921875,"ival-assert",0],[0.32373046875,"const",400],[1.707763671875,"ival-sub",0],[5.58642578125,"ival-sqrt",0],[4.17626953125,"const",0],[0.431884765625,"adjust",2000],[7.855712890625,"ival-add",0],[0.0537109375,"ival-mult",800],[11.712890625,"ival-mult",0],[0.106689453125,"ival-mult",400],[3.817626953125,"ival-expm1",0],[0.070068359375,"ival-add",400],[0.210693359375,"ival-true",0],[0.84423828125,"exact",0],[0.034912109375,"ival-add",800]],"outcomes":[[3.894287109375,1,"valid",8],[4.193115234375,2,"valid",7],[59.900390625,0,"valid",241]],"time":88.35498046875,"type":"localize"},{"count":[[18,45]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))"]],"memory":[[4228208,4228208]],"outputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ x (sqrt 2))","3/16","(+ 3/16 (* 7/192 x))","1/2","(+ 1/2 (* 3/16 x))","(+ 1/2 (* x (+ 3/16 (* 7/192 x))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 1/2 (/ 1 (sqrt 2))) (/ (sqrt 2) x)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* 7/192 (pow x 2))","(* (pow x 2) (+ 7/192 (* 3/16 (/ 1 x))))","(* (pow x 2) (+ 7/192 (+ (/ 1/2 (pow x 2)) (* 3/16 (/ 1 x)))))","(* -1 (* x (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"series":[[3.966064453125,"((sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ 1/2 (sqrt 2)) x) (sqrt 2)) (/ 1/2 (sqrt 2)) (sqrt 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/ x (sqrt 2)) (+ (* 7/192 x) 3/16) (+ (* x (+ (* 7/192 x) 3/16)) 1/2))","x","-inf"],[3.194091796875,"((sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ 1/2 (sqrt 2)) x) (sqrt 2)) (/ 1/2 (sqrt 2)) (sqrt 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/ x (sqrt 2)) (+ (* 7/192 x) 3/16) (+ (* x (+ (* 7/192 x) 3/16)) 1/2))","x","inf"],[2.526123046875,"((sqrt (- (exp x) -1)) (- (exp x) -1) (exp x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (+ (* 1/2 x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ 1/2 (sqrt 2)) x) (sqrt 2)) (/ 1/2 (sqrt 2)) (sqrt 2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/ x (sqrt 2)) (+ (* 7/192 x) 3/16) (+ (* x (+ (* 7/192 x) 3/16)) 1/2))","x","0"]],"time":10.6630859375,"type":"series"},{"count":[[45,45]],"egraph":[[0,8127,331,0.134490572],[3,4587,380,0.035380692],[2,1314,398,0.017802899],[1,453,431,0.005532718],[0,142,504,0.001521681]],"inputs":[["(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ x (sqrt 2))","3/16","(+ 3/16 (* 7/192 x))","1/2","(+ 1/2 (* 3/16 x))","(+ 1/2 (* x (+ 3/16 (* 7/192 x))))","(sqrt (+ 1 (exp x)))","(+ 1 (exp x))","(exp x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 1/2 (/ 1 (sqrt 2))) (/ (sqrt 2) x)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* 7/192 (pow x 2))","(* (pow x 2) (+ 7/192 (* 3/16 (/ 1 x))))","(* (pow x 2) (+ 7/192 (+ (/ 1/2 (pow x 2)) (* 3/16 (/ 1 x)))))","(* -1 (* x (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))"]],"memory":[[-14607792,54810128]],"method":["egg-herbie"],"outputs":[["(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/ x (sqrt 2))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","3/16","#s(literal 3/16 binary64)","(+ 3/16 (* 7/192 x))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 3/16 x))","(fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 3/16 (* 7/192 x))))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))","(sqrt (+ 1 (exp x)))","(sqrt.f64 (+.f64 (exp.f64 x) #s(literal 1 binary64)))","(+ 1 (exp x))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(exp x)","(exp.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal 2 binary64) x)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/2 (/ x (sqrt 2)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x)","(* x (+ (* 1/2 (/ 1 (sqrt 2))) (/ (sqrt 2) x)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(*.f64 (/.f64 #s(literal 7/192 binary64) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(fma.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) x) (*.f64 x x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","(* 7/192 x)","(*.f64 #s(literal 7/192 binary64) x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(* 7/192 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 7/192 binary64))","(* (pow x 2) (+ 7/192 (* 3/16 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)","(* (pow x 2) (+ 7/192 (+ (/ 1/2 (pow x 2)) (* 3/16 (/ 1 x)))))","(*.f64 (+.f64 (fma.f64 #s(literal 7/192 binary64) x (/.f64 #s(literal 1/2 binary64) x)) #s(literal 3/16 binary64)) x)","(* -1 (* x (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64))) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) x)) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":417.76708984375,"type":"simplify"},{"count":[[18,516]],"egraph":[[0,8422,134,0.079623833],[2,1720,134,0.031317296],[1,223,137,0.005792501],[0,52,179,0.002235596],[0,32,179,0.000298457]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(literal 2 binary64))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))"]],"memory":[[6106832,62345728]],"outputs":[["(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1/2 binary64)) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (sqrt.f64 (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (pow.f64 (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (neg.f64 (sqrt.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (sqrt.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (sqrt.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))) (sqrt.f64 (expm1.f64 x)))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (sqrt.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (sqrt.f64 (neg.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (expm1.f64 x) #s(literal 1 binary64)))) (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (sqrt.f64 (neg.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (sqrt.f64 (expm1.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (expm1.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (expm1.f64 x) (expm1.f64 x)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))) (neg.f64 (expm1.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (neg.f64 (neg.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (expm1.f64 x) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (expm1.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (/.f64 (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (/.f64 (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (expm1.f64 x)) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 x))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 x) #s(literal 1 binary64))) (*.f64 (expm1.f64 x) #s(literal 1 binary64))) (*.f64 (expm1.f64 x) (/.f64 (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) #s(literal -1 binary64))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (expm1.f64 x))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (exp.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (neg.f64 (expm1.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (*.f64 (expm1.f64 x) #s(literal 1 binary64))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x)))","(neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (exp.f64 x) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (/.f64 (*.f64 (expm1.f64 x) #s(literal 1 binary64)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))) (/.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (expm1.f64 x)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 x)) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)))","(/.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 #s(literal 8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64))))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)) (pow.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (fma.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64)))) (neg.f64 (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (*.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(fma.f64 (/.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64))) (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 (*.f64 x #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) x) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) x) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (neg.f64 x) #s(literal -1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (/.f64 x #s(literal 2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (/.f64 x #s(literal 2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(*.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(pow.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(literal 4 binary64) #s(literal 1/4 binary64))","(pow.f64 #s(literal 2 binary64) #s(literal 1/2 binary64))","(sqrt.f64 #s(literal 2 binary64))","(exp.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (fma.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))) (fma.f64 (+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) #s(literal 1/8 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/8 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal 1/8 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) #s(literal 3 binary64))))))","(/.f64 (-.f64 #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 2 binary64) (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 2 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 3 binary64))))))","(fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (neg.f64 x) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (neg.f64 x) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal -1 binary64)) (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 x (pow.f64 x #s(literal -1 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) x (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(*.f64 (/.f64 x (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64))))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 x))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (*.f64 x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(neg.f64 (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))))","(neg.f64 (/.f64 x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (pow.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (pow.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (fma.f64 (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 9/256 binary64) (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 9/256 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (-.f64 #s(literal 9/256 binary64) (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (+.f64 #s(literal 9/256 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (+.f64 #s(literal 9/256 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))","(-.f64 (/.f64 #s(literal 9/256 binary64) (-.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(+.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (fma.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x)) (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x)) (*.f64 #s(literal 3/16 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 x x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(fma.f64 (*.f64 #s(literal 7/192 binary64) x) x (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) (*.f64 x x) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 #s(literal 7/192 binary64) x) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x)) (*.f64 #s(literal 3/16 binary64) x))","(+.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":255.719970703125,"type":"rewrite"},{"compiler":[[19410,2195]],"memory":[[4596064,57513776]],"time":84.408935546875,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","done",0.015625,"binary64"],["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","next",0.8575333722862468,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","next",19.743368167631033,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",18.879816813371484,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","next",19.83702840388022,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","next",61.45874037808909,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","next",60.83702922237985,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",16.28286013768643,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","done",19.59500547799802,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","done",19.64400786562576,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","fresh",62.1113536893137,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","fresh",61.964271997405476,"binary64"]],"compiler":[[5,5],[11,10],[23,18],[20,16],[16,13],[29,21],[28,20],[14,12],[27,20],[21,16],[43,32],[42,31],[11,10],[23,18],[16,13],[29,21],[28,20],[43,32],[42,31]],"count":[[588,12]],"kept":[{"done":[0,0],"fresh":[4,3],"new":[579,4],"picked":[5,5]}],"memory":[[-6330272,25903584]],"min-error":[[0.0,"binary64"]],"time":48.467041015625,"type":"prune"},{"egraph":[[0,8154,235,0.074015251],[6,7034,241,0.01937993],[5,2989,241,0.030707909],[4,1091,241,0.015947546],[3,390,241,0.004687547],[2,162,271,0.001484579],[1,99,275,0.000859914],[0,64,277,0.000605843],[0,41,293,0.000672517]],"inputs":[["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (expm1.f64 x))","#s(literal -1 binary64)","(expm1.f64 x)","x","(neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(*.f64 x #s(literal 2 binary64))","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","cost-diff",0],["(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","cost-diff",0],["(+.f64 #s(literal 2 binary64) x)","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","cost-diff",0],["(expm1.f64 x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (expm1.f64 x))","cost-diff",0],["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","cost-diff",0],["(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","cost-diff",6]],"memory":[[6993664,36482112]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (expm1.f64 x))","#s(literal -1 binary64)","(expm1.f64 x)","x","(neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(expm1.f64 (*.f64 #s(literal 2 binary64) x))","(*.f64 x #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","x","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":233.279052734375,"type":"simplify"},{"compiler":[[232,32]],"locations":[["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","accuracy",0.0234375],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.03515625],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.09765625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","accuracy",19.357312849318557],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","accuracy",0.00390625],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","accuracy",0.0078125],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","accuracy",18.796501181882114],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","accuracy",42.9547505888652],["(*.f64 x x)","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","accuracy",18.796501181882114],["#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","accuracy",43.109394301892976],["(+.f64 #s(literal 2 binary64) x)","accuracy",0.0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","accuracy",0.00390625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","accuracy",19.39772905012048],["(expm1.f64 (*.f64 x #s(literal 2 binary64)))","accuracy",0.0],["(expm1.f64 x)","accuracy",0.0],["(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","accuracy",0.00390625],["(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","accuracy",0.7493093122415708]],"memory":[[-3637888,30684736]],"mixsample":[[0.02197265625,"const",800],[0.037841796875,"const",4000],[0.066162109375,"adjust",800],[4.7080078125,"ival-div",0],[0.183837890625,"adjust",4800],[0.052001953125,"adjust",4000],[0.008056640625,"ival-mult",2000],[0.01708984375,"const",400],[0.142333984375,"ival-assert",0],[4.059326171875,"ival-sqrt",0],[7.868896484375,"const",0],[0.0048828125,"ival-add",4000],[0.052001953125,"adjust",2000],[0.008056640625,"ival-mult",800],[8.178466796875,"ival-add",0],[0.0068359375,"ival-mult",400],[18.226318359375,"ival-mult",0],[7.140625,"ival-expm1",0],[0.0048828125,"ival-add",2000],[0.005126953125,"ival-add",400],[0.02587890625,"const",2000],[0.051025390625,"adjust",2800],[0.290283203125,"ival-true",0],[0.0048828125,"ival-add",800],[0.768310546875,"exact",0],[1.274169921875,"ival-neg",0],[0.008056640625,"ival-mult",4000]],"outcomes":[[1.076904296875,5,"exit",1],[76.18701171875,0,"valid",255]],"time":104.743896484375,"type":"localize"},{"count":[[22,52]],"inputs":[["(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (expm1.f64 x))","(expm1.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(*.f64 x x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[-1984512,5521200]],"outputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* (sqrt -2) (sqrt -1))","(+ (* -1/2 (/ (* x (sqrt -1)) (sqrt -2))) (* (sqrt -2) (sqrt -1)))","(+ (* x (+ (* -1/2 (/ (sqrt -1) (sqrt -2))) (* -1/2 (/ (* x (* (sqrt -1) (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2)))))) (sqrt -2))))) (* (sqrt -2) (sqrt -1)))","(+ (* x (+ (* -1/2 (/ (sqrt -1) (sqrt -2))) (* x (+ (* -1/2 (/ (* x (* (sqrt -1) (+ 1/6 (* 1/2 (/ (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2)))) (pow (sqrt -2) 2)))))) (sqrt -2))) (* -1/2 (/ (* (sqrt -1) (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2))))) (sqrt -2))))))) (* (sqrt -2) (sqrt -1)))","(/ -1 x)","(/ (- (* 1/2 x) 1) x)","(/ (- (* x (+ 1/2 (* -1/12 x))) 1) x)","(/ (- (* x (+ 1/2 (* x (- (* 1/720 (pow x 2)) 1/12)))) 1) x)","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(* 1/2 (pow x 2))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(pow x 2)","1/2","(+ 1/2 (* 1/6 x))","(* -1 (/ (- 1 (exp (* 2 x))) (- (exp x) 1)))","(* (sqrt -1) (sqrt (/ (- 1 (exp (* 2 x))) (- (exp x) 1))))","(/ -1 (- (exp x) 1))","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* x (+ 1 (* 2 (/ 1 x))))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(- (exp (* 2 x)) 1)","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))"]],"series":[[10.251953125,"((* (/ -1 (- (exp x) 1)) (neg (- (exp (* x 2)) 1))) (sqrt (* (/ -1 (- (exp x) 1)) (neg (- (exp (* x 2)) 1)))) (/ -1 (- (exp x) 1)) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (* x x) 1/2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (+ (* 1/2 x) 1) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) x) 1) (- (exp (* x 2)) 1) (* x x) (+ (* 1/6 x) 1/2))","x","-inf"],[5.7080078125,"((* (/ -1 (- (exp x) 1)) (neg (- (exp (* x 2)) 1))) (sqrt (* (/ -1 (- (exp x) 1)) (neg (- (exp (* x 2)) 1)))) (/ -1 (- (exp x) 1)) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (* x x) 1/2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (+ (* 1/2 x) 1) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) x) 1) (- (exp (* x 2)) 1) (* x x) (+ (* 1/6 x) 1/2))","x","inf"],[3.2080078125,"((* (/ -1 (- (exp x) 1)) (neg (- (exp (* x 2)) 1))) (sqrt (* (/ -1 (- (exp x) 1)) (neg (- (exp (* x 2)) 1)))) (/ -1 (- (exp x) 1)) (- (exp x) 1) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ 2 x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (* x x) 1/2) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* 1/2 x) 1) x) 2) (* (+ (* 1/2 x) 1) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) x) 1) (- (exp (* x 2)) 1) (* x x) (+ (* 1/6 x) 1/2))","x","0"]],"time":20.630126953125,"type":"series"},{"count":[[52,51]],"egraph":[[0,8336,380,0.189385536],[4,7708,451,0.02987943],[3,4387,451,0.045165285],[2,1647,476,0.025040113],[1,568,484,0.014259276],[0,180,548,0.003125384]],"inputs":[["2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* (sqrt -2) (sqrt -1))","(+ (* -1/2 (/ (* x (sqrt -1)) (sqrt -2))) (* (sqrt -2) (sqrt -1)))","(+ (* x (+ (* -1/2 (/ (sqrt -1) (sqrt -2))) (* -1/2 (/ (* x (* (sqrt -1) (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2)))))) (sqrt -2))))) (* (sqrt -2) (sqrt -1)))","(+ (* x (+ (* -1/2 (/ (sqrt -1) (sqrt -2))) (* x (+ (* -1/2 (/ (* x (* (sqrt -1) (+ 1/6 (* 1/2 (/ (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2)))) (pow (sqrt -2) 2)))))) (sqrt -2))) (* -1/2 (/ (* (sqrt -1) (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2))))) (sqrt -2))))))) (* (sqrt -2) (sqrt -1)))","(/ -1 x)","(/ (- (* 1/2 x) 1) x)","(/ (- (* x (+ 1/2 (* -1/12 x))) 1) x)","(/ (- (* x (+ 1/2 (* x (- (* 1/720 (pow x 2)) 1/12)))) 1) x)","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(* 1/2 (pow x 2))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(* 2 x)","(* x (+ 2 (* 2 x)))","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(pow x 2)","1/2","(+ 1/2 (* 1/6 x))","(* -1 (/ (- 1 (exp (* 2 x))) (- (exp x) 1)))","(* (sqrt -1) (sqrt (/ (- 1 (exp (* 2 x))) (- (exp x) 1))))","(/ -1 (- (exp x) 1))","(- (exp x) 1)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* x (+ 1 (* 2 (/ 1 x))))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(- (exp (* 2 x)) 1)","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))"]],"memory":[[2073872,48014576]],"method":["egg-herbie"],"outputs":[["2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* (sqrt -2) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -2 binary64)))","(+ (* -1/2 (/ (* x (sqrt -1)) (sqrt -2))) (* (sqrt -2) (sqrt -1)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (/.f64 x (sqrt.f64 #s(literal -2 binary64))) #s(literal -1/2 binary64) (sqrt.f64 #s(literal -2 binary64))))","(+ (* x (+ (* -1/2 (/ (sqrt -1) (sqrt -2))) (* -1/2 (/ (* x (* (sqrt -1) (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2)))))) (sqrt -2))))) (* (sqrt -2) (sqrt -1)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -2 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -2 binary64))))","(+ (* x (+ (* -1/2 (/ (sqrt -1) (sqrt -2))) (* x (+ (* -1/2 (/ (* x (* (sqrt -1) (+ 1/6 (* 1/2 (/ (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2)))) (pow (sqrt -2) 2)))))) (sqrt -2))) (* -1/2 (/ (* (sqrt -1) (+ 1/2 (* 1/4 (/ 1 (pow (sqrt -2) 2))))) (sqrt -2))))))) (* (sqrt -2) (sqrt -1)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) (fma.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -2 binary64))) (fma.f64 #s(literal 7/96 binary64) x #s(literal 3/8 binary64))) x (/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -2 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 #s(literal -2 binary64))))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* 1/2 x) 1) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (- (* x (+ 1/2 (* -1/12 x))) 1) x)","(-.f64 (fma.f64 #s(literal -1/12 binary64) x #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x))","(/ (- (* x (+ 1/2 (* x (- (* 1/720 (pow x 2)) 1/12)))) 1) x)","(-.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/12 binary64)) x #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x))","x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* 2 x)))","(*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* 4/3 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","(* x (+ 2 (* x (+ 2 (* x (+ 4/3 (* 2/3 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 2/3 binary64) x #s(literal 4/3 binary64)) x #s(literal 2 binary64)) x #s(literal 2 binary64)) x)","(pow x 2)","(*.f64 x x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* -1 (/ (- 1 (exp (* 2 x))) (- (exp x) 1)))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(* (sqrt -1) (sqrt (/ (- 1 (exp (* 2 x))) (- (exp x) 1))))","(*.f64 (sqrt.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x))) (sqrt.f64 #s(literal -1 binary64)))","(/ -1 (- (exp x) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 x))","(- (exp x) 1)","(expm1.f64 x)","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(* x (+ 1 (* 2 (/ 1 x))))","(+.f64 #s(literal 2 binary64) x)","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(- (exp (* 2 x)) 1)","(expm1.f64 (*.f64 #s(literal 2 binary64) x))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (fma.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":574.741943359375,"type":"simplify"},{"count":[[22,605]],"egraph":[[0,8330,208,0.082377313],[2,1392,214,0.035530258],[1,224,214,0.005931445],[0,64,250,0.001803664],[0,41,266,0.000489797]],"inputs":[["(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (expm1.f64 x))","(expm1.f64 x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(+.f64 #s(literal 2 binary64) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(expm1.f64 (*.f64 x #s(literal 2 binary64)))","(*.f64 x x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[413952,55111776]],"outputs":[["(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (expm1.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 x) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (expm1.f64 x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 x)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(*.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x))))))","(*.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (exp.f64 x)))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x) (neg.f64 (expm1.f64 x))) (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(*.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))) (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (expm1.f64 x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 x))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (exp.f64 x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x) (neg.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (neg.f64 (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (expm1.f64 x) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)))","(/.f64 (-.f64 (neg.f64 (expm1.f64 x)) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (expm1.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (expm1.f64 x)) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (expm1.f64 x))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (+.f64 (neg.f64 (expm1.f64 x)) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (neg.f64 (expm1.f64 x))))","(/.f64 (+.f64 (expm1.f64 x) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (expm1.f64 x) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)))","(/.f64 (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 x)) (expm1.f64 x)) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (expm1.f64 x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x)))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (exp.f64 x))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)))","(/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (exp.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x)))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (exp.f64 x))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x)) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64)) (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x) (neg.f64 (expm1.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(neg.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x))))) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))) (/.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))) (/.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 x)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 x)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (expm1.f64 x)))","(-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (exp.f64 x) #s(literal -1 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(+.f64 #s(literal 0 binary64) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(+.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1/2 binary64)) (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(pow.f64 (exp.f64 (log1p.f64 (exp.f64 x))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (sqrt.f64 (expm1.f64 x))))","(/.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (expm1.f64 x))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 x))) (sqrt.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (pow.f64 (expm1.f64 x) #s(literal -2 binary64)))) (sqrt.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) (exp.f64 x))))","(/.f64 (sqrt.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (expm1.f64 x) #s(literal -3 binary64))) (pow.f64 (expm1.f64 x) #s(literal -3 binary64)))) (sqrt.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (expm1.f64 x) #s(literal -2 binary64)) (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (expm1.f64 x))))))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (exp.f64 x)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (exp.f64 x)))))","(/.f64 (sqrt.f64 (fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x) (neg.f64 (expm1.f64 x)))) (sqrt.f64 (pow.f64 (expm1.f64 x) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (sqrt.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (sqrt.f64 (*.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (sqrt.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (expm1.f64 x))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (sqrt.f64 (*.f64 (expm1.f64 x) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (sqrt.f64 (expm1.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (sqrt.f64 (neg.f64 (expm1.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (expm1.f64 x)) (sqrt.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 (exp.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(pow.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 x)))","(/.f64 #s(literal -1 binary64) (expm1.f64 x))","(neg.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (expm1.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (/.f64 (expm1.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (expm1.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 (expm1.f64 x) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 x)))","(pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (expm1.f64 (*.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(neg.f64 (neg.f64 (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 (exp.f64 x) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) #s(literal -1 binary64))) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (expm1.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (/.f64 #s(literal -1 binary64) (expm1.f64 x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 x)) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (expm1.f64 x)) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (expm1.f64 x) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(expm1.f64 x)","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x))","(*.f64 (fma.f64 x x #s(literal -4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 2 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 2 binary64) x))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)))))","(*.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x)))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x))) (*.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)))) (+.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)) (*.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -4 binary64))) (neg.f64 (-.f64 x #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (*.f64 (-.f64 #s(literal 2 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 2 binary64) x) (-.f64 #s(literal 2 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -4 binary64)) (-.f64 x #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (*.f64 x x)) (-.f64 #s(literal 2 binary64) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (fma.f64 x (-.f64 x #s(literal 2 binary64)) #s(literal 4 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 2 binary64)) (fma.f64 x x #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 2 binary64) x))))","(fma.f64 #s(literal 4 binary64) (pow.f64 (-.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 2 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 2 binary64))) (/.f64 #s(literal 4 binary64) (-.f64 x #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x)))","(+.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 2 binary64) x))))","(+.f64 #s(literal 2 binary64) x)","(+.f64 x #s(literal 2 binary64))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(*.f64 x (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","#s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (*.f64 x x)) (-.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (*.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x)","(+.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))) (*.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 4 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 (/.f64 #s(literal 4 binary64) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64))) (neg.f64 (/.f64 #s(literal 4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -2 binary64)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(*.f64 (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 x))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal 6 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (neg.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)))","(/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64)))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(-.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(+.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 #s(literal 2 binary64)) x))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(fma.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":252.515869140625,"type":"rewrite"},{"compiler":[[18636,2869]],"memory":[[6608448,63124768]],"time":97.13916015625,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","done",0.015625,"binary64"],["(sqrt.f64 (*.f64 #s(approx (/ -1 (- (exp x) 1)) (-.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/12 binary64)) x #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","fresh",19.8671875,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",19.743368167631033,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",18.879816813371484,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",19.83702840388022,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","next",62.369701757352814,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","next",61.747990621138,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","done",61.45874037808909,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","done",60.83702922237985,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",16.28286013768643,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","next",19.59500547799802,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","done",19.59500547799802,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","done",19.64400786562576,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","next",62.1113536893137,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","next",61.964271997405476,"binary64"]],"compiler":[[5,5],[27,22],[23,18],[20,16],[16,13],[36,25],[35,25],[29,21],[28,20],[14,12],[30,21],[27,20],[21,16],[43,32],[42,31],[27,22],[36,25],[35,25],[30,21],[43,32],[42,31]],"count":[[665,15]],"kept":[{"done":[5,5],"fresh":[2,2],"new":[653,4],"picked":[5,4]}],"memory":[[-9450848,29030144]],"min-error":[[0.0,"binary64"]],"time":51.635986328125,"type":"prune"},{"egraph":[[0,8015,422,0.080097347],[9,7497,428,0.01775628],[8,3957,428,0.029390212],[7,1677,428,0.016445884],[6,1287,428,0.007936139],[5,1039,428,0.007562469],[4,846,451,0.006460968],[3,521,486,0.003553295],[2,302,486,0.001920257],[1,143,490,0.00111334],[0,73,496,0.000815212],[0,53,500,0.000555302]],"inputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(*.f64 x x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(*.f64 x x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)"]],"locations":[["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","cost-diff",0],["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","cost-diff",0],["(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","cost-diff",0],["#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","cost-diff",0],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","cost-diff",0],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","cost-diff",0],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","cost-diff",0],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","cost-diff",0],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","cost-diff",0],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","cost-diff",0],["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","cost-diff",3]],"memory":[[5659200,34664912]],"method":["egg-herbie"],"outputs":[["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","#s(literal 1/2 binary64)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(*.f64 x x)","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(*.f64 x x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","x","(sqrt.f64 #s(literal 2 binary64))","#s(literal 2 binary64)","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","#s(literal 7/192 binary64)","#s(literal 3/16 binary64)","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":266.69482421875,"type":"simplify"},{"compiler":[[313,41]],"locations":[["(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","accuracy",0.16015625],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","accuracy",19.336771028287817],["#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","accuracy",42.73185610172192],["(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","accuracy",0.17578125],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","accuracy",19.336771028287817],["#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","accuracy",42.844115089097144],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","accuracy",0.03125],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.09765625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","accuracy",19.357312849318557],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","accuracy",42.70475106153222],["(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","accuracy",0.04296875],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.09765625],["#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","accuracy",19.357312849318557],["#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","accuracy",42.81642627193579],["(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","accuracy",0.16015625],["(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.46484375],["(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","accuracy",0.99609375],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","accuracy",19.336771028287817]],"memory":[[399072,42976496]],"mixsample":[[0.250732421875,"const",800],[0.049072265625,"const",4000],[6.06591796875,"ival-div",0],[1.417236328125,"adjust",800],[0.072021484375,"adjust",4800],[0.010009765625,"ival-mult",2000],[0.148193359375,"adjust",4000],[0.14111328125,"ival-assert",0],[0.435302734375,"const",400],[4.0126953125,"ival-sqrt",0],[9.623779296875,"const",0],[0.0048828125,"ival-add",4000],[0.605224609375,"adjust",2000],[0.064208984375,"ival-mult",800],[13.3251953125,"ival-add",0],[31.6455078125,"ival-mult",0],[0.135986328125,"ival-mult",400],[5.16064453125,"ival-expm1",0],[0.0048828125,"ival-add",2000],[0.04296875,"const",2000],[0.082275390625,"ival-add",400],[0.14208984375,"adjust",2800],[0.280029296875,"ival-true",0],[0.0419921875,"ival-add",800],[0.724609375,"exact",0],[0.013916015625,"ival-mult",4000]],"outcomes":[[5.6728515625,1,"valid",8],[8.855224609375,2,"valid",7],[1.703125,5,"exit",1],[87.826171875,0,"valid",240]],"time":138.694091796875,"type":"localize"},{"count":[[22,50]],"inputs":[["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[-3653152,5657088]],"outputs":[["(/ 1/2 (sqrt 2))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ x (sqrt 2))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* 1/6 x)))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2)))))","(/ (pow x 2) (sqrt 2))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2)))))","(* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2)))))","3/16","(+ 3/16 (* 7/192 x))","1/2","(+ 1/2 (* 1/6 x))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))"]],"series":[[4.156005859375,"((+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (/ x (sqrt 2)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (* (+ (* 1/6 x) 1/2) (* x x)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) (* x x)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (* (* (/ x (sqrt 2)) x) (+ (* 7/192 x) 3/16)) (* (/ x (sqrt 2)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (* (/ x (sqrt 2)) (+ (* (+ (* 7/192 x) 3/16) x) 1/2)) (/ 1/2 (sqrt 2)) (+ (* 7/192 x) 3/16) (+ (* 1/6 x) 1/2))","x","-inf"],[3.02392578125,"((+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (/ x (sqrt 2)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (* (+ (* 1/6 x) 1/2) (* x x)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) (* x x)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (* (* (/ x (sqrt 2)) x) (+ (* 7/192 x) 3/16)) (* (/ x (sqrt 2)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (* (/ x (sqrt 2)) (+ (* (+ (* 7/192 x) 3/16) x) 1/2)) (/ 1/2 (sqrt 2)) (+ (* 7/192 x) 3/16) (+ (* 1/6 x) 1/2))","x","inf"],[5.441162109375,"((+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (+ (* (/ x (sqrt 2)) (+ (* 7/192 x) 3/16)) (/ 1/2 (sqrt 2))) x) (sqrt 2)) (/ x (sqrt 2)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (* (+ (* 1/6 x) 1/2) (* x x)) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (+ (* (+ (* 1/6 x) 1/2) (* x x)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (* (* (/ x (sqrt 2)) x) (+ (* 7/192 x) 3/16)) (* (/ x (sqrt 2)) x) (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (* (/ x (sqrt 2)) (+ (* (+ (* 7/192 x) 3/16) x) 1/2)) (/ 1/2 (sqrt 2)) (+ (* 7/192 x) 3/16) (+ (* 1/6 x) 1/2))","x","0"]],"time":15.9970703125,"type":"series"},{"count":[[50,49]],"egraph":[[0,8680,411,0.096058019],[3,4412,470,0.03270385],[2,1506,490,0.016503043],[1,499,535,0.008539151],[0,153,604,0.00225574]],"inputs":[["(/ 1/2 (sqrt 2))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(sqrt 2)","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(/ x (sqrt 2))","2","(+ 2 x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (* 1/6 x)))","x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* 3/16 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2)))))","(/ (pow x 2) (sqrt 2))","(* 1/2 (/ x (sqrt 2)))","(* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2)))))","(* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2)))))","3/16","(+ 3/16 (* 7/192 x))","1/2","(+ 1/2 (* 1/6 x))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(* 7/192 x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))"]],"memory":[[-4595472,40935024]],"method":["egg-herbie"],"outputs":[["(/ 1/2 (sqrt 2))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))","(*.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)))","(sqrt 2)","(sqrt.f64 #s(literal 2 binary64))","(+ (sqrt 2) (* 1/2 (/ x (sqrt 2))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 1/2 (/ (* x (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 1/2 (/ (* x (- 1/6 (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (pow (sqrt 2) 2))))) (sqrt 2))) (* 1/2 (/ (- 1/2 (* 1/4 (/ 1 (pow (sqrt 2) 2)))) (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(+ (sqrt 2) (* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2))))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/ x (sqrt 2))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","2","#s(literal 2 binary64)","(+ 2 x)","(+.f64 #s(literal 2 binary64) x)","(+ 2 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (* 1/6 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","x","(* x (+ 1 (* 1/2 x)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* 3/16 (/ (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) x) x)","(* (pow x 2) (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2)))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(/ (pow x 2) (sqrt 2))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","(* 1/2 (/ x (sqrt 2)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x)","(* x (+ (* 3/16 (/ x (sqrt 2))) (* 1/2 (/ 1 (sqrt 2)))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)))","(* x (+ (* x (+ (* 7/192 (/ x (sqrt 2))) (* 3/16 (/ 1 (sqrt 2))))) (* 1/2 (/ 1 (sqrt 2)))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)))","3/16","#s(literal 3/16 binary64)","(+ 3/16 (* 7/192 x))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 7/192 (/ (pow x 2) (sqrt 2)))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64))","(* (pow x 2) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(* (pow x 2) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)))","(sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(* 7/192 (/ (pow x 3) (sqrt 2)))","(*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64))","(* (pow x 3) (+ (* 7/192 (/ 1 (sqrt 2))) (* 3/16 (/ 1 (* x (sqrt 2))))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (/ 1/2 (* (pow x 2) (sqrt 2))) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)))","(* (pow x 3) (+ (/ 3/16 (* x (sqrt 2))) (+ (* 7/192 (/ 1 (sqrt 2))) (+ (* 1/2 (/ 1 (* (pow x 2) (sqrt 2)))) (/ (sqrt 2) (pow x 3))))))","(fma.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64))))","(/ (- (exp (* 2 x)) 1) (- (exp x) 1))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (* 2 (/ 1 (pow x 3)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))","(* 7/192 x)","(*.f64 #s(literal 7/192 binary64) x)","(* x (+ 7/192 (* 3/16 (/ 1 x))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* 3/16 (/ 1 (sqrt 2))) (* 1/2 (/ 1 (* x (sqrt 2))))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 3/16 binary64))) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ (* -1 (/ (- (* -1 (/ (sqrt 2) x)) (* 1/2 (/ 1 (sqrt 2)))) x)) (* 3/16 (/ 1 (sqrt 2)))) x)) (* 7/192 (/ 1 (sqrt 2))))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 3/16 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) x)) x) (/.f64 #s(literal -7/192 binary64) (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 2 (pow x 2)))) x)) 1/6)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":365.61083984375,"type":"simplify"},{"count":[[22,862]],"egraph":[[0,8698,364,0.072656128],[2,2524,376,0.036238276],[1,313,378,0.01043145],[0,73,437,0.002445191],[0,53,441,0.000511066]],"inputs":[["(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64)))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[5387792,78739376]],"outputs":[["(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) (pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/8 binary64))) (*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) #s(literal -1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 343/7077888 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (-.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal 4 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) #s(literal 4 binary64))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 1/8 binary64) (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))))","(fma.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 7/192 binary64)) x (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 (*.f64 #s(literal 7/192 binary64) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 #s(literal 7/192 binary64) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 7/192 binary64) x) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 #s(literal 7/192 binary64) x)) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 #s(literal 7/192 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))) (/.f64 #s(literal 1/8 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(+.f64 (+.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64))) (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (fma.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(+.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (-.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (+.f64 #s(literal 2 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal 1/4 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 x (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))) (/.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))))","(+.f64 (+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (sqrt.f64 #s(literal 2 binary64)))","(+.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) x)","(*.f64 (neg.f64 x) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal -1 binary64))","(/.f64 (*.f64 x #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 x (sqrt.f64 #s(literal 2 binary64)))","(neg.f64 (/.f64 (neg.f64 x) (sqrt.f64 #s(literal 2 binary64))))","(neg.f64 (/.f64 x (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (*.f64 x x)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (*.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) x)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 x x) (*.f64 #s(literal 1/2 binary64) (*.f64 x x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) (*.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 x x)))","(+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) (*.f64 x x)))","(+.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) (*.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 x x)))","(+.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) x)))","(*.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))) #s(literal 1/2 binary64)))","#s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","#s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 x (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1 binary64)))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (*.f64 #s(literal 1 binary64) x))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (*.f64 x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (*.f64 x #s(literal 1 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (*.f64 #s(literal 1 binary64) x))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) (*.f64 x #s(literal 1 binary64)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (neg.f64 x))))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(+.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) x))","(+.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) (*.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) x)","(+.f64 x (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x)","(*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))","(*.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))","(*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal 3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 7/192 binary64) x) (*.f64 x x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 3/16 binary64) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 7/192 binary64) x) (*.f64 x x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) (*.f64 x x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 3/16 binary64) (*.f64 x x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))","(/.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))))","(/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) x (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 #s(literal 3/16 binary64) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (*.f64 #s(literal 7/192 binary64) x) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(fma.f64 (*.f64 #s(literal 7/192 binary64) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 #s(literal 3/16 binary64) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(fma.f64 #s(literal 7/192 binary64) (*.f64 x (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 3/16 binary64) x) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(fma.f64 x (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(fma.f64 x (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))","(*.f64 (*.f64 x x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)","(*.f64 x (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))","(/.f64 (*.f64 x (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 x #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (neg.f64 x) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 x x) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x x)))","(/.f64 x (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(exp.f64 (-.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) (log.f64 (sqrt.f64 #s(literal 2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))))","#s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) x)","(*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))","(*.f64 x (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(*.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))))","(*.f64 x (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) x))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) #s(literal 2 binary64))","(/.f64 (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 7/192 binary64) x)) (*.f64 (*.f64 x x) #s(literal 3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 3 binary64)) #s(literal 343/7077888 binary64) (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 3 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) #s(literal 1/2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 3/16 binary64))))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (*.f64 x x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (*.f64 x x)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (sqrt.f64 #s(literal 2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) (neg.f64 x)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 x #s(literal 1/2 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64)) x) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64))) x) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (neg.f64 x) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal -1/8 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 #s(literal 1/8 binary64) #s(literal 3/2 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (-.f64 #s(literal 1/8 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) #s(literal 2 binary64))) (/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (pow.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (neg.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) (neg.f64 x)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64))) x) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 x) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (neg.f64 x) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) (*.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))","(/.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) (/.f64 (sqrt.f64 #s(literal 2 binary64)) x))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) x (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (*.f64 #s(literal 7/192 binary64) x) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (*.f64 #s(literal 7/192 binary64) x) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 #s(literal 7/192 binary64) (*.f64 x (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x)) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 7/192 binary64) x) x) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 x (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x)) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(literal 7/192 binary64)) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(fma.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(fma.f64 x (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(fma.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(+.f64 (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(+.f64 (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) x) #s(literal 7/192 binary64)) (fma.f64 (*.f64 #s(literal 3/16 binary64) (/.f64 x (sqrt.f64 #s(literal 2 binary64)))) x (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)) x))","(+.f64 (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))) (*.f64 x (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))))","(*.f64 (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal -3 binary64))","(pow.f64 #s(literal 2 binary64) #s(literal -3/2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (sqrt.f64 #s(literal 2 binary64)))))","(/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal 2 binary64))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 #s(literal 2 binary64))) #s(literal 3 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 2 binary64) #s(literal 3/2 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(literal 2 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64)))","(*.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (pow.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (pow.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) #s(literal 9/256 binary64))) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (-.f64 #s(literal 9/256 binary64) (*.f64 #s(literal 49/36864 binary64) (*.f64 x x))) (-.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))) (neg.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))) (neg.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64))))))","(/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (+.f64 #s(literal 9/256 binary64) (-.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64)) (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) #s(literal -9/256 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 49/36864 binary64) (*.f64 x x) (-.f64 #s(literal 9/256 binary64) (*.f64 x #s(literal 7/1024 binary64)))) (fma.f64 #s(literal 343/7077888 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 27/4096 binary64))))","(fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64))","(fma.f64 x #s(literal 7/192 binary64) #s(literal 3/16 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 49/36864 binary64) (*.f64 x x)) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))) (/.f64 #s(literal 9/256 binary64) (fma.f64 #s(literal 7/192 binary64) x #s(literal -3/16 binary64))))","(+.f64 (*.f64 #s(literal 7/192 binary64) x) #s(literal 3/16 binary64))","(+.f64 #s(literal 3/16 binary64) (*.f64 #s(literal 7/192 binary64) x))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":320.529052734375,"type":"rewrite"},{"compiler":[[53078,4681]],"memory":[[6549680,106499152]],"time":217.93212890625,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","done",0.015625,"binary64"],["(sqrt.f64 (*.f64 #s(approx (/ -1 (- (exp x) 1)) (-.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/12 binary64)) x #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","fresh",19.8671875,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",19.743368167631033,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","done",18.879816813371484,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","done",19.83702840388022,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","done",62.369701757352814,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","done",61.747990621138,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 #s(approx (+ (* 1/6 x) 1/2) (*.f64 #s(literal 1/6 binary64) x)) (*.f64 x x)))))","fresh",62.57432996422066,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","done",61.45874037808909,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","done",60.83702922237985,"binary64"],["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","done",16.28286013768643,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","fresh",19.59500547799802,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","done",19.59500547799802,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","done",19.64400786562576,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) #s(literal 2 binary64))))","fresh",62.1113536893137,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))","fresh",62.1113536893137,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(approx (+ (* 7/192 x) 3/16) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","fresh",61.48480800786007,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","done",61.964271997405476,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (+ (* 7/192 x) 3/16) (*.f64 #s(literal 7/192 binary64) x)))))","fresh",62.343173099228316,"binary64"],["#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (+ (* 7/192 x) 3/16) #s(literal 3/16 binary64)))))","fresh",61.33772645129215,"binary64"]],"compiler":[[746,156],[5,5],[27,22],[23,18],[20,16],[16,13],[36,25],[35,25],[40,25],[29,21],[28,20],[14,12],[32,22],[27,20],[21,16],[50,35],[43,32],[46,31],[42,31],[47,31],[45,30]],"count":[[1020,20]],"kept":[{"done":[9,9],"fresh":[1,1],"new":[1005,7],"picked":[5,3]}],"memory":[[3217312,46472688]],"min-error":[[0.0,"binary64"]],"time":37.680908203125,"type":"prune"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["x",0.015625,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",0.015625,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.015625,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[25,1]],"inputs":[["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 #s(approx (+ (* 1/6 x) 1/2) (*.f64 #s(literal 1/6 binary64) x)) (*.f64 x x)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (+ (* 7/192 x) 3/16) #s(literal 3/16 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(approx (+ (* 7/192 x) 3/16) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (+ (* 7/192 x) 3/16) (*.f64 #s(literal 7/192 binary64) x)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))","(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(sqrt.f64 (*.f64 #s(approx (/ -1 (- (exp x) 1)) (-.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/720 binary64) #s(literal -1/12 binary64)) x #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) x))) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))","(sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))))"]],"memory":[[-4900000,11157616]],"oracle":[63.90026509411494],"outputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))"]],"repr":["binary64"],"time":19.89208984375,"times":[[5.867919921875,"x"],[5.237060546875,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[6.40185546875,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[16.28286013768643],"baseline":[16.28286013768643],"branch":[["x",16.28286013768643,1,"binary64"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))",16.28286013768643,1,"binary64"],["(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",16.28286013768643,1,"binary64"]],"compiler":[[1,1],[12,10],[11,9]],"count":[[21,1]],"inputs":[["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (+.f64 #s(literal 2 binary64) x)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* 1/2 x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 #s(approx (+ (* 1/6 x) 1/2) (*.f64 #s(literal 1/6 binary64) x)) (*.f64 x x)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x)))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(approx (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 2) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x))))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (+ (* 7/192 x) 3/16) #s(literal 3/16 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(approx (+ (* 7/192 x) 3/16) #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) #s(approx (+ (* 7/192 x) 3/16) (*.f64 #s(literal 7/192 binary64) x)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) x) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64))) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (*.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x #s(literal 1/2 binary64)) x) (sqrt.f64 #s(literal 2 binary64)))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 #s(literal 3/16 binary64) x #s(literal 1/2 binary64)) (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 x (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) #s(approx (+ (* (/ x (sqrt 2)) (+ (* x (+ (* 7/192 x) 3/16)) 1/2)) (sqrt 2)) (/.f64 (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (*.f64 x x)))) #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) x) (sqrt.f64 #s(literal 2 binary64)) (*.f64 (sqrt.f64 #s(literal 2 binary64)) #s(literal 1/2 binary64))) #s(literal 2 binary64)) x (sqrt.f64 #s(literal 2 binary64))))","#s(approx (sqrt (/ (- (exp (* 2 x)) 1) (- (exp x) 1))) (fma.f64 (fma.f64 (/.f64 x (sqrt.f64 #s(literal 2 binary64))) (fma.f64 #s(literal 7/192 binary64) x #s(literal 3/16 binary64)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal 2 binary64)))) x (sqrt.f64 #s(literal 2 binary64))))"]],"link":["."],"memory":[[1874720,9995488]],"name":["sqrtexp (problem 3.4.4)"],"oracle":[63.08000710449284],"outputs":[["(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"repr":["binary64"],"time":17.637939453125,"times":[[5.64306640625,"x"],[4.6748046875,"(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64))))"],[5.470947265625,"(/.f64 (-.f64 (exp.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"egraph":[[8,6330,12,0.024211543],[7,2478,12,0.027132029],[6,724,12,0.01455219],[5,284,12,0.003512316],[4,111,14,0.000917579],[3,66,19,0.000500985],[2,38,19,0.000425042],[1,28,19,0.000337497],[0,15,19,0.000297292]],"inputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"memory":[[-7018832,11028864]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]],"stop":[["node limit",1]],"time":93.035888671875,"type":"simplify"},{"compiler":[[19,16],[2,3],[17,13]],"egraph":[[0,8367,129,0.279169642],[5,5961,156,0.029648641],[4,2567,163,0.024595291],[3,1446,173,0.010526111],[2,673,179,0.004891462],[1,252,179,0.003752337],[0,77,213,0.00088503],[0,8045,15,0.068328533],[3,5021,19,0.040998311],[2,429,19,0.015026403],[1,63,19,0.001549011],[0,17,33,0.000786495],[0,10,33,0.000132944]],"memory":[[1507216,1507216]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":750.22998046875,"type":"soundness"},{"compiler":[[19,16],[19,16],[12,10],[12,10]],"memory":[[-4545504,11214192]],"remove-preprocessing":[[],[],[]],"time":106.05810546875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.013916015625,"type":"end"}]