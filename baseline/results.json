{"branch":"varun10p-egglog-multi","commit":"debf1aed9e26cbfa45cab9e280b538180329feb3","date":1733877293,"flags":["rules:arithmetic","rules:polynomials","rules:fractions","rules:exponents","rules:trigonometry","rules:hyperbolic","rules:numerics","rules:special","rules:bools","rules:branches","generate:rr","generate:taylor","generate:simplify","generate:proofs","generate:egglog","localize:costs","localize:errors","reduce:regimes","reduce:binary-search","reduce:branch-expressions","setup:simplify","setup:search"],"hostname":"Varuns-MacBook-Pro-2.local","iterations":4,"merged-cost-accuracy":[[1.0,0.3693830693081688],[[0.8038109020758019,0.9767245062033731],[0.8405297599319123,0.9767066308970864],[0.8800952060680071,0.976683054918811],[0.8943545751645158,0.9766582863691281],[1.0025714848321698,0.9764750071862566],[1.0195139236669286,0.9764393637923646],[1.0210893092117967,0.976435685170852],[1.0353159664005362,0.9763717787122768],[1.0369830550865888,0.9763642719783141],[1.2134092325807984,0.9756570695520256],[1.2623425433392583,0.975475108205511],[1.3059336283296354,0.9752958766448209],[1.3536053435574937,0.9751013366049687],[1.3577274541131819,0.9750808554982819],[1.3638926293980975,0.9750503876739018],[1.4294870091680787,0.9746989914505371],[1.433375710259833,0.9746778787984042],[1.4734589095723174,0.9744391128719408],[1.4828226736284906,0.9743800388514527],[1.4901793287924023,0.974328085708234],[1.4941919029663118,0.9742968018643888],[1.5234850391070693,0.9740555906718057],[1.5701210501549097,0.9735625805652109],[1.5768904524602996,0.9734930987186504],[1.6734166270698128,0.9725355517704257],[1.6802081445723862,0.9724648298215597],[1.731921183222172,0.9718754892485301],[1.7814263546715416,0.9713091097272422],[1.787989207203645,0.9712314333821485],[1.7937689639246237,0.971162620807102],[1.795435939734878,0.9711421658940316],[1.7987792035337105,0.971100112319432],[1.800455508878565,0.9710760224137417],[1.81568404149452,0.9708507112565314],[1.8260214160381152,0.9706832187053113],[1.8371903744704223,0.9704981035907488],[1.8405141374363874,0.9704365673712184],[1.8630068591282964,0.97001738172439],[1.8725449701973433,0.9698293643279713],[1.879797729365844,0.9696875563561981],[1.882851023947928,0.9696231074625021],[1.8880926646528018,0.969499042020812],[1.8948826671902925,0.9693223126870867],[1.9010088384456434,0.9691443734368457],[1.9075437060561076,0.968948482575742],[1.9617677888453176,0.9672493154066918],[2.235914333756651,0.9594534532464067],[2.246262790840631,0.9590497193645415],[2.4003765854003394,0.9528909112215797],[2.5677416488339806,0.9468179592498736],[2.6572821659652024,0.9437552872949163],[2.8537383633126163,0.9375653209926413],[3.064697721576781,0.9315541572340802],[3.406794560627767,0.9200169993969984],[3.4391699572945833,0.9187828201947028],[3.448377687842279,0.9183917288758519],[3.6469254441376857,0.9080987556626434],[3.653473910863614,0.9077096382703984],[3.6668260570447644,0.9067378119416624],[3.904661869097167,0.8891765946601684],[4.007108562002662,0.879552508945975],[4.023176307078949,0.8776240604674831],[4.031571609034311,0.8765180276692863],[4.309845996593171,0.8413593418855492],[4.411977030260265,0.8294076667591802],[4.469819087793212,0.8226651389277218],[4.6224917620125,0.8054885517329935],[4.885872587505034,0.7734769458354591],[4.990646131411844,0.7615472458369483],[5.268902511695208,0.727249201657725],[5.432792582567921,0.7067912072327283],[5.596086603917973,0.6861973985108785],[5.8502683455147135,0.6529663345137502],[5.856179356680353,0.6518131017160782],[5.984250209831271,0.6232372689149729],[6.077291638824416,0.5883359050633348],[6.133702502830909,0.5549216629611846],[6.158456197583657,0.5379024310480203],[6.191348839606323,0.5068623595241231],[6.217788742846667,0.47388390634372535],[6.237864168107468,0.4440955408592969],[6.244584815427147,0.4110686241445938]]],"note":false,"points":256,"seed":"371008492","tests":[{"bits":64,"conversions":[],"cost-accuracy":[[13760,29.819788223122544],[6784,0.2989548906511418],[[22017,29.131460590516113,"(if (<=.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (sin.f64 x)) #s(literal 5764607523034235/288230376151711744 binary64)) (pow.f64 #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)) #s(literal -1 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))"],[7936,31.50525007015472,"(pow.f64 #s(approx (pow (tan (* x 1/2)) -1) (/.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal 2 binary64)) x)) #s(literal -1 binary64))"],[384,31.76865625908829,"#s(approx (/ (- 1 (cos x)) (sin x)) (*.f64 #s(literal 1/2 binary64) x))"]]],"end":0.2989548906511418,"end-est":0.34611137698974626,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (sin x))","link":"0-tanhfexample34","name":"tanhf (example 3.4)","output":"(tan.f64 (*.f64 #s(literal 1/2 binary64) x))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (sin x))","start":29.819788223122544,"start-est":29.310971754888417,"status":"eq-target","target":[[7168,0.2989548906511418]],"target-prog":"(((! :herbie-platform default (tan (/ x 2))) . #t))","time":9054.282958984375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14912,40.68919512136455],[7296,0.00725],[[704,18.452257998069722,"(sqrt.f64 #s(approx (/ (- (exp (* 2 x)) 1) (- (exp x) 1)) #s(literal 2 binary64)))"]]],"end":0.00725,"end-est":0.015625,"identifier":"#f","input":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","link":"1-sqrtexpproblem344","name":"sqrtexp (problem 3.4.4)","output":"(sqrt.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))","start":40.68919512136455,"start-est":43.66554512012142,"status":"imp-start","target":[],"target-prog":"()","time":7450.1259765625,"vars":["x"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,63.124120337423676],[2176,0.03953372647517105],[[1472,0.09559437464574413,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"],[768,0.2189065091289165,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"],[64,0.5699429322267444,"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]]],"end":0.03953372647517105,"end-est":0.21907111645009897,"identifier":"#f","input":"(/ (- eps (sin eps)) (- eps (tan eps)))","link":"2-sintanproblem345","name":"sintan (problem 3.4.5)","output":"#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","pre":"(and (<= -0.4 eps) (<= eps 0.4))","prec":"binary64","preprocess":"()","spec":"(/ (- eps (sin eps)) (- eps (tan eps)))","start":63.124120337423676,"start-est":62.4997601057073,"status":"gt-target","target":[[896,0.21890650912891912]],"target-prog":"(((! :herbie-platform default (- (* 9/40 eps eps) 1/2)) . #t))","time":21180.806884765625,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,30.86884607737723],[4098,9.21588240519539],[[3714,9.321743049910163,"(if (<=.f64 b #s(literal -44000000000000000627529338483176592262972319383580315981185024 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[3330,12.13777281281915,"(if (<=.f64 b #s(literal -3928516401145467/93536104789177786765035829293842113257979682750464 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) #s(approx (* (+ (* -4 a) (* (/ b c) b)) c) (*.f64 (*.f64 #s(literal -4 binary64) c) a)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))"],[2049,20.084139416558994,"(if (<=.f64 b #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))"],[1281,20.204472983207605,"(if (<=.f64 b #s(literal 2439637115471363/1161731959748268017810986326679609812602547032546401921137321765090578638406565916832162745700122148898280252961088260195667644723081957584211586391486245801392945969099578026517723757683045106929874371704962060317240428677248343818872733547147389127353160238636049931893566678761472 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))"],[1281,36.16415168798784,"(if (<=.f64 b #s(literal 45000000000000000 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b))))"],[768,56.865198992801766,"#s(approx (/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) #s(approx (* (neg b) (- (/ 1 a) (/ c (* b b)))) (/.f64 c b)))"]]],"end":9.21588240519539,"end-est":8.445666309044105,"identifier":"#f","input":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"3-quadpp42positive","name":"quadp (p42, positive)","output":"(if (<=.f64 b #s(literal -17000000000000000810065649207011672237788585470505538565037574920469479424 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))) (if (<=.f64 b #s(literal 3978585891278293/497323236409786642155382248146820840100456150797347717440463976893159497012533375533056 binary64)) (/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":30.86884607737723,"start-est":25.34226188210102,"status":"lt-target","target":[[18050,0.20351955000865368]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ (- sqtD (/ b 2)) a) (/ (- c) (+ (/ b 2) sqtD))))) . #t))","time":10884.373046875,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3200,30.978021929081354],[4995,8.724302991498957],[[4610,9.14403361659282,"(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3000000000000000124216469591213846409050312014092089967683834602291815406983585544088716834198144287435868859239419406512331498560169695228350527700992 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))"],[3842,9.156553448607879,"(if (<=.f64 b #s(literal -4676805239458889/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 20000000000000000311188322589336860485364027938421228667395411608616675623295114065299707798300948953524125617356800 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))"],[3458,12.148604316404034,"(if (<=.f64 b #s(literal -4022052505934645/187072209578355573530071658587684226515959365500928 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 3792089677624623/31082702275611665134711390509176302506278509424834232340028998555822468563283335970816 binary64)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) (neg.f64 a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))))"],[2049,20.09106046167672,"(if (<=.f64 b #s(literal -101201126653655/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))"],[1281,20.193137640795644,"(if (<=.f64 b #s(literal -621474992168035/42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))"],[896,41.5711600381269,"#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]]],"end":8.724302991498957,"end-est":8.038724130872074,"identifier":"#f","input":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","link":"4-quadmp42negative","name":"quadm (p42, negative)","output":"(if (<=.f64 b #s(literal -859999999999999936491468657600217890772731137178600753493704704 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal -4784610960462839/68351585149469122636640694597425667667286544715412888638305331450311031224980497600734786781970432 binary64)) (/.f64 #s(approx (+ (* b b) (+ (* (* c a) 4) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (if (<=.f64 b #s(literal 3000000000000000124216469591213846409050312014092089967683834602291815406983585544088716834198144287435868859239419406512331498560169695228350527700992 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))","start":30.978021929081354,"start-est":30.21638203730341,"status":"lt-target","target":[[18050,0.20372706875829302]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs (/ b 2)) x)) (sqrt (+ (fabs (/ b 2)) x))) (hypot (/ b 2) x))))) (if (< b 0) (/ c (- sqtD (/ b 2))) (/ (+ (/ b 2) sqtD) (- a))))) . #t))","time":9612.4638671875,"vars":["a","b","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,30.87852584648842],[3906,9.696363962487688],[[3202,9.421214353697232,"(if (<=.f64 b_2 #s(literal -3999999999999999775207243795178284096228896516082202126176495568225828864 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))"],[2818,12.285306629570957,"(if (<=.f64 b_2 #s(literal -1519771171239775/7237005577332262213973186563042994240829374041602535252466099000494570602496 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))"],[2818,12.367197782717659,"(if (<=.f64 b_2 #s(literal -1519771171239775/7237005577332262213973186563042994240829374041602535252466099000494570602496 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))"],[1473,20.193219809038816,"(if (<=.f64 b_2 #s(literal 6741349255733685/22471164185778948846616314884862809170224712236778832159178760144716584475687620391588559665300942002640014234983924169707348721101802077811605928829934265547220986678108185659537777450155761764931635369010625721104768835292807860184239138817603404645418813835573287279993405742309964538104419541203028017152 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))"],[1473,36.463468657664535,"(if (<=.f64 b_2 #s(literal 1113228446469867/166153499473114484112975882535043072 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2)))))"],[1088,57.097325038593766,"#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (*.f64 #s(literal 1/2 binary64) (/.f64 c b_2))))"]]],"end":9.696363962487688,"end-est":8.129449547455334,"identifier":"#f","input":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"5-quad2pproblem321positive","name":"quad2p (problem 3.2.1, positive)","output":"(if (<=.f64 b_2 #s(literal -219999999999999994501978431813987710737983990017906259551658523634958336 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (* (neg b_2) (+ (* (/ (/ c b_2) b_2) -1/2) (/ 2 a))) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))) (if (<=.f64 b_2 #s(literal 1639164757362759/215679573337205118357336120696157045389097155380324579848828881993728 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (-.f64 (*.f64 (/.f64 b_2 a) b_2) c) a))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":30.87852584648842,"start-est":30.16699886602001,"status":"lt-target","target":[[16642,0.22794467545836622]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ (- sqtD b_2) a) (/ (- c) (+ b_2 sqtD))))) . #t))","time":8916.284912109375,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2560,30.448876142572896],[3330,9.104537379851818],[[2946,12.229351900698033,"(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 336999333339383/26959946667150639794667015087019630673637144422540572481103610249216 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))"],[1473,20.196956993528644,"(if (<=.f64 b_2 #s(literal -1607262910779401/334846439745708537796382827831250565800439003657979252326171996365734703476542538279124493379904955664873335286735358382870982901778848138624518049209330462622955242963257218294408581408199098183686068192282702343236935664606211486223923248314908216080349889927704442739388432239144512088662677127168 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))"],[1473,20.27469966864408,"(if (<=.f64 b_2 #s(literal -1607262910779401/334846439745708537796382827831250565800439003657979252326171996365734703476542538279124493379904955664873335286735358382870982901778848138624518049209330462622955242963257218294408581408199098183686068192282702343236935664606211486223923248314908216080349889927704442739388432239144512088662677127168 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a))))"],[1088,41.61435881998175,"#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))"],[1088,57.02189274763275,"#s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) #s(approx (+ (* (/ 1/2 b_2) c) (* (/ b_2 a) -2)) (*.f64 (/.f64 #s(literal 1/2 binary64) b_2) c)))"]]],"end":9.104537379851818,"end-est":10.371879458982137,"identifier":"#f","input":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","link":"6-quad2mproblem321negative","name":"quad2m (problem 3.2.1, negative)","output":"(if (<=.f64 b_2 #s(literal -1942668892225729/121416805764108066932466369176469931665150427440758720078238275608681517825325531136 binary64)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2))) (if (<=.f64 b_2 #s(literal 2349999999999999886091180871200340651081460802722208784055707882345515516743359405520479062478911017213525193512958197352989227007082496 binary64)) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) #s(approx (/ (- (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (fma.f64 (/.f64 #s(literal 1/2 binary64) b_2) c (*.f64 (/.f64 b_2 a) #s(literal -2 binary64))))))","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)","start":30.448876142572896,"start-est":31.865488310583263,"status":"lt-target","target":[[16642,0.2113165600338999]],"target-prog":"(((! :herbie-platform default (let ((sqtD (let ((x (* (sqrt (fabs a)) (sqrt (fabs c))))) (if (== (copysign a c) a) (* (sqrt (- (fabs b_2) x)) (sqrt (+ (fabs b_2) x))) (hypot b_2 x))))) (if (< b_2 0) (/ c (- sqtD b_2)) (/ (+ b_2 sqtD) (- a))))) . #t))","time":8769.65087890625,"vars":["a","b_2","c"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13952,61.29177047020149],[13696,0.021304323438491594],[[3712,0.28764057380284425,"(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"],[1344,0.3473790563925644,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))"],[1216,0.3473790563925644,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"],[832,0.4576519617910859,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"],[256,0.6799772332997044,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"],[64,1.3772756002026298,"#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]]],"end":0.021304323438491594,"end-est":0.0234375,"identifier":"#f","input":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","link":"7-qlogexample310","name":"qlog (example 3.10)","output":"(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(/ (log (- 1.0 x)) (log (+ 1.0 x)))","start":61.29177047020149,"start-est":61.78379352143416,"status":"eq-target","target":[[13696,0.021304323438491594]],"target-prog":"(((! :herbie-platform default (/ (log1p (- x)) (log1p x))) . #t))","time":9627.798095703125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[14272,63.0087933696965],[6464,0.0],[[64,63.004364924457164,"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","link":"8-logsexample38","name":"logs (example 3.8)","output":"#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","pre":"(> n 6.8e+15)","prec":"binary64","preprocess":"()","spec":"(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)","start":63.0087933696965,"start-est":63.01608950605436,"status":"eq-target","target":[[16768,0.0]],"target-prog":"(((! :herbie-platform default (- (log (+ n 1)) (- (/ 1 (* 2 n)) (- (/ 1 (* 3 (* n n))) (/ 4 (pow n 3)))))) . #t))","time":7885.132080078125,"vars":["n"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7552,58.587003680936455],[2816,0.18949391959301598],[[2496,0.19608600934359194,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -2/7 binary64) (*.f64 eps eps) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"],[2112,0.24435977760055136,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))"],[1792,0.2506843506327183,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal -2/5 binary64) (*.f64 eps eps) #s(literal -2/3 binary64)) (*.f64 eps eps) #s(literal -2 binary64)) eps))"],[1408,0.33836742668622966,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 #s(literal -2/3 binary64) (*.f64 eps eps)) eps (*.f64 #s(literal -2 binary64) eps)))"],[1088,0.3437843832805766,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/3 binary64) #s(literal -2 binary64)) eps))"],[384,0.6755106685764661,"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (*.f64 #s(literal -2 binary64) eps))"],[64,60.55383251562954,"#s(literal 0 binary64)"]]],"end":0.18949391959301598,"end-est":0.00390625,"identifier":"#f","input":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","link":"9-logqproblem343","name":"logq (problem 3.4.3)","output":"#s(approx (log (/ (- 1 eps) (+ 1 eps))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -2/7 binary64) #s(literal -2/5 binary64)) (*.f64 eps eps) #s(literal -2/3 binary64)) eps) eps) eps (*.f64 #s(literal -2 binary64) eps)))","pre":"(< (fabs eps) 1.0)","prec":"binary64","preprocess":"()","spec":"(log (/ (- 1.0 eps) (+ 1.0 eps)))","start":58.587003680936455,"start-est":58.478599800950725,"status":"lt-target","target":[[13184,0.007625]],"target-prog":"(((! :herbie-platform default (- (log1p (- eps)) (log1p eps))) . #t))","time":9856.511962890625,"vars":["eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[8064,59.87029767952209],[1472,0.0727835771658228],[[768,0.37293022895232625,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) #s(literal 3 binary64))))"],[384,0.6917973653843064,"#s(approx (- (/ 1 x) (/ 1 (tan x))) (*.f64 #s(literal 1/3 binary64) x))"]]],"end":0.0727835771658228,"end-est":0.05629496479692215,"identifier":"#f","input":"(- (/ 1.0 x) (/ 1.0 (tan x)))","link":"10-invcotexample39","name":"invcot (example 3.9)","output":"#s(approx (- (/ 1 x) (/ 1 (tan x))) (/.f64 x #s(approx (/ 1 (+ (* 1/45 (* x x)) 1/3)) (fma.f64 #s(literal -1/5 binary64) (*.f64 x x) #s(literal 3 binary64)))))","pre":"(and (< -0.026 x) (< x 0.026))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 x) (/ 1.0 (tan x)))","start":59.87029767952209,"start-est":59.96997395783022,"status":"eq-target","target":[[8577,0.08578813277447857]],"target-prog":"(((! :herbie-platform default (if (< (fabs x) 13/500) (* (/ x 3) (+ 1 (/ (* x x) 15))) (- (/ 1 x) (/ 1 (tan x))))) . #t))","time":16603.06787109375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[22336,63.995470365396955],[1664,0.14725],[[6913,26.479637984285212,"(if (<=.f64 a #s(literal -962387809749089/740298315191606967520227188330889966610377319868419938630605715764070011466206019559325413145373572325939050053182159998975553533608824916574615132828322000124194610605645134711392062011527273571616649243219599128195212771328 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64))))"],[6528,32.46361222081178,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))"],[1664,0.14759436093777042,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))"],[64,62.69049402213541,"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))"]]],"end":0.14725,"end-est":0.14453125,"identifier":"#f","input":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","link":"11-expq3problem342","name":"expq3 (problem 3.4.2)","output":"#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","pre":"(and (and (<= (fabs a) 710.0) (<= (fabs b) 710.0)) (and (<= (* 1e-27 (fmin (fabs a) (fabs b))) eps) (<= eps (fmin (fabs a) (fabs b)))))","prec":"binary64","preprocess":"()","spec":"(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))","start":63.995470365396955,"start-est":64.0,"status":"lt-target","target":[[1664,0.029649959043104544]],"target-prog":"(((! :herbie-platform default (+ (/ 1 a) (/ 1 b))) . #t))","time":20613.56103515625,"vars":["a","b","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13760,39.996833272844995],[7296,0.011530117545401012],[[14593,5.404354787037103,"(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[13889,10.415095681981857,"(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))"],[8578,2.965874035354353,"(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -3715469692580659/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))"],[8578,2.9661322400571835,"(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -15/4 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 x x)) (+.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))"],[8578,3.759303730745723,"(if (<=.f64 x #s(literal -10500000000000000815831766655872649178879125871197860277834278179049830808884244966648174743689294249984 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (if (<=.f64 x #s(literal -3996944669291315/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (+.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))"],[6528,21.106740609313622,"#s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64)))"],[2240,5.499838260828589,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[2112,6.212745086142438,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))"],[1856,7.241351041923671,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"],[1472,10.697130715381274,"(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))"],[384,61.86062300467991,"#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))"],[64,61.90502309496198,"#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]]],"end":0.011530117545401012,"end-est":0.00390625,"identifier":"#f","input":"(/ (exp x) (- (exp x) 1.0))","link":"12-expq2section311","name":"expq2 (section 3.11)","output":"(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","pre":"(> 710.0 x)","prec":"binary64","preprocess":"()","spec":"(/ (exp x) (- (exp x) 1.0))","start":39.996833272844995,"start-est":37.10539756501055,"status":"eq-target","target":[[7424,0.011530117545401012]],"target-prog":"(((! :herbie-platform default (/ (- 1) (expm1 (- x)))) . #t))","time":8963.35693359375,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6656,58.380202586803655],[6464,0.0],[[1536,0.3211829567566959,"#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))"],[1536,0.33255539245673404,"#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"],[1152,0.4603789671645635,"#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))"],[1152,0.4702312158074935,"#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"],[768,0.7144988525821911,"#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))"],[768,0.7216886103818864,"#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"],[384,1.4379899688845719,"#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))"],[256,60.535378068157165,"(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]]],"end":0.0,"end-est":0.0,"identifier":"#f","input":"(- (exp x) 1.0)","link":"13-expm1example37","name":"expm1 (example 3.7)","output":"(expm1.f64 x)","pre":"(<= (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(- (exp x) 1.0)","start":58.380202586803655,"start-est":59.33499229241797,"status":"eq-target","target":[[6464,0.0]],"target-prog":"(((! :herbie-platform default (expm1 x)) . #t))","time":5838.43212890625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[6976,29.655431981978804],[6784,0.013171142153731611],[[14080,17.975147225827836,"(pow.f64 #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64))"],[2241,20.09375508974865,"(if (<=.f64 (*.f64 a x) #s(literal -100000000 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64)) #s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)))"],[2112,20.30477183097379,"#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))"],[384,20.68775798620427,"#s(approx (- (exp (* a x)) 1) (*.f64 x a))"],[256,51.18622157459491,"(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]]],"end":0.013171142153731611,"end-est":0.014003759768442016,"identifier":"#f","input":"(- (exp (* a x)) 1.0)","link":"14-expaxsection35","name":"expax (section 3.5)","output":"(expm1.f64 (*.f64 x a))","pre":"(> 710.0 (* a x))","prec":"binary64","preprocess":"()","spec":"(- (exp (* a x)) 1.0)","start":29.655431981978804,"start-est":30.278599605528413,"status":"eq-target","target":[[6784,0.013171142153731611]],"target-prog":"(((! :herbie-platform default (expm1 (* a x))) . #t))","time":8948.6279296875,"vars":["a","x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13376,29.047505562912825],[15424,0.5475271150944411],[[9280,0.5482686217848052,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (fma.f64 (*.f64 (*.f64 x x) (*.f64 x x)) #s(literal 1/12 binary64) (*.f64 x x))))"],[8640,0.5471945982849594,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/20160 binary64) (*.f64 x x) #s(literal 1/360 binary64)) (*.f64 x x) #s(literal 1/12 binary64)) x) x))"],[2432,0.6110675601392813,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (*.f64 (fma.f64 #s(literal 1/360 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (*.f64 x x)) (*.f64 x x) (*.f64 x x)))"],[1408,0.7355790291758172,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 x x) #s(literal 1 binary64)) (*.f64 x x)))"],[384,1.0725062035582982,"#s(approx (+ (- (exp x) 2) (exp (neg x))) (*.f64 x x))"]]],"end":0.5475271150944411,"end-est":0.27007111393323374,"identifier":"#f","input":"(+ (- (exp x) 2.0) (exp (- x)))","link":"15-exp2problem337","name":"exp2 (problem 3.3.7)","output":"#s(approx (+ (- (exp x) 2) (exp (neg x))) (fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/20160 binary64) #s(literal 1/12 binary64)) (*.f64 (*.f64 x x) (*.f64 x x)) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/360 binary64) (*.f64 x x))))","pre":"(<= (fabs x) 710.0)","prec":"binary64","preprocess":"()","spec":"(+ (- (exp x) 2.0) (exp (- x)))","start":29.047505562912825,"start-est":30.67709675734507,"status":"lt-target","target":[[14912,0.04184718125612981]],"target-prog":"(((! :herbie-platform default (* 4 (* (sinh (/ x 2)) (sinh (/ x 2))))) . #t))","time":12164.408935546875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[7680,31.109183581328043],[14912,0.20227190078597854],[[14912,0.5451259574008422,"(/.f64 (tan.f64 (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (/.f64 x (sin.f64 x))))"],[13825,16.492310423036873,"(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (*.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 x))))"],[8449,16.494754344749367,"(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) x) x))"],[8065,16.66856746387193,"(if (<=.f64 x #s(literal 3170534137668829/576460752303423488 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) (fma.f64 (*.f64 x x) #s(literal -1/24 binary64) #s(literal 1/2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 x x)))"],[1665,23.83602865797229,"(if (<=.f64 x #s(literal 130000000000000009331693572985691597674199002984591404980029211519262914510848 binary64)) #s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) #s(approx (cos x) #s(literal 1 binary64))) (*.f64 x x)))"],[1472,14.172456892016784,"(/.f64 #s(literal -1 binary64) #s(approx (/ (* x x) (- (cos x) 1)) (fma.f64 #s(literal -1/6 binary64) (*.f64 x x) #s(literal -2 binary64))))"],[64,31.418818491851166,"#s(approx (/ (- 1 (cos x)) (* x x)) #s(literal 1/2 binary64))"]]],"end":0.20227190078597854,"end-est":0.19472509768442017,"identifier":"#f","input":"(/ (- 1.0 (cos x)) (* x x))","link":"16-cos2problem341","name":"cos2 (problem 3.4.1)","output":"(/.f64 (*.f64 (/.f64 (sin.f64 x) x) (tan.f64 (*.f64 #s(literal 1/2 binary64) x))) x)","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(/ (- 1.0 (cos x)) (* x x))","start":31.109183581328043,"start-est":33.81497200573726,"status":"imp-start","target":[],"target-prog":"()","time":9825.4140625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[2944,19.458374406863435],[2048,0.12148120312590147],[[1856,0.11621936093777045,"(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)"],[1472,0.5199769546585513,"(/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))"],[1408,1.2208125980393003,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (*.f64 (*.f64 x x) x)))"],[1152,29.849554384087128,"(/.f64 #s(approx (/ (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) (- x 1)) #s(literal -2 binary64)) (fma.f64 x x x))"],[768,60.770879280893006,"#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]]],"end":0.12148120312590147,"end-est":0.140625,"identifier":"#f","input":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","link":"17-3fracproblem333","name":"3frac (problem 3.3.3)","output":"(/.f64 (/.f64 #s(approx (+ (* 1 (* (+ x 1) x)) (* (- x 1) (- x (* 2 (+ x 1))))) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","pre":"(> (fabs x) 1.0)","prec":"binary64","preprocess":"()","spec":"(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))","start":19.458374406863435,"start-est":21.974516273377972,"status":"gt-target","target":[[1600,0.5197269546585513]],"target-prog":"(((! :herbie-platform default (/ 2 (* x (- (* x x) 1)))) . #t))","time":8701.55810546875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,24.005051085852365],[40320,0.02060620312590145],[[20480,0.06285435619542791,"(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))"],[13248,0.6947107245634697,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))"],[8000,0.6925563884651719,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))"],[1792,1.0947102654169956,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))"],[960,1.120424928687485,"#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))"],[768,1.1570801329098015,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))"],[704,60.34131488565771,"#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))"]]],"end":0.02060620312590145,"end-est":0.01171875,"identifier":"#f","input":"(- (tan (+ x eps)) (tan x))","link":"18-2tanproblem332","name":"2tan (problem 3.3.2)","output":"(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (tan (+ x eps)) (tan x))","start":24.005051085852365,"start-est":23.52383671621046,"status":"gt-target","target":[[13696,0.6902530466274134]],"target-prog":"(((! :herbie-platform default (+ eps (* eps (tan x) (tan x)))) . #t))","time":13617.083984375,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1728,59.60323439895195],[8192,0.2683962406251803],[[7488,1.4105573509703686,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (*.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))"],[1408,1.5357029885342834,"#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))"],[1216,61.14831190824517,"(-.f64 #s(approx (sqrt (+ x 1)) #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))) (sqrt.f64 x))"],[896,62.99779815770258,"(-.f64 #s(approx (sqrt (+ x 1)) #s(literal 1 binary64)) (sqrt.f64 x))"]]],"end":0.2683962406251803,"end-est":0.28515625,"identifier":"#f","input":"(- (sqrt (+ x 1.0)) (sqrt x))","link":"19-2sqrtexample31","name":"2sqrt (example 3.1)","output":"(pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (sqrt (+ x 1.0)) (sqrt x))","start":59.60323439895195,"start-est":60.53734934116664,"status":"gt-target","target":[[6848,1.2880141476707918]],"target-prog":"(((! :herbie-platform default (* 1/2 (pow x -1/2))) . #t))","time":8428.05712890625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,24.006164801635226],[111232,0.12992369904443773],[[30080,0.1265368569884572,"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (fma.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)))))"],[9920,0.1585694058543979,"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) #s(approx (cos (- (* -1/2 eps) x)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x)))))"],[9344,0.1720214731154531,"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3840 binary64) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))"],[8512,0.20872361629801076,"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (fma.f64 #s(literal 1/2 binary64) eps x))))"],[7936,0.3607510353720954,"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (cos.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) eps) x))))"],[6784,0.6666190508290116,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 (cos.f64 x) eps))"],[2496,1.0305334088077998,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) x) x #s(literal 1 binary64))) eps))"],[1280,1.0921977273158463,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 eps (+.f64 x eps)) eps)))"],[1088,1.135366838312945,"#s(approx (- (sin (+ x eps)) (sin x)) #s(approx (* (+ (* (* (sin x) -1/2) eps) (cos x)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(approx (* eps (+ x eps)) (*.f64 x eps)) eps)))"],[384,1.452065804348799,"#s(approx (- (sin (+ x eps)) (sin x)) (*.f64 #s(approx (cos x) #s(literal 1 binary64)) eps))"]]],"end":0.12992369904443773,"end-est":0.01953125,"identifier":"#f","input":"(- (sin (+ x eps)) (sin x))","link":"20-2sinexample33","name":"2sin (example 3.3)","output":"(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) #s(literal 2 binary64)) #s(approx (cos (/ (+ (* 2 x) eps) -2)) (/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal -1/2 binary64))) (cos.f64 x)) (*.f64 (sin.f64 (*.f64 eps #s(literal -1/2 binary64))) (sin.f64 x))))))))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (sin (+ x eps)) (sin x))","start":24.006164801635226,"start-est":23.518393743639827,"status":"eq-target","target":[[14656,0.05722301511733419]],"target-prog":"(((! :herbie-platform default (* (cos (* 1/2 (- eps (* -2 x)))) (sin (* 1/2 eps)) 2)) . #t))","time":13082.035888671875,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[],"end":false,"end-est":false,"identifier":"#f","input":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","link":"21-2nthrtproblem346","name":"2nthrt (problem 3.4.6)","output":"#f","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))","start":false,"start-est":false,"status":"crash","target":false,"target-prog":"()","time":22241.56298828125,"vars":["x","n"],"warnings":["ground-truth"]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,48.85327529030812],[22977,0.3321452143767386],[[22977,0.37412882838473616,"(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64))) (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))"],[9408,2.0480693455952617,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)))"],[8512,2.174803077963399,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N)))) #s(literal -1 binary64)))"],[7616,4.439107204741207,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)) #s(literal -1 binary64)))"],[6720,4.439982204741208,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)))"],[6528,9.859007666806285,"#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))"],[2560,3.189755180111356,"#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))"]]],"end":0.3321452143767386,"end-est":0.2613980090895186,"identifier":"#f","input":"(- (log (+ N 1.0)) (log N))","link":"22-2logproblem336","name":"2log (problem 3.3.6)","output":"(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64))) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))))","pre":"(and (> N 1.0) (< N 1e+40))","prec":"binary64","preprocess":"()","spec":"(- (log (+ N 1.0)) (log N))","start":48.85327529030812,"start-est":50.26155543382157,"status":"gt-target","target":[[23808,2.382816178903074]],"target-prog":"(((! :herbie-platform default (+ (/ 1 N) (/ -1 (* 2 (pow N 2))) (/ 1 (* 3 (pow N 3))) (/ -1 (* 4 (pow N 4))))) . #t))","time":10723.094970703125,"vars":["N"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[3136,39.39987595128015],[5056,0.49181092859479975],[[8320,1.544618571315262,"(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"],[5248,0.6949391610837604,"(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (*.f64 x x)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"],[2688,0.8404266800099279,"(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))"],[2112,1.5916073591264113,"(/.f64 #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt (+ x 1))) (/.f64 #s(literal 1/2 binary64) x)) (sqrt.f64 x))"],[1728,40.48307600844534,"#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))"],[1088,58.95640512750785,"(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) #s(literal -1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (*.f64 #s(literal -2 binary64) x)))"]]],"end":0.49181092859479975,"end-est":0.4842340332848187,"identifier":"#f","input":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","link":"23-2isqrtexample36","name":"2isqrt (example 3.6)","output":"(/.f64 (/.f64 (neg.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))","start":39.39987595128015,"start-est":38.9638767072099,"status":"gt-target","target":[[13376,39.375905518559875]],"target-prog":"(((! :herbie-platform default (- (pow x -1/2) (pow (+ x 1) -1/2))) . #t))","time":10179.261962890625,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[1856,14.564236993149562],[7424,0.076625],[[34306,1.287781725398934,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))))"],[34114,1.3936923113655502,"(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))"],[1152,0.4050612957057838,"(/.f64 #s(literal -1 binary64) (fma.f64 x x x))"],[768,31.185505548658952,"#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]]],"end":0.076625,"end-est":0.078125,"identifier":"#f","input":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","link":"24-2fracproblem331","name":"2frac (problem 3.3.1)","output":"(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x)","pre":"(TRUE)","prec":"binary64","preprocess":"()","spec":"(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))","start":14.564236993149562,"start-est":12.75117014585507,"status":"gt-target","target":[[1280,0.40708253633096403]],"target-prog":"(((! :herbie-platform default (/ 1 (* x (- -1 x)))) . #t))","time":6584.824951171875,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,30.494219760951815],[14208,0.19204008016159516],[[9920,0.2939481825208438,"(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"],[9216,0.3065604539285531,"(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"],[8512,0.3443943265506825,"(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"],[8000,0.7784369493715351,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))"],[5632,1.1721349501501088,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))"],[4992,1.1649591641053525,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))"],[3904,1.4055894696537699,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"],[2816,1.405597382928,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"],[1920,1.4004926334197063,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"],[1600,1.5159850509227855,"#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))"],[1408,13.493126033406913,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))"],[512,13.59859492489631,"#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]]],"end":0.19204008016159516,"end-est":0.19977510235280851,"identifier":"#f","input":"(- (cos (+ x eps)) (cos x))","link":"25-2cosproblem335","name":"2cos (problem 3.3.5)","output":"(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","pre":"(and (and (and (<= -10000.0 x) (<= x 10000.0)) (< (* 1e-16 (fabs x)) eps)) (< eps (fabs x)))","prec":"binary64","preprocess":"()","spec":"(- (cos (+ x eps)) (cos x))","start":30.494219760951815,"start-est":31.91947982633915,"status":"gt-target","target":[[27392,0.45995275016740056]],"target-prog":"(((! :herbie-platform default (pow (cbrt (* -2 (sin (* 1/2 (fma 2 x eps))) (sin (* 1/2 eps)))) 3)) . #t))","time":17467.47216796875,"vars":["x","eps"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,59.427965468010946],[20352,1.8032334317825225],[[14337,4.901995858931363,"(if (<=.f64 x #s(literal 320000000000000011823214620178632493113893754554966030461528913668817397099111027110928419510573066478288376117991445354058784107186348933473478158344781824 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))"],[13953,4.913626202109002,"(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal 1/3 binary64))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))"],[13632,1.8476186728142276,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 3 binary64)))"],[13632,1.9276012123933461,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 (cbrt.f64 x) #s(literal 2 binary64))))"],[13248,1.9229786784964606,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 (cbrt.f64 x) #s(literal -2 binary64)) #s(literal 1/3 binary64)))"],[7873,4.967886245434318,"(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (cbrt.f64 (*.f64 x x)))) #s(approx (- (cbrt (+ x 1)) (cbrt x)) (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 2/3 binary64)))))"],[6848,7.17953537594805,"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (pow.f64 x #s(literal -2/3 binary64)) #s(literal 1/3 binary64)))"],[6656,60.560286324043936,"(+.f64 (cbrt.f64 x) #s(approx (cbrt (+ x 1)) #s(literal 1 binary64)))"]]],"end":1.8032334317825225,"end-est":1.1179763057319239,"identifier":"#f","input":"(- (cbrt (+ x 1.0)) (cbrt x))","link":"26-2cbrtproblem334","name":"2cbrt (problem 3.3.4)","output":"#s(approx (- (cbrt (+ x 1)) (cbrt x)) (*.f64 (/.f64 #s(literal 1/3 binary64) (cbrt.f64 x)) #s(approx (pow (cbrt x) -1) (cbrt.f64 (pow.f64 x #s(literal -1 binary64))))))","pre":"(and (> x 1.0) (< x 1e+308))","prec":"binary64","preprocess":"()","spec":"(- (cbrt (+ x 1.0)) (cbrt x))","start":59.427965468010946,"start-est":60.29627493697794,"status":"lt-target","target":[[41088,0.6061173000519285]],"target-prog":"(((! :herbie-platform default (/ 1 (+ (* (cbrt (+ x 1)) (cbrt (+ x 1))) (* (cbrt x) (cbrt (+ x 1))) (* (cbrt x) (cbrt x))))) . #t))","time":7844.10205078125,"vars":["x"],"warnings":[]},{"bits":64,"conversions":[],"cost-accuracy":[[13248,58.503275413705246],[7104,0.26539624062518025],[[7104,0.2791911656266226,"(atan2.f64 #s(literal 1 binary64) (+.f64 (fma.f64 N N #s(literal 1 binary64)) N))"],[6912,2.247407014993763,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) (fma.f64 N N N)))"],[6848,4.314000188422114,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) (*.f64 N N)))"],[6720,58.94117395408672,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) (-.f64 N #s(literal -1 binary64))))"],[6528,59.937808359245835,"(atan2.f64 #s(literal 1 binary64) #s(approx (+ (* (+ 1 N) N) 1) #s(literal 1 binary64)))"]]],"end":0.26539624062518025,"end-est":0.2109375,"identifier":"#f","input":"(- (atan (+ N 1.0)) (atan N))","link":"27-2atanexample35","name":"2atan (example 3.5)","output":"(atan2.f64 #s(literal 1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)))","pre":"(and (> N 1.0) (< N 1e+100))","prec":"binary64","preprocess":"()","spec":"(- (atan (+ N 1.0)) (atan N))","start":58.503275413705246,"start-est":58.43772680490561,"status":"eq-target","target":[[7104,0.26539624062518025]],"target-prog":"(((! :herbie-platform default (atan2 1 (fma N (+ 1 N) 1))) . #t))","time":6663.94677734375,"vars":["N"],"warnings":[]}]}