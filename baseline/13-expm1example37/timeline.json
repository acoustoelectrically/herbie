[{"memory":[[9296,9296]],"time":0.02490234375,"type":"start"},{"compiler":[[9,6]],"memory":[[68016,68016]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0,"valid":0.49951171875}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":0.29296875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[8924752,161111760]],"mixsample":[[74.6455078125,"ival-fabs",0],[7.563720703125,"exact",0],[36.5302734375,"ival-<=",0],[101.587646484375,"ival-expm1",0],[5.0361328125,"ival-assert",0]],"outcomes":[[420.760498046875,0,"valid",8256]],"time":667.888916015625,"type":"sample"},{"compiler":[[4,4],[10,6],[10,6]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",256,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",256,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-9020560,24330672]],"mixsample":[[0.80712890625,"ival-true",0],[6.45947265625,"ival-exp",0],[5.45947265625,"ival-expm1",0],[0.385986328125,"exact",0],[0.273193359375,"ival-assert",0]],"outcomes":[[28.731201171875,0,"valid",512]],"time":72.300048828125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[4,4]],"egraph":[[0,12,2,0.000127247],[2,12,4,0.000124605],[1,11,4,0.00012794],[0,6,4,0.000236793],[0,4,4,0.000111503],[9,138,10,0.00124983],[8,136,10,0.000923709],[7,124,10,0.001135117],[6,109,10,0.001076353],[5,91,10,0.000884602],[4,70,10,0.000728162],[3,54,10,0.000602256],[2,35,10,0.000325294],[1,17,11,0.000199837],[0,6,11,0.000182127]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[-2654160,5350960]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":31.72314453125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06689453125,"type":"eval"},{"alts":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","next",59.33499229241797,"binary64"]],"compiler":[[4,4]],"memory":[[300256,300256]],"time":0.694091796875,"type":"prune"},{"egraph":[[0,12,6,0.000105656],[2,12,8,6.98e-5],[1,11,8,7.8125e-5],[0,6,8,0.000156705],[0,4,8,0.000118122]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[462464,462464]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":7.617919921875,"type":"simplify"},{"compiler":[[10,6]],"locations":[["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",59.33499229241797]],"memory":[[5256224,5256224]],"mixsample":[[0.26806640625,"ival-true",0],[4.013427734375,"ival-exp",0],[3.706787109375,"ival-expm1",0],[0.26611328125,"exact",0],[0.14306640625,"ival-assert",0]],"outcomes":[[16.801025390625,0,"valid",256]],"time":23.220947265625,"type":"localize"},{"count":[[2,10]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[290192,290192]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"series":[[0.198974609375,"((- (exp x) 1) (exp x))","x","-inf"],[0.218017578125,"((- (exp x) 1) (exp x))","x","inf"],[0.696044921875,"((- (exp x) 1) (exp x))","x","0"]],"time":1.48193359375,"type":"series"},{"count":[[10,9]],"egraph":[[0,725,53,0.004687738],[6,725,66,0.002968818],[5,720,66,0.00390925],[4,587,66,0.003528265],[3,371,66,0.0038401],[2,168,66,0.001651306],[1,77,66,0.000651741],[0,25,66,0.000321754]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"memory":[[-4639280,3482448]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (exp x) 1)","(expm1.f64 x)","(exp x)","(exp.f64 x)"]],"stop":[["iter limit",1],["saturated",1]],"time":36.703125,"type":"simplify"},{"count":[[2,84]],"egraph":[[0,1145,4,0.005958659],[2,130,6,0.003066159],[1,24,6,0.000607238],[0,6,6,0.000546647],[0,4,6,6.0131e-5]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[4321920,12234368]],"outputs":[["(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 x)))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (exp.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 x)","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":112.889892578125,"type":"rewrite"},{"compiler":[[1818,254]],"memory":[[39712,8926448]],"time":16.633056640625,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",59.50020548080798,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",59.57102086813989,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","fresh",59.6713287278643,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","next",60.61244554334932,"binary64"],["(expm1.f64 x)","next",0.0,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",0.15056425497462814,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",0.2238943130811325,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","next",0.30480720975695796,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[2,2],[17,13],[14,11],[11,9],[15,10],[12,8],[8,6],[6,5],[2,2],[17,13],[14,11],[11,9]],"count":[[94,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[93,8],"picked":[1,0]}],"memory":[[-1728768,6285712]],"min-error":[[0.0,"binary64"]],"time":6.339111328125,"type":"prune"},{"egraph":[[0,756,125,0.003753105],[6,756,125,0.002638332],[5,702,125,0.003091083],[4,442,125,0.00288896],[3,206,125,0.001392149],[2,99,125,0.000707965],[1,59,125,0.000420933],[0,38,125,0.00040524],[0,22,125,0.000248918]],"inputs":[["(expm1.f64 x)","x","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","cost-diff",0],["#s(approx (exp x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(expm1.f64 x)","cost-diff",0]],"memory":[[-4791568,3419472]],"method":["egg-herbie"],"outputs":[["(expm1.f64 x)","x","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":26.762939453125,"type":"simplify"},{"compiler":[[117,24]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.00390625],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.01953125],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.1349392373272898],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.015625],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.2082693130811325],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","accuracy",0.01171875],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","accuracy",0.29308845975695796],["#s(approx (exp x) #s(literal 1 binary64))","accuracy",0.8293914137105682],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","accuracy",59.33499229241797],["(expm1.f64 x)","accuracy",0.0]],"memory":[[5682224,22209040]],"mixsample":[[0.26708984375,"ival-true",0],[2.977783203125,"ival-exp",0],[8.62890625,"ival-add",0],[15.430419921875,"ival-mult",0],[7.290283203125,"const",0],[2.7373046875,"ival-expm1",0],[0.276123046875,"exact",0],[0.120849609375,"ival-assert",0]],"outcomes":[[54.2060546875,0,"valid",256]],"time":73.530029296875,"type":"localize"},{"count":[[15,47]],"inputs":[["(expm1.f64 x)","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[-4939200,2745536]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(exp x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))"]],"series":[[1.93017578125,"((- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","-inf"],[2.526123046875,"((- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","inf"],[1.307861328125,"((- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","0"]],"time":8.282958984375,"type":"series"},{"count":[[47,46]],"egraph":[[0,8448,289,0.078619061],[4,5784,347,0.024288549],[3,3294,347,0.017506367],[2,870,349,0.009380773],[1,312,357,0.003390392],[0,89,361,0.000985827]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(exp x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))"]],"memory":[[4073632,36928064]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(- (exp x) 1)","(expm1.f64 x)","(exp x)","(exp.f64 x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":217.12890625,"type":"simplify"},{"count":[[15,456]],"egraph":[[0,8307,111,0.098820712],[2,1092,111,0.03707155],[1,150,111,0.006070557],[0,38,111,0.002005127],[0,22,111,0.000304548]],"inputs":[["(expm1.f64 x)","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[2791696,59950016]],"outputs":[["(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (expm1.f64 (*.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 x)","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64))) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) #s(literal 1 binary64)))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))) (-.f64 x (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)","(+.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x)","(+.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(+.f64 x (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))) (-.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (*.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(+.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (pow.f64 (*.f64 x #s(literal 1/12 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal -1/8 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 4 binary64)) #s(literal 1/1296 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 6 binary64)) #s(literal 1/46656 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/1296 binary64) (pow.f64 (*.f64 x #s(literal 1/144 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 6 binary64)) #s(literal 1/46656 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 9 binary64)) #s(literal 1/10077696 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/46656 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2985984 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)) (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":346.900146484375,"type":"rewrite"},{"compiler":[[14400,2116]],"memory":[[4971248,51011648]],"time":73.73388671875,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",59.50020548080798,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",59.57102086813989,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","next",59.6713287278643,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.61244554334932,"binary64"],["(expm1.f64 x)","done",0.0,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","next",0.1349392373272898,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","next",0.2082693130811325,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","next",0.29308845975695796,"binary64"],["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","next",28.148118121850285,"binary64"],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","fresh",60.274492680674285,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[2,2],[17,12],[14,10],[11,8],[46,17],[16,12],[15,10],[12,8],[8,6],[17,12],[14,10],[11,8],[46,17],[16,12]],"count":[[497,10]],"kept":[{"done":[0,0],"fresh":[3,3],"new":[489,5],"picked":[5,2]}],"memory":[[-3363232,23580208]],"min-error":[[0.0,"binary64"]],"time":16.876953125,"type":"prune"},{"egraph":[[0,8539,243,0.068831579],[4,3543,252,0.021836145],[3,599,254,0.009092066],[2,191,258,0.00192598],[1,98,258,0.000833724],[0,51,259,0.000592769],[0,29,318,0.000354365]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 x x)","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)"]],"locations":[["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","cost-diff",0],["(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","cost-diff",1],["(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","cost-diff",4],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","cost-diff",24],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","cost-diff",0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","cost-diff",0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","cost-diff",0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","cost-diff",0]],"memory":[[-118768,36251792]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) (neg.f64 x)) x)","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 x x)","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":226.875,"type":"simplify"},{"compiler":[[276,30]],"locations":[["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","accuracy",0.01171875],["(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","accuracy",0.10546875],["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","accuracy",0.1349392373272898],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","accuracy",28.017085080345915],["(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","accuracy",0.00390625],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","accuracy",0.2082693130811325],["(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","accuracy",0.0],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","accuracy",0.29308845975695796],["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","accuracy",0.3121657208357953],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","accuracy",59.33499229241797],["(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","accuracy",0.0],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.00390625],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","accuracy",0.01171875],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","accuracy",0.1349392373272898]],"memory":[[-3885152,29989936]],"mixsample":[[2.189697265625,"ival-div",0],[12.033447265625,"ival-add",0],[3.332763671875,"ival-exp",0],[23.005126953125,"ival-mult",0],[3.28515625,"ival-expm1",0],[0.1435546875,"ival-assert",0],[2.718505859375,"ival-sub",0],[0.27734375,"ival-true",0],[8.103759765625,"const",0],[0.38671875,"exact",0]],"outcomes":[[79.11865234375,0,"valid",256]],"time":106.923095703125,"type":"localize"},{"count":[[19,58]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[3665136,3665136]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/4 (pow x 4))","(* (pow x 4) (+ 1/4 (* 1/6 x)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* 5/72 x)))))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* x (+ 5/72 (* 1/72 x)))))))","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* 1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))) 1))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* x (+ 1 (/ 1 x)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/576 (pow x 8))","(* (pow x 8) (+ 1/576 (* 1/72 (/ 1 x))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(* (pow x 4) (- (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))) (/ 1 (pow x 3))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 8) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (- 1/2 (/ 1 x)) x)) 1/6) x))))"]],"series":[[2.535888671875,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (+ (* (* 1/2 x) x) x) (* 1/2 x) (- (exp x) 1) (+ (* (* (+ (* 1/6 x) 1/2) x) x) x) (* (+ (* 1/6 x) 1/2) x) (+ (* 1/6 x) 1/2) (/ (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x)) (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (- (exp x) 1) (+ (* 1/24 x) 1/6))","x","-inf"],[3.057861328125,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (+ (* (* 1/2 x) x) x) (* 1/2 x) (- (exp x) 1) (+ (* (* (+ (* 1/6 x) 1/2) x) x) x) (* (+ (* 1/6 x) 1/2) x) (+ (* 1/6 x) 1/2) (/ (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x)) (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (- (exp x) 1) (+ (* 1/24 x) 1/6))","x","inf"],[2.85302734375,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (+ (* (* 1/2 x) x) x) (* 1/2 x) (- (exp x) 1) (+ (* (* (+ (* 1/6 x) 1/2) x) x) x) (* (+ (* 1/6 x) 1/2) x) (+ (* 1/6 x) 1/2) (/ (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x)) (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (- (exp x) 1) (+ (* 1/24 x) 1/6))","x","0"]],"time":10.089111328125,"type":"series"},{"count":[[58,57]],"egraph":[[0,8345,425,0.127885926],[3,4489,479,0.030466963],[2,1250,495,0.018504026],[1,482,500,0.004962354],[0,142,505,0.001927047]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/4 (pow x 4))","(* (pow x 4) (+ 1/4 (* 1/6 x)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* 5/72 x)))))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* x (+ 5/72 (* 1/72 x)))))))","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* 1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))) 1))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* x (+ 1 (/ 1 x)))","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/576 (pow x 8))","(* (pow x 8) (+ 1/576 (* 1/72 (/ 1 x))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(* (pow x 4) (- (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))) (/ 1 (pow x 3))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 8) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (- 1/2 (/ 1 x)) x)) 1/6) x))))"]],"memory":[[7661824,50650304]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))","(* (pow x 4) (+ 1/4 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* 5/72 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* x (+ 5/72 (* 1/72 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/72 binary64) x #s(literal 5/72 binary64)) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* 1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(- (exp x) 1)","(expm1.f64 x)","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)) x)","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(exp x)","(exp.f64 x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 1/576 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/576 binary64))","(* (pow x 8) (+ 1/576 (* 1/72 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/72 binary64) x) #s(literal 1/576 binary64)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 5/72 binary64) (*.f64 x x)) #s(literal 1/576 binary64)) (/.f64 #s(literal 1/72 binary64) x)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/576 binary64)) (+.f64 (/.f64 #s(literal 5/72 binary64) (*.f64 x x)) (/.f64 #s(literal 1/72 binary64) x))) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 4) (- (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))) (/ 1 (pow x 3))))","(fma.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 x))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 8) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(*.f64 (-.f64 #s(literal 1/576 binary64) (/.f64 (-.f64 #s(literal -1/72 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 5/72 binary64)) x)) x)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (- 1/2 (/ 1 x)) x)) 1/6) x))))","(fma.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":307.37890625,"type":"simplify"},{"count":[[19,668]],"egraph":[[0,8225,166,0.087156562],[2,1694,174,0.029796686],[1,221,174,0.006704514],[0,51,174,0.001772922],[0,29,242,0.000412816]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[-7389344,76689776]],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (pow.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(*.f64 (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(*.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (pow.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (pow.f64 (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (neg.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(/.f64 (neg.f64 (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))) (neg.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(/.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x)))) (neg.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (neg.f64 x) x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 x x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))))","(/.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(/.f64 (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (pow.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))) (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(neg.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 x x) x)","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x x)","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (*.f64 x x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) x)","(fma.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 x x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))) (/.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))) (/.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(-.f64 #s(literal 0 binary64) (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x))) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (neg.f64 x)))))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x)","(+.f64 x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x))) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x (neg.f64 x)))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) #s(literal 3 binary64)) (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) (*.f64 x (*.f64 #s(literal 1/6 binary64) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 #s(literal 1/6 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) (*.f64 x (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 #s(literal 1/6 binary64) x) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 x (*.f64 #s(literal 1/6 binary64) x)))","(fma.f64 x (*.f64 #s(literal 1/6 binary64) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 #s(literal 1/6 binary64) x)))","(+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) x)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(literal 1/6 binary64) x) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 #s(literal 1/6 binary64) x)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))","(*.f64 (pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (pow.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(*.f64 (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(*.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))))","(*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(*.f64 #s(literal -1 binary64) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (pow.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (pow.f64 (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (neg.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(/.f64 (neg.f64 (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))) (neg.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(/.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x)))) (neg.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (neg.f64 x) x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 x x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))))","(/.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(/.f64 (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64))))","(/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (pow.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (fma.f64 x x (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))) (-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(neg.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 x x) x)","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x x)","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (*.f64 x x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) x)","(fma.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (pow.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 x x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x)","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))) (/.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))) (/.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(-.f64 #s(literal 0 binary64) (-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(-.f64 #s(literal 0 binary64) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (*.f64 x (/.f64 x (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)","(*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 x x) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 x (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x))","(pow.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))","(exp.f64 (log.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(*.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) x))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(*.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 2 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))","(*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 1 binary64))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(*.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(pow.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (neg.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (*.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(/.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x)","(/.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal 1 binary64))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)) (*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 x x) (neg.f64 x))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x (neg.f64 x))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (*.f64 x x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(fma.f64 (*.f64 x x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) (neg.f64 x))","(fma.f64 x (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal 1 binary64)) (/.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 1 binary64)) (/.f64 x #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (/.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x))) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)) (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(fma.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":393.991943359375,"type":"rewrite"},{"compiler":[[45965,3807]],"memory":[[4902704,100343152]],"time":132.449951171875,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",59.50020548080798,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",59.57102086813989,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","done",59.6713287278643,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.61244554334932,"binary64"],["(expm1.f64 x)","done",0.0,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","done",0.1349392373272898,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","done",0.2082693130811325,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","done",0.29308845975695796,"binary64"],["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","next",28.152024371850285,"binary64"],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","next",60.274492680674285,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[2,2],[17,12],[14,10],[11,8],[61,30],[16,12]],"count":[[953,10]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[943,1],"picked":[5,4]}],"memory":[[-2768560,39045072]],"min-error":[[0.0,"binary64"]],"time":18.506103515625,"type":"prune"},{"egraph":[[0,8073,354,0.081722225],[5,5367,358,0.021062831],[4,3483,358,0.014319037],[3,651,360,0.010195768],[2,214,368,0.002043372],[1,109,368,0.000917662],[0,66,377,0.000637855],[0,42,377,0.000398526]],"inputs":[["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 x x)","#s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(literal -1 binary64)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","cost-diff",0],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0],["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","cost-diff",0],["(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","cost-diff",4],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","cost-diff",0],["(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","cost-diff",0]],"memory":[[3012720,39755472]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp x) 1) (*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) (neg.f64 x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) x))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) (neg.f64 x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) x)","(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) (neg.f64 x)) x)","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(*.f64 x x)","#s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(literal -1 binary64)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":218.262939453125,"type":"simplify"},{"compiler":[[281,33]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","accuracy",0.15358182467348835],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",59.33499229241797],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","accuracy",0.22439720002747526],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",59.33499229241797],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","accuracy",0.01171875],["(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","accuracy",0.10546875],["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","accuracy",0.1349392373272898],["(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","accuracy",28.017085080345915],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","accuracy",0.01171875],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","accuracy",0.29308845975695796],["#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","accuracy",61.50077730983489]],"memory":[[-1841248,32179808]],"mixsample":[[1.74267578125,"ival-div",0],[8.85498046875,"ival-add",0],[2.54638671875,"ival-exp",0],[18.225341796875,"ival-mult",0],[2.4384765625,"ival-expm1",0],[0.113525390625,"ival-assert",0],[2.267578125,"ival-sub",0],[0.206298828125,"ival-true",0],[6.522705078125,"const",0],[0.3583984375,"exact",0]],"outcomes":[[62.654296875,0,"valid",256]],"time":85.775146484375,"type":"localize"},{"count":[[18,54]],"inputs":[["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[2924176,2924176]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 (* 1/2 x))","(* 1/2 x)","(* 1/4 (pow x 4))","(* (pow x 4) (+ 1/4 (* 1/6 x)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* 5/72 x)))))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* x (+ 5/72 (* 1/72 x)))))))","(* -1 (pow x 2))","(* (pow x 2) (- (* 1/4 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/4 (* 1/6 x))) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/4 (* x (+ 1/6 (* 5/72 x))))) 1))","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(- (exp x) 1)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* x (+ 1/2 (/ 1 x)))","(* 1/576 (pow x 8))","(* (pow x 8) (+ 1/576 (* 1/72 (/ 1 x))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(exp x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 8) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))"]],"series":[[1.400146484375,"((- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (* 1/2 x) (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (- (exp x) 1) (/ (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x)) (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* 1/6 x) 1/2))","x","-inf"],[1.343994140625,"((- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (* 1/2 x) (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (- (exp x) 1) (/ (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x)) (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* 1/6 x) 1/2))","x","inf"],[1.009033203125,"((- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (* 1/2 x) (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (- (exp x) 1) (/ (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x)) (- (* (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x)) (* x x)) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* 1/6 x) 1/2))","x","0"]],"time":4.93701171875,"type":"series"},{"count":[[54,53]],"egraph":[[0,8595,437,0.118503677],[3,5180,487,0.026803987],[2,1354,500,0.017073802],[1,483,505,0.004852317],[0,143,507,0.001605662]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 (* 1/2 x))","(* 1/2 x)","(* 1/4 (pow x 4))","(* (pow x 4) (+ 1/4 (* 1/6 x)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* 5/72 x)))))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* x (+ 5/72 (* 1/72 x)))))))","(* -1 (pow x 2))","(* (pow x 2) (- (* 1/4 (pow x 2)) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/4 (* 1/6 x))) 1))","(* (pow x 2) (- (* (pow x 2) (+ 1/4 (* x (+ 1/6 (* 5/72 x))))) 1))","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(- (exp x) 1)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* x (+ 1/2 (/ 1 x)))","(* 1/576 (pow x 8))","(* (pow x 8) (+ 1/576 (* 1/72 (/ 1 x))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(exp x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 8) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))"]],"memory":[[-478880,53889472]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* 1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))","(* (pow x 4) (+ 1/4 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* 5/72 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/4 (* x (+ 1/6 (* x (+ 5/72 (* 1/72 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/72 binary64) x #s(literal 5/72 binary64)) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* (pow x 2) (- (* 1/4 (pow x 2)) 1))","(fma.f64 (neg.f64 x) x (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)))","(* (pow x 2) (- (* (pow x 2) (+ 1/4 (* 1/6 x))) 1))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))","(* (pow x 2) (- (* (pow x 2) (+ 1/4 (* x (+ 1/6 (* 5/72 x))))) 1))","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/72 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* x (+ 1/2 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(- (exp x) 1)","(expm1.f64 x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/576 (pow x 8))","(*.f64 (pow.f64 x #s(literal 8 binary64)) #s(literal 1/576 binary64))","(* (pow x 8) (+ 1/576 (* 1/72 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/72 binary64) x) #s(literal 1/576 binary64)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (* 1/72 (/ 1 x)))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 5/72 binary64) (*.f64 x x)) #s(literal 1/576 binary64)) (/.f64 #s(literal 1/72 binary64) x)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 8) (+ 1/576 (+ (/ 5/72 (pow x 2)) (+ (* 1/72 (/ 1 x)) (* 1/6 (/ 1 (pow x 3)))))))","(*.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1/576 binary64)) (+.f64 (/.f64 #s(literal 5/72 binary64) (*.f64 x x)) (/.f64 #s(literal 1/72 binary64) x))) (pow.f64 x #s(literal 8 binary64)))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)) x)","(exp x)","(exp.f64 x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* (pow x 8) (+ 1/576 (* -1 (/ (- (* -1 (/ (+ 5/72 (* 1/6 (/ 1 x))) x)) 1/72) x))))","(*.f64 (-.f64 #s(literal 1/576 binary64) (/.f64 (-.f64 #s(literal -1/72 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 5/72 binary64)) x)) x)) (pow.f64 x #s(literal 8 binary64)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(*.f64 (-.f64 #s(literal 1/24 binary64) (/.f64 (-.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(*.f64 (-.f64 (/.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x (/.f64 (+.f64 #s(literal 1 binary64) x) x)) x) x) #s(literal -1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 #s(literal -1/24 binary64) x (-.f64 #s(literal -1/6 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":316.934814453125,"type":"simplify"},{"count":[[18,420]],"egraph":[[0,8471,244,0.08721965],[2,1939,248,0.03077871],[1,261,248,0.007503409],[0,66,250,0.002034925],[0,42,290,0.000378161]],"inputs":[["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[2722384,67930176]],"outputs":[["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x)","(*.f64 x #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)))","#s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))","(*.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)","(*.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))","(*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 x (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x))","(pow.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))","(exp.f64 (log.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","#s(approx (- (exp x) 1) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) x) (/.f64 (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x x)))","(*.f64 (/.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (pow.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))))","(*.f64 (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)))","(*.f64 (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))) (pow.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal 1 binary64))) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))))) (neg.f64 (neg.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x)))) (neg.f64 (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) (*.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 (neg.f64 x) x))) (*.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 x x))) (*.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))) (*.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 1 binary64))) (*.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 (neg.f64 x) x))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) (*.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 x x))) (*.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))) (*.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x)) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal 1 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)))) (neg.f64 (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)))))","(/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))) (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))))","(neg.f64 (/.f64 (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(fma.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) (/.f64 x #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))) (/.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))) (/.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 2 binary64))) (/.f64 (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x x)) (pow.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (neg.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (*.f64 x x) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))))","(*.f64 (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) x))","(*.f64 (/.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (*.f64 x x)))","(*.f64 (/.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) x) (/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))","(*.f64 x (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x (neg.f64 x)))","(pow.f64 (pow.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (fma.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (-.f64 (*.f64 (*.f64 (neg.f64 x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (neg.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (neg.f64 x))) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (neg.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x)) #s(literal -1 binary64)))","(fma.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (exp.f64 (log.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (*.f64 (neg.f64 x) x))","(fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (neg.f64 x)))","(fma.f64 (neg.f64 x) x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (neg.f64 x) x))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 x x) (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal -1 binary64) (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))","(fma.f64 (*.f64 x x) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (neg.f64 x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 x) x))","(fma.f64 x (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) x) (*.f64 (neg.f64 x) x))","(fma.f64 x (neg.f64 x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))) (/.f64 (pow.f64 x #s(literal 6 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 4 binary64)) (pow.f64 x #s(literal 8 binary64)) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 4 binary64))))))","(-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 x x))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (neg.f64 x)))","(+.f64 (*.f64 (neg.f64 x) x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))","(+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x))","(*.f64 (/.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (/.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/36 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/36 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":272.360107421875,"type":"rewrite"},{"compiler":[[29593,2315]],"memory":[[-3970928,55495680]],"time":188.493896484375,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",59.50020548080798,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",59.57102086813989,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","done",59.6713287278643,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.61244554334932,"binary64"],["(expm1.f64 x)","done",0.0,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","done",0.1349392373272898,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","done",0.2082693130811325,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","done",0.29308845975695796,"binary64"],["#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","done",28.152024371850285,"binary64"],["#s(approx (- (exp x) 1) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","fresh",28.15983676349516,"binary64"],["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","fresh",0.7994066246864803,"binary64"]],"compiler":[[327,77],[15,10],[12,8],[8,6],[6,5],[2,2],[17,12],[14,10],[11,8],[61,30],[59,29],[14,11]],"count":[[516,11]],"kept":[{"done":[6,6],"fresh":[0,0],"new":[506,2],"picked":[4,3]}],"memory":[[-3797472,23081328]],"min-error":[[0.0,"binary64"]],"time":23.14404296875,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["x",0.0,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.0,1,"binary64"],["(exp.f64 x)",0.0,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[17,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(expm1.f64 x)","(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[258096,8332240]],"oracle":[60.756212088267986],"outputs":[["(expm1.f64 x)"]],"repr":["binary64"],"time":15.421142578125,"times":[[4.741943359375,"x"],[4.070068359375,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[5.321044921875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.1349392373272898],"baseline":[0.1349392373272898],"branch":[["x",0.1349392373272898,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.1349392373272898,1,"binary64"],["(exp.f64 x)",0.1349392373272898,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[15,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (/.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) #s(approx (- (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp x) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))"]],"memory":[[-716752,7805616]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))"]],"repr":["binary64"],"time":11.781982421875,"times":[[4.25390625,"x"],[3.18603515625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[3.1669921875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.15056425497462814],"baseline":[0.15056425497462814],"branch":[["x",0.15056425497462814,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.15056425497462814,1,"binary64"],["(exp.f64 x)",0.15056425497462814,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[11,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"memory":[[6496784,6496784]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":8.613037109375,"times":[[2.912109375,"x"],[2.490966796875,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.35791015625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.2082693130811325],"baseline":[0.2082693130811325],"branch":[["x",0.2082693130811325,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.2082693130811325,1,"binary64"],["(exp.f64 x)",0.2082693130811325,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[10,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[-1987120,6310112]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))"]],"repr":["binary64"],"time":8.310791015625,"times":[[2.753173828125,"x"],[2.260986328125,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.4619140625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.2238943130811325],"baseline":[0.2238943130811325],"branch":[["x",0.2238943130811325,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.2238943130811325,1,"binary64"],["(exp.f64 x)",0.2238943130811325,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[8,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"memory":[[-2573552,5645216]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":7.026123046875,"times":[[2.304931640625,"x"],[2.134033203125,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.884765625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.29308845975695796],"baseline":[0.29308845975695796],"branch":[["x",0.29308845975695796,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.29308845975695796,1,"binary64"],["(exp.f64 x)",0.29308845975695796,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[7,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[-2950464,5375872]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))"]],"repr":["binary64"],"time":6.634033203125,"times":[[2.14599609375,"x"],[1.80908203125,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.822998046875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.30480720975695796],"baseline":[0.30480720975695796],"branch":[["x",0.30480720975695796,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.30480720975695796,1,"binary64"],["(exp.f64 x)",0.30480720975695796,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[5,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"]],"memory":[[4887072,4887072]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":6.848876953125,"times":[[2.373046875,"x"],[1.75,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.73291015625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.7994066246864803],"baseline":[0.7994066246864803],"branch":[["x",0.7994066246864803,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.7994066246864803,1,"binary64"],["(exp.f64 x)",0.7994066246864803,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[4,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) (*.f64 #s(literal 1/2 binary64) x)) x))"]],"memory":[[-4093328,4644448]],"oracle":[60.756212088267986],"outputs":[["#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":5.39697265625,"times":[[2.044189453125,"x"],[1.43603515625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.365234375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[60.6124455433493],"baseline":[60.61244554334932],"branch":[["x",60.6124455433493,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",60.6124455433493,1,"binary64"],["(exp.f64 x)",60.6124455433493,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"link":["."],"memory":[[3667536,3667536]],"name":["expm1 (example 3.7)"],"oracle":[60.61244554334932],"outputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":3.197021484375,"times":[[0.9931640625,"x"],[0.86083984375,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[0.820068359375,"(exp.f64 x)"]],"type":"regimes"},{"egraph":[[11,7757,106,0.02459151],[10,5202,106,0.03095614],[9,3283,106,0.01925703],[8,1174,106,0.012039416],[7,649,106,0.007795609],[6,191,106,0.003132512],[5,113,106,0.001232087],[4,83,106,0.00113053],[3,62,106,0.000812525],[2,50,106,0.000757973],[1,44,106,0.000722612],[0,36,106,0.000665164]],"inputs":[["(expm1.f64 x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"memory":[[3332256,11589312]],"method":["egg-herbie"],"outputs":[["(expm1.f64 x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (*.f64 #s(approx (+ (* 1/2 x) 1) #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"stop":[["node limit",1]],"time":124.76513671875,"type":"simplify"},{"compiler":[[106,38],[3,3],[8,7],[0,1],[6,5],[6,5],[11,9],[6,5],[9,7],[9,6],[6,5],[12,9],[17,13],[12,9],[6,5]],"egraph":[[0,8448,289,0.114593796],[4,5784,347,0.039369415],[3,3294,347,0.02811563],[2,870,349,0.013798148],[1,312,357,0.003084616],[0,89,361,0.001849663],[0,1145,4,0.008388638],[2,130,6,0.005872139],[1,24,6,0.001103471],[0,6,6,0.000843087],[0,4,6,7.9244e-5],[0,8307,111,0.10238383],[2,1092,111,0.033931695],[1,150,111,0.004109027],[0,38,111,0.001365705],[0,22,111,0.000313959],[0,8595,437,0.13662643],[3,5180,487,0.026328196],[2,1354,500,0.015617086],[1,483,505,0.004116003],[0,143,507,0.00155556],[0,725,53,0.004426347],[6,725,66,0.002864414],[5,720,66,0.003513138],[4,587,66,0.003663845],[3,371,66,0.002810413],[2,168,66,0.001601632],[1,77,66,0.000646616],[0,25,66,0.000300536]],"memory":[[-2149520,6121744]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["saturated",1]],"time":1375.906982421875,"type":"soundness"},{"compiler":[[106,38],[106,38],[2,2],[2,2],[4,4],[4,4]],"memory":[[-1722112,33723600]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":217.217041015625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.012939453125,"type":"end"}]