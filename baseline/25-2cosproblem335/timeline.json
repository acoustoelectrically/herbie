[{"memory":[[27264,27264]],"time":0.0458984375,"type":"start"},{"compiler":[[27,19]],"memory":[[4516864,12641728]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":49.291015625,"type":"analyze"},{"bogosity":[{"invalid":0.49928213615195616,"precondition":0.4942799140699208,"valid":0.006437949778123048}],"memory":[[43283144,1800919152]],"mixsample":[[296.8203125,"adjust",800],[1777.193603515625,"ival-cos",1600],[17.619140625,"ival-assert",0],[284.9755859375,"ival-sub",0],[128.645263671875,"ival-and",0],[629.554931640625,"ival-cos",0],[0.045654296875,"ival-sub",400],[674.38916015625,"const",0],[408.841552734375,"ival-cos",400],[171.783935546875,"adjust",2000],[244.704345703125,"ival-add",0],[0.037109375,"ival-sub",800],[271.768798828125,"ival-mult",0],[238.43603515625,"ival-fabs",0],[6.1396484375,"ival-add",400],[233.741943359375,"ival-<=",0],[56.256591796875,"exact",0],[2.185791015625,"ival-add",800],[187.5947265625,"ival-<",0]],"outcomes":[[552.401123046875,1,"valid",2431],[3096.167236328125,0,"invalid",25944],[3320.19140625,2,"valid",5689],[20.695556640625,0,"valid",136]],"time":8633.263916015625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[142,0,2,112]],"explanations":[["cos.f64","(cos.f64 (+.f64 x eps))","sensitivity",1,2,[],[[1]]],["-.f64","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cancellation",144,0,[],[[]]]],"fperrors":[["(cos.f64 (+.f64 x eps))",1,0,false,0,false],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",142,2,[5.2465192214352296e-160,6.278962770807442e-164],0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,1],[1,143],[0,112]],"maybe-confusion":[[142,0,0,2,0,112]],"memory":[[1721120,46042432]],"mixsample":[[12.608642578125,"adjust",800],[3.047607421875,"ival-add",0],[0.011962890625,"ival-sub",800],[102.365478515625,"ival-cos",1600],[0.240966796875,"ival-assert",0],[6.770751953125,"ival-sub",0],[0.174072265625,"ival-add",400],[0.46337890625,"ival-true",0],[8.9736328125,"ival-cos",0],[12.936767578125,"ival-cos",400],[0.067626953125,"ival-add",800],[7.355224609375,"adjust",2000]],"outcomes":[[26.160888671875,1,"valid",176],[154.8701171875,2,"valid",328],[1.0478515625,0,"valid",8]],"time":230.172119140625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.00055526],[10,183,7,0.000736422],[9,175,7,0.000901687],[8,159,7,0.000897688],[7,110,7,0.000762126],[6,80,7,0.000797176],[5,47,7,0.000419631],[4,32,7,0.000221824],[3,24,7,0.000170128],[2,18,7,0.000123363],[1,13,7,0.000119714],[0,10,7,0.000119716],[0,6,7,9.6115e-5],[10,574,35,0.002412118],[9,566,35,0.002738718],[8,550,35,0.00254793],[7,498,35,0.002550025],[6,460,35,0.002501975],[5,374,35,0.002197349],[4,277,35,0.001669498],[3,151,35,0.001226596],[2,81,35,0.000616572],[1,38,37,0.000287894],[0,18,41,0.000227053]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"memory":[[-1491840,6154816]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":44.012939453125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.068115234375,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","next",31.91947982633915,"binary64"]],"compiler":[[7,6]],"memory":[[303232,303232]],"time":0.392822265625,"type":"prune"},{"egraph":[[0,183,18,0.000731508],[10,183,18,0.000792661],[9,175,18,0.000899486],[8,159,18,0.000914228],[7,110,18,0.001108436],[6,80,18,0.001010316],[5,47,18,0.000465814],[4,32,18,0.000246733],[3,24,18,0.000182839],[2,18,18,0.000130176],[1,13,18,0.000122147],[0,10,18,0.000140795],[0,6,18,0.000107473]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(cos.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(cos.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cost-diff",0]],"memory":[[819408,819408]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":14.173095703125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(cos.f64 x)","accuracy",0.01171875],["(cos.f64 (+.f64 x eps))","accuracy",0.07613546308637054],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","accuracy",31.834492429289764]],"memory":[[4687072,12777056]],"mixsample":[[8.322265625,"adjust",800],[1.62744140625,"ival-add",0],[0.004150390625,"ival-sub",800],[52.015625,"ival-cos",1600],[0.113037109375,"ival-assert",0],[3.681884765625,"ival-sub",0],[0.084716796875,"ival-add",400],[0.185546875,"ival-true",0],[4.115234375,"ival-cos",0],[6.1611328125,"ival-cos",400],[0.04052734375,"ival-add",800],[3.3974609375,"adjust",2000]],"outcomes":[[12.7822265625,1,"valid",88],[80.683349609375,2,"valid",164],[0.590087890625,0,"valid",4]],"time":101.76806640625,"type":"localize"},{"count":[[4,33]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[-6160720,1892128]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.574951171875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","-inf"],[0.748046875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","inf"],[1.511962890625,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","0"],[0.322021484375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","-inf"],[0.39794921875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","inf"],[0.884033203125,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","0"]],"time":4.866943359375,"type":"series"},{"count":[[33,31]],"egraph":[[0,8397,272,0.084221703],[3,2426,292,0.035523478],[2,628,293,0.008381705],[1,277,293,0.001890009],[0,105,296,0.00092429]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[9831248,39442752]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(-.f64 (cos.f64 eps) (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 eps) (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/2 binary64))) x (cos.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (+ eps x))","(cos.f64 (+.f64 eps x))","x","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(cos x)","(cos.f64 x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- eps (* -1 x)))","(cos.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(fma.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps (cos.f64 x))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- x (* -1 eps)))","(cos.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":220.075927734375,"type":"simplify"},{"count":[[4,228]],"egraph":[[0,8343,16,0.072586788],[3,4790,16,0.042343198],[2,385,16,0.01344311],[1,54,16,0.001447245],[0,10,16,0.000701168],[0,6,16,9.2014e-5]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[-1484688,51701360]],"outputs":[["(*.f64 (pow.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (/.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal -2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (/.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (*.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (/.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(literal -2 binary64)))","(*.f64 #s(literal -2 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps))))) #s(literal -2 binary64)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))) (fma.f64 (cos.f64 eps) (cos.f64 x) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (+.f64 eps x)))","(fma.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) (cos.f64 (+.f64 eps x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(fma.f64 (cos.f64 (+.f64 eps x)) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (cos.f64 (+.f64 eps x)) (/.f64 (cos.f64 (+.f64 eps x)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(-.f64 (+.f64 (cos.f64 (+.f64 eps x)) #s(literal 0 binary64)) (cos.f64 x))","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(+.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x)))","(*.f64 (pow.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 2 binary64))) (cos.f64 (-.f64 eps x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))))","(/.f64 (neg.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) (neg.f64 (cos.f64 (-.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))))) #s(literal 4 binary64))","(/.f64 (-.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (cos.f64 (-.f64 eps x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(fma.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))) (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(-.f64 (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))) (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 eps x))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 eps x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(cos.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(cos.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(cos.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(cos.f64 (+.f64 eps x))","(exp.f64 (*.f64 (log.f64 (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(+.f64 (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))) (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) eps)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 eps x) eps) (-.f64 (*.f64 (-.f64 eps x) eps) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (*.f64 (-.f64 x eps) (+.f64 eps x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (pow.f64 (neg.f64 (-.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 eps x))","(*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (/.f64 (+.f64 eps x) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (*.f64 (+.f64 eps x) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 eps x) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 eps x) (*.f64 (-.f64 x eps) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64))) (fma.f64 x (/.f64 x (-.f64 x eps)) (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64))) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64)))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (*.f64 x x)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (pow.f64 (-.f64 x eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 x eps) (fma.f64 eps eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 x eps) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 eps x) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 x (/.f64 x (-.f64 x eps)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(+.f64 eps x)","(+.f64 x eps)","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":337.2529296875,"type":"rewrite"},{"compiler":[[6613,893]],"memory":[[-2967472,23147728]],"time":46.565185546875,"type":"eval"},{"alts":[["(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","fresh",31.83168648486301,"binary64"],["(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","next",13.658406769215464,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",31.91947982633915,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","fresh",32.725855554610604,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","next",0.19977510235280851,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","next",32.77982008931043,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","next",0.31293151751905923,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","fresh",0.5344712407792276,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","next",14.121762762118438,"binary64"]],"compiler":[[13,9],[15,11],[7,6],[9,8],[16,14],[12,10],[31,20],[19,14],[13,10],[13,9],[15,11],[9,8],[16,14],[12,10],[31,20],[19,14],[13,10]],"count":[[252,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[251,8],"picked":[1,1]}],"memory":[[-3259936,12607216]],"min-error":[[0.1478827382622171,"binary64"]],"time":12.219970703125,"type":"prune"},{"egraph":[[0,8133,272,0.089146153],[11,7590,281,0.039395314],[10,7532,281,0.042297656],[9,7465,281,0.034815575],[8,7345,281,0.036608428],[7,6613,281,0.042213684],[6,5006,281,0.04930298],[5,2351,281,0.037869742],[4,1209,281,0.016300338],[3,630,281,0.008907969],[2,270,281,0.004590733],[1,135,285,0.001932212],[0,76,285,0.001296946],[0,45,299,0.000647426]],"inputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","#s(literal 2 binary64)","x","eps","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal 1 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps)","(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(sin.f64 x)","x","#s(literal 1/6 binary64)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","eps","#s(literal 1/24 binary64)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","#s(literal -1 binary64)","(cos.f64 x)","x","(*.f64 (cos.f64 eps) (cos.f64 x))","(cos.f64 eps)","eps","(*.f64 (sin.f64 eps) (sin.f64 x))","(sin.f64 eps)","(sin.f64 x)"]],"locations":[["(*.f64 (cos.f64 eps) (cos.f64 x))","cost-diff",0],["(cos.f64 x)","cost-diff",0],["(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","cost-diff",0],["(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","cost-diff",2],["(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","cost-diff",0],["(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","cost-diff",0],["(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","cost-diff",1],["(sin.f64 x)","cost-diff",0],["(neg.f64 (sin.f64 x))","cost-diff",0],["(*.f64 (neg.f64 (sin.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","cost-diff",0],["(cos.f64 eps)","cost-diff",0],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","cost-diff",0],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","cost-diff",2]],"memory":[[6293424,29331600]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(fma.f64 eps #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","#s(literal 2 binary64)","x","eps","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(*.f64 eps #s(literal 1/2 binary64))","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal 1 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(*.f64 (neg.f64 eps) (sin.f64 x))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x))) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps (neg.f64 (sin.f64 x)))","(*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps)","(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64)))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)))","(sin.f64 x)","x","#s(literal 1/6 binary64)","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) eps)","(cos.f64 x)","eps","#s(literal 1/24 binary64)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","#s(literal -1/2 binary64)","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","(neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (cos.f64 eps)) (cos.f64 x) (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","#s(literal -1 binary64)","(cos.f64 x)","x","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 x) (cos.f64 eps))","(cos.f64 eps)","eps","(*.f64 (sin.f64 eps) (sin.f64 x))","(sin.f64 eps)","(sin.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":503.9208984375,"type":"simplify"},{"compiler":[[282,47]],"locations":[["(cos.f64 x)","accuracy",0.01171875],["(*.f64 (sin.f64 eps) (sin.f64 x))","accuracy",0.0234375],["(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","accuracy",0.1015625],["(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","accuracy",31.13805153795818],["(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","accuracy",0.12109375],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","accuracy",0.1840252675190592],["(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","accuracy",0.35546875],["(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","accuracy",0.375],["(neg.f64 (sin.f64 x))","accuracy",0.0],["(sin.f64 x)","accuracy",0.0078125],["(*.f64 (neg.f64 (sin.f64 x)) eps)","accuracy",0.0234375],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","accuracy",14.121766298953398],["(cos.f64 eps)","accuracy",0.0],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","accuracy",31.1350372229547],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","accuracy",31.76718998744719],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","accuracy",0.0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","accuracy",0.0234375],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","accuracy",0.058463967955896375],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","accuracy",0.12890625]],"memory":[[-17194784,80501120]],"mixsample":[[0.08203125,"const",800],[42.04052734375,"adjust",800],[4.938232421875,"ival-mult",1200],[0.324951171875,"ival-assert",0],[21.34228515625,"ival-sub",0],[8.623291015625,"ival-cos",0],[32.4580078125,"ival-cos",1200],[19.428955078125,"const",0],[0.014892578125,"ival-sub",400],[8.777587890625,"ival-cos",400],[1.189208984375,"ival-mult",800],[18.70849609375,"ival-add",0],[0.069091796875,"ival-cos",800],[1.77783203125,"ival-add",400],[0.89404296875,"ival-sin",2000],[0.22705078125,"adjust",2800],[1.020751953125,"ival-sin",800],[4.769775390625,"ival-cos",1600],[0.186767578125,"ival-mult",2000],[0.057861328125,"const",400],[24.052490234375,"adjust",2000],[88.5595703125,"ival-cos",3200],[70.71630859375,"ival-mult",0],[0.788818359375,"ival-mult",400],[3.917724609375,"ival-sin",400],[17.33349609375,"ival-sin",0],[53.793212890625,"ival-cos",2000],[0.010009765625,"ival-add",2000],[0.10791015625,"const",2000],[0.531982421875,"ival-true",0],[0.847900390625,"ival-add",800],[1.949462890625,"ival-mult",3200],[1.550048828125,"exact",0],[4.272216796875,"ival-neg",0]],"outcomes":[[119.636474609375,1,"valid",96],[407.889404296875,2,"valid",156],[4.564208984375,3,"valid",1],[2.281005859375,0,"valid",3]],"time":651.2470703125,"type":"localize"},{"count":[[24,156]],"inputs":[["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(+.f64 #s(literal 0 binary64) eps)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 x)","(*.f64 (cos.f64 eps) (cos.f64 x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(*.f64 (sin.f64 eps) (sin.f64 x))"]],"memory":[[-962960,16175968]],"outputs":[["(* 1/2 eps)","(+ x (* 1/2 eps))","(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (+ (* -1/36 (* eps x)) (* -1/48 (pow eps 2)))))))) 1/2)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* eps (* x (+ 1/4 (* -1/48 (pow eps 2)))))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* eps (+ 1/4 (* -1/48 (pow eps 2)))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (* -1/2 (cos eps))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (* 1/24 (cos eps)) 1/24)))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (+ (* 1/24 (cos eps)) (* (pow x 2) (+ 1/720 (* -1/720 (cos eps))))) 1/24)))))) 1)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(cos eps)","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(* 1/24 eps)","(+ (* -1/48 (* eps (pow x 2))) (* 1/24 eps))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/576 (* eps (pow x 2))))))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* (pow x 2) (+ (* -1/17280 (* eps (pow x 2))) (* 1/576 eps))))))","(+ (* 1/24 eps) (* 1/6 x))","(+ (* 1/24 eps) (* x (+ 1/6 (* -1/48 (* eps x)))))","(+ (* 1/24 eps) (* x (+ 1/6 (* x (+ (* -1/36 x) (* -1/48 eps))))))","(* x (sin eps))","(* x (+ (sin eps) (* -1/6 (* (pow x 2) (sin eps)))))","(* x (+ (sin eps) (* (pow x 2) (+ (* -1/6 (sin eps)) (* 1/120 (* (pow x 2) (sin eps)))))))","(* x (+ (sin eps) (* (pow x 2) (+ (* -1/6 (sin eps)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (sin eps))) (* 1/120 (sin eps))))))))","(* x (+ 1 (* 1/2 (/ eps x))))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(- (cos (+ eps x)) (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(sin x)","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(+ (* -1 (cos x)) (* (cos eps) (cos x)))","(- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x)))","(cos x)","(* (cos eps) (cos x))","(sin (* 1/2 (+ eps (* 2 x))))","(* 1/24 (* eps (cos x)))","(+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))","(* (sin eps) (sin x))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(- (cos (- eps (* -1 x))) (cos x))","(sin (* 1/2 (- eps (* -2 x))))","eps","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(- (* -1/2 (* eps (cos x))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(+ (cos x) (* -1 (cos x)))","(+ (cos x) (+ (* -1 (cos x)) (* -1/2 (* (pow eps 2) (cos x)))))","(+ (cos x) (+ (* -1 (cos x)) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x)))))))","(+ (cos x) (+ (* -1 (cos x)) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x))))))))","(+ (cos x) (+ (* -1 (cos x)) (* -1 (* eps (sin x)))))","(+ (cos x) (+ (* -1 (cos x)) (* eps (- (* -1/2 (* eps (cos x))) (sin x)))))","(+ (cos x) (+ (* -1 (cos x)) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* 1/6 (sin x))","(* eps (sin x))","(* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x)))))))","(* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (sin x))) (* 1/120 (sin x))))))))","(* eps (+ 1/2 (/ x eps)))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* eps (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))"]],"series":[[6.488037109375,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (+ (* -1 (cos x)) (* (cos eps) (cos x))) (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (cos x) (* (cos eps) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (* (sin eps) (sin x)))","eps","-inf"],[5.41015625,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (+ (* -1 (cos x)) (* (cos eps) (cos x))) (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (cos x) (* (cos eps) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (* (sin eps) (sin x)))","eps","inf"],[4.953125,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (+ (* -1 (cos x)) (* (cos eps) (cos x))) (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (cos x) (* (cos eps) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (* (sin eps) (sin x)))","eps","0"],[10.320068359375,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (+ (* -1 (cos x)) (* (cos eps) (cos x))) (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (cos x) (* (cos eps) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (* (sin eps) (sin x)))","x","-inf"],[6.952880859375,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (+ (* -1 (cos x)) (* (cos eps) (cos x))) (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (cos x) (* (cos eps) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (* (sin eps) (sin x)))","x","inf"],[5.10302734375,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (sin x) (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (+ (* -1 (cos x)) (* (cos eps) (cos x))) (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (cos x) (* (cos eps) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (* (* (cos x) eps) 1/24) (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) (* (sin eps) (sin x)))","x","0"]],"time":41.946044921875,"type":"series"},{"count":[[156,154]],"egraph":[[0,8238,2073,0.108110825],[2,5622,2288,0.032671621],[1,1836,2371,0.026718161],[0,569,2475,0.009104116]],"inputs":[["(* 1/2 eps)","(+ x (* 1/2 eps))","(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (* 1/24 (pow eps 2)) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) 1/2)","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (+ (* -1/36 (* eps x)) (* -1/48 (pow eps 2)))))))) 1/2)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* eps (* x (+ 1/4 (* -1/48 (pow eps 2)))))) 1)))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* eps (+ 1/4 (* -1/48 (pow eps 2)))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (* -1/2 (cos eps))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (* 1/24 (cos eps)) 1/24)))))) 1)","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (+ (* 1/24 (cos eps)) (* (pow x 2) (+ 1/720 (* -1/720 (cos eps))))) 1/24)))))) 1)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(cos eps)","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(* 1/24 eps)","(+ (* -1/48 (* eps (pow x 2))) (* 1/24 eps))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/576 (* eps (pow x 2))))))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* (pow x 2) (+ (* -1/17280 (* eps (pow x 2))) (* 1/576 eps))))))","(+ (* 1/24 eps) (* 1/6 x))","(+ (* 1/24 eps) (* x (+ 1/6 (* -1/48 (* eps x)))))","(+ (* 1/24 eps) (* x (+ 1/6 (* x (+ (* -1/36 x) (* -1/48 eps))))))","(* x (sin eps))","(* x (+ (sin eps) (* -1/6 (* (pow x 2) (sin eps)))))","(* x (+ (sin eps) (* (pow x 2) (+ (* -1/6 (sin eps)) (* 1/120 (* (pow x 2) (sin eps)))))))","(* x (+ (sin eps) (* (pow x 2) (+ (* -1/6 (sin eps)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (sin eps))) (* 1/120 (sin eps))))))))","(* x (+ 1 (* 1/2 (/ eps x))))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(- (cos (+ eps x)) (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(sin x)","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(+ (* -1 (cos x)) (* (cos eps) (cos x)))","(- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x)))","(cos x)","(* (cos eps) (cos x))","(sin (* 1/2 (+ eps (* 2 x))))","(* 1/24 (* eps (cos x)))","(+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))","(* (sin eps) (sin x))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(- (cos (- eps (* -1 x))) (cos x))","(sin (* 1/2 (- eps (* -2 x))))","eps","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(* -1/2 (cos x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(- (* -1/2 (* eps (cos x))) (sin x))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(+ (cos x) (* -1 (cos x)))","(+ (cos x) (+ (* -1 (cos x)) (* -1/2 (* (pow eps 2) (cos x)))))","(+ (cos x) (+ (* -1 (cos x)) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x)))))))","(+ (cos x) (+ (* -1 (cos x)) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x))))))))","(+ (cos x) (+ (* -1 (cos x)) (* -1 (* eps (sin x)))))","(+ (cos x) (+ (* -1 (cos x)) (* eps (- (* -1/2 (* eps (cos x))) (sin x)))))","(+ (cos x) (+ (* -1 (cos x)) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))))","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* 1/6 (sin x))","(* eps (sin x))","(* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x)))))))","(* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (sin x))) (* 1/120 (sin x))))))))","(* eps (+ 1/2 (/ x eps)))","(* 1/24 (* (pow eps 2) (cos x)))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* 1/24 (* (pow eps 3) (cos x)))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* eps (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(* -1 (* eps (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))"]],"memory":[[12281856,47816048]],"method":["egg-herbie"],"outputs":[["(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(+ x (* 1/2 eps))","(fma.f64 #s(literal 1/2 binary64) eps x)","(* -2 (pow (sin (* 1/2 eps)) 2))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(literal -2 binary64))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal -2 binary64)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(fma.f64 (*.f64 x (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -2 binary64))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (+.f64 #s(literal -2 binary64) (*.f64 x (*.f64 #s(literal 1/3 binary64) x))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) x)) x (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(literal -2 binary64)))","(pow (sin (* 1/2 eps)) 2)","(pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))) x (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)))","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)) #s(literal -1 binary64) (cos.f64 eps))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 eps) x) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* -1 (* eps x))","(*.f64 (neg.f64 x) eps)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 (neg.f64 x) eps))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(*.f64 (fma.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(- (* 1/24 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* 1/6 (* eps x))) 1/2)","(fma.f64 eps (fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1/2 binary64))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(- (+ (* 1/24 (pow eps 2)) (* x (+ (* 1/6 eps) (* x (+ 1/4 (+ (* -1/36 (* eps x)) (* -1/48 (pow eps 2)))))))) 1/2)","(fma.f64 (fma.f64 (fma.f64 eps (fma.f64 #s(literal -1/36 binary64) x (*.f64 #s(literal -1/48 binary64) eps)) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))","(* eps (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* eps (* x (+ 1/4 (* -1/48 (pow eps 2)))))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))","(+ (* eps (- (* 1/24 (pow eps 2)) 1/2)) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* eps (+ 1/4 (* -1/48 (pow eps 2)))) (* x (+ 1/6 (* -1/36 (pow eps 2))))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (* -1/2 (cos eps))))) 1)","(fma.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (* 1/24 (cos eps)) 1/24)))))) 1)","(fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 eps) #s(literal -1/24 binary64)) x) x (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) (*.f64 x x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* (pow x 2) (+ 1/2 (+ (* -1/2 (cos eps)) (* (pow x 2) (- (+ (* 1/24 (cos eps)) (* (pow x 2) (+ 1/720 (* -1/720 (cos eps))))) 1/24)))))) 1)","(fma.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (cos.f64 eps) #s(literal 1/720 binary64)) x) x (fma.f64 #s(literal 1/24 binary64) (cos.f64 eps) #s(literal -1/24 binary64))) (*.f64 x x) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) (*.f64 x x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1/2 (* (pow x 2) (cos eps))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (cos.f64 eps))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* 1/24 (* (pow x 2) (cos eps))))))","(fma.f64 (*.f64 (cos.f64 eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 x x) (cos.f64 eps))","(+ (cos eps) (* (pow x 2) (+ (* -1/2 (cos eps)) (* (pow x 2) (+ (* -1/720 (* (pow x 2) (cos eps))) (* 1/24 (cos eps)))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (cos.f64 eps) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (cos.f64 eps) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)))))","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* 1/24 eps)","(*.f64 #s(literal 1/24 binary64) eps)","(+ (* -1/48 (* eps (pow x 2))) (* 1/24 eps))","(*.f64 eps (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/576 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/48 binary64))) (*.f64 x x) (*.f64 #s(literal 1/24 binary64) eps))","(+ (* 1/24 eps) (* (pow x 2) (+ (* -1/48 eps) (* (pow x 2) (+ (* -1/17280 (* eps (pow x 2))) (* 1/576 eps))))))","(fma.f64 eps (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal -1/17280 binary64) (*.f64 x x) #s(literal 1/576 binary64)))))","(+ (* 1/24 eps) (* 1/6 x))","(fma.f64 #s(literal 1/24 binary64) eps (*.f64 #s(literal 1/6 binary64) x))","(+ (* 1/24 eps) (* x (+ 1/6 (* -1/48 (* eps x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) x #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/24 binary64) eps))","(+ (* 1/24 eps) (* x (+ 1/6 (* x (+ (* -1/36 x) (* -1/48 eps))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) x (*.f64 #s(literal -1/48 binary64) eps)) x #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/24 binary64) eps))","(* x (sin eps))","(*.f64 (sin.f64 eps) x)","(* x (+ (sin eps) (* -1/6 (* (pow x 2) (sin eps)))))","(*.f64 (sin.f64 eps) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x))","(* x (+ (sin eps) (* (pow x 2) (+ (* -1/6 (sin eps)) (* 1/120 (* (pow x 2) (sin eps)))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (sin.f64 eps) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 (sin.f64 eps) x))","(* x (+ (sin eps) (* (pow x 2) (+ (* -1/6 (sin eps)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (sin eps))) (* 1/120 (sin eps))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (sin.f64 eps) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (sin.f64 eps) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))))) x)","(* x (+ 1 (* 1/2 (/ eps x))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(sin x)","(sin.f64 x)","(+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))","(fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x))","(fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps)) eps (neg.f64 (sin.f64 x)))","(+ (* -1 (cos x)) (* (cos eps) (cos x)))","(*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x))","(- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(cos x)","(cos.f64 x)","(* (cos eps) (cos x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(sin (* 1/2 (+ eps (* 2 x))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* 1/24 (* eps (cos x)))","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64)))","(* (sin eps) (sin x))","(*.f64 (sin.f64 x) (sin.f64 eps))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(fma.f64 (*.f64 (/.f64 eps x) #s(literal -1/2 binary64)) (neg.f64 x) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(sin (* 1/2 (- eps (* -2 x))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","eps","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(* 1/2 (* eps (sin x)))","(*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (cos.f64 x)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/12 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/12 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/48 binary64))) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(* -1/2 (cos x))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","(+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(- (* -1/2 (* eps (cos x))) (sin x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x)))","(- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(+ (cos x) (* -1 (cos x)))","#s(literal 0 binary64)","(+ (cos x) (+ (* -1 (cos x)) (* -1/2 (* (pow eps 2) (cos x)))))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) #s(literal -1/2 binary64))","(+ (cos x) (+ (* -1 (cos x)) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x)))))))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))","(+ (cos x) (+ (* -1 (cos x)) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x))))))))","(*.f64 (fma.f64 (*.f64 (cos.f64 x) (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64))) (*.f64 eps eps) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (*.f64 eps eps))","(+ (cos x) (+ (* -1 (cos x)) (* -1 (* eps (sin x)))))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(+ (cos x) (+ (* -1 (cos x)) (* eps (- (* -1/2 (* eps (cos x))) (sin x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(+ (cos x) (+ (* -1 (cos x)) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (cos x) (* -1/2 (* (pow eps 2) (cos x))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64)) (cos.f64 x))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* 1/24 (* (pow eps 2) (cos x))))))","(fma.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (cos.f64 x))","(+ (cos x) (* (pow eps 2) (+ (* -1/2 (cos x)) (* (pow eps 2) (+ (* -1/720 (* (pow eps 2) (cos x))) (* 1/24 (cos x)))))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64)) (cos.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (cos.f64 x) (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)))))","(+ (sin x) (* 1/2 (* eps (cos x))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 x)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)))) eps (sin.f64 x))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* 1/6 (sin x))","(*.f64 (sin.f64 x) #s(literal 1/6 binary64))","(* eps (sin x))","(*.f64 (sin.f64 x) eps)","(* eps (+ (sin x) (* -1/6 (* (pow eps 2) (sin x)))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) (*.f64 (sin.f64 x) eps))","(* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* 1/120 (* (pow eps 2) (sin x)))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/120 binary64) #s(literal -1/6 binary64))) (*.f64 (sin.f64 x) eps))","(* eps (+ (sin x) (* (pow eps 2) (+ (* -1/6 (sin x)) (* (pow eps 2) (+ (* -1/5040 (* (pow eps 2) (sin x))) (* 1/120 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal -1/5040 binary64) #s(literal 1/120 binary64))))) eps)","(* eps (+ 1/2 (/ x eps)))","(*.f64 (+.f64 (/.f64 x eps) #s(literal 1/2 binary64)) eps)","(* 1/24 (* (pow eps 2) (cos x)))","(*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) #s(literal 1/24 binary64))","(* (pow eps 2) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (*.f64 eps eps))","(* 1/24 (* (pow eps 4) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 3) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 3) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 3 binary64)))","(* eps (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps)","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 x eps)) (neg.f64 eps))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* (pow eps 2) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (sin.f64 x) #s(literal -1/6 binary64))) (neg.f64 eps))) eps) eps)","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 (sin.f64 x) #s(literal -1/6 binary64))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (sin.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* (pow eps 3) (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))) eps)) (* -1/24 (cos x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* -1 (* eps (+ (* -1/6 (/ (sin x) eps)) (* -1/24 (cos x)))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":314.093994140625,"type":"simplify"},{"count":[[24,469]],"egraph":[[0,8726,218,0.090706089],[2,2377,218,0.040073822],[1,279,218,0.007937853],[0,76,219,0.003471762],[0,45,236,0.000452174]],"inputs":[["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(+.f64 #s(literal 0 binary64) eps)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","(fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 x)","(*.f64 (cos.f64 eps) (cos.f64 x))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64)))","(*.f64 (sin.f64 eps) (sin.f64 x))"]],"memory":[[-2652528,67200592]],"outputs":[["(*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal 1/2 binary64)) (fma.f64 x #s(literal 2 binary64) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) (fma.f64 x #s(literal 2 binary64) (neg.f64 eps)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1/2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) x (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 #s(literal 1 binary64) x))","(+.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) x))","(*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(pow.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 eps)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps)))","(/.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps))","(/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps)))","(+.f64 #s(literal 0 binary64) eps)","(+.f64 eps #s(literal 0 binary64))","eps","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 #s(literal -2 binary64) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))))","(*.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal -2 binary64)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal 2 binary64))","(*.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal 1/2 binary64))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal 4 binary64))","(/.f64 (neg.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal -2 binary64))","(/.f64 (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal 2 binary64))","(/.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))))","(-.f64 (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) #s(literal 2 binary64)) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) #s(literal 2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (cos.f64 eps) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (cos.f64 eps) #s(literal -1 binary64))","(fma.f64 (cos.f64 eps) #s(literal 1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (cos.f64 eps))","(+.f64 (cos.f64 eps) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (cos.f64 eps))","(*.f64 (cos.f64 eps) #s(literal 1 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (-.f64 eps #s(literal 0 binary64)))) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (neg.f64 eps))) #s(literal 2 binary64))","(fma.f64 (cos.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (cos.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps))) (*.f64 (sin.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (sin.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))))","(-.f64 (cos.f64 eps) (*.f64 #s(literal 0 binary64) (sin.f64 eps)))","(-.f64 (cos.f64 eps) (*.f64 (sin.f64 eps) #s(literal 0 binary64)))","(cos.f64 eps)","(+.f64 (*.f64 (cos.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (cos.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))) (*.f64 (sin.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (sin.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (*.f64 eps #s(literal -1 binary64)) (sin.f64 x))","(*.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(*.f64 (sin.f64 x) (neg.f64 eps))","(*.f64 eps (neg.f64 (sin.f64 x)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 (sin.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (sin.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (neg.f64 (sin.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(neg.f64 (*.f64 (sin.f64 x) eps))","(fma.f64 (*.f64 eps #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))","(fma.f64 (*.f64 eps #s(literal -1 binary64)) (sin.f64 x) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) eps) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) eps) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)))","(fma.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64) (*.f64 (neg.f64 (sin.f64 x)) eps))","(fma.f64 (neg.f64 (sin.f64 x)) eps (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)))","(fma.f64 (sin.f64 x) (neg.f64 eps) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) (neg.f64 eps) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(fma.f64 eps (neg.f64 (sin.f64 x)) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))","(fma.f64 eps (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) eps))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) eps) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) eps) (*.f64 (neg.f64 (sin.f64 x)) #s(literal 0 binary64)))","(*.f64 #s(literal -1 binary64) (sin.f64 x))","(*.f64 (sin.f64 x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))))","(neg.f64 (sin.f64 x))","(-.f64 #s(literal 0 binary64) (sin.f64 x))","(+.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(sin.f64 x)","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal -1/2 binary64)) (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(fma.f64 (cos.f64 x) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps))","(fma.f64 eps (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (/.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) eps) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (neg.f64 eps) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) #s(literal 0 binary64)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) eps (*.f64 (neg.f64 (sin.f64 x)) eps))","(fma.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) #s(literal 0 binary64)))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) (*.f64 (neg.f64 (sin.f64 x)) eps))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) eps) (*.f64 (neg.f64 (sin.f64 x)) eps))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) #s(literal 0 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps))","(+.f64 (*.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) #s(literal 0 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) eps) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) eps) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) eps) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) eps) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (neg.f64 eps) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 eps eps) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps)) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps)) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps)) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps)) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps)) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps)) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps)) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps)) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) eps))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) eps))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 eps eps) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (neg.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 eps eps) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 eps (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps)) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps)) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x)) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) eps))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) eps))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (neg.f64 eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 eps eps)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 eps (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (neg.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) (*.f64 eps eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (neg.f64 eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))) (*.f64 eps eps))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (-.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) (neg.f64 (sin.f64 x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) (neg.f64 (sin.f64 x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps))","(fma.f64 eps (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) (neg.f64 (sin.f64 x)))","(-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps #s(literal 0 binary64)) (sin.f64 x))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) #s(literal 2 binary64)))))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) (sin.f64 x))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) (neg.f64 (sin.f64 x)))","(+.f64 (neg.f64 (sin.f64 x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps))","(*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x))","(*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) (pow.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(pow.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (pow.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))))","(fma.f64 (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (neg.f64 (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 x) (cos.f64 eps)))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) (*.f64 (cos.f64 x) (cos.f64 eps)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (cos.f64 x)))","(-.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (/.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 (-.f64 (+.f64 eps x) x) #s(literal 1/2 binary64)))) (sin.f64 (*.f64 (+.f64 (+.f64 eps x) x) #s(literal 1/2 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (pow.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 eps x) x) #s(literal 1/2 binary64))) (sin.f64 (*.f64 (-.f64 (+.f64 eps x) x) #s(literal 1/2 binary64)))) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 eps x) x) #s(literal 1/2 binary64))) (sin.f64 (*.f64 (-.f64 (+.f64 eps x) x) #s(literal 1/2 binary64)))))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps)))) (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2 binary64)) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) #s(literal 1 binary64))) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal -2 binary64)) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal -2 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal 2 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) #s(literal -2 binary64)) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal -2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal -2 binary64)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal -2 binary64)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal -2 binary64)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 #s(literal 2 binary64) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (*.f64 #s(literal 2 binary64) (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))))) (*.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (*.f64 #s(literal 2 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))))) (*.f64 #s(literal 2 binary64) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (*.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))))) (*.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))))) (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (*.f64 #s(literal -2 binary64) (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (*.f64 #s(literal -2 binary64) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (*.f64 #s(literal -2 binary64) (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))))) (*.f64 #s(literal -2 binary64) (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 #s(literal -2 binary64) (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))))) (*.f64 #s(literal -2 binary64) (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (*.f64 #s(literal -2 binary64) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))))) (*.f64 #s(literal -2 binary64) (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (*.f64 #s(literal -2 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))))) (*.f64 #s(literal -2 binary64) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 #s(literal -2 binary64) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))))) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) #s(literal 2 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2 binary64) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) #s(literal -2 binary64)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal 2 binary64) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal -2 binary64) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps)))) #s(literal -2 binary64)))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal 2 binary64) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal -2 binary64) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) #s(literal 2 binary64) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 2 binary64)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) #s(literal -2 binary64) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal -2 binary64)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal 2 binary64) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) #s(literal 2 binary64)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))) #s(literal -2 binary64)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -2 binary64)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal 2 binary64)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (/.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64)))) #s(literal -2 binary64)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal 2 binary64)))","(/.f64 (+.f64 #s(literal -2 binary64) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (/.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64)))) #s(literal -2 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) (*.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (-.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (*.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(fma.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 2 binary64))) (pow.f64 (*.f64 (cos.f64 x) (-.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal -1 binary64)) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (+.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))))","(fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (+.f64 eps x)))","(fma.f64 (cos.f64 x) (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) (cos.f64 (+.f64 eps x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps)))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (-.f64 x eps))) (pow.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (neg.f64 (cos.f64 x))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(+.f64 (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x))) (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)))","(+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(+.f64 (*.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) (cos.f64 x)) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))))","(+.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x)))","(cos.f64 x)","(*.f64 (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64))","(*.f64 (cos.f64 x) (cos.f64 eps))","(*.f64 (cos.f64 eps) (cos.f64 x))","(pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x)) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (*.f64 #s(literal 1/24 binary64) (cos.f64 x)) eps)","(*.f64 (*.f64 #s(literal 1/24 binary64) eps) (cos.f64 x))","(*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps))","(*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))","(*.f64 (cos.f64 x) (*.f64 #s(literal 1/24 binary64) eps))","(*.f64 eps (*.f64 (cos.f64 x) #s(literal 1/24 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps))) (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps)))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps))) (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64))) (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/576 binary64) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 1/24 binary64)) (*.f64 (cos.f64 x) eps)))))","(/.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/36 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps))) (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (-.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))))) (fma.f64 #s(literal 1/216 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/24 binary64) (cos.f64 x)) eps (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(fma.f64 (*.f64 #s(literal 1/24 binary64) eps) (cos.f64 x) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(fma.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(fma.f64 (cos.f64 x) (*.f64 #s(literal 1/24 binary64) eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)))","(fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)))","(fma.f64 eps (*.f64 (cos.f64 x) #s(literal 1/24 binary64)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 #s(literal -1/24 binary64) (*.f64 (cos.f64 x) eps)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)))","(+.f64 (*.f64 #s(literal 1/24 binary64) (*.f64 (cos.f64 x) eps)) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)))","(*.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64))","(*.f64 (sin.f64 eps) (sin.f64 x))","(*.f64 (sin.f64 x) (sin.f64 eps))","(pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (cos.f64 (-.f64 x eps)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (cos.f64 (+.f64 eps x)))) #s(literal 4 binary64))","(/.f64 (neg.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) #s(literal -2 binary64))","(/.f64 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (cos.f64 (-.f64 x eps)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":332.6669921875,"type":"rewrite"},{"compiler":[[27599,2856]],"memory":[[4434304,65479536]],"time":128.217041015625,"type":"eval"},{"alts":[["(-.f64 #s(approx (+ (* -1 (cos x)) (* (cos eps) (cos x))) (*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 (sin.f64 eps) (sin.f64 x)))","fresh",0.2033096083345771,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))))) #s(literal -2 binary64))","fresh",0.9788012598655421,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","fresh",0.20206011212125052,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","fresh",0.2220963739061918,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","next",0.3195456923574467,"binary64"],["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","next",0.19977510235280851,"binary64"],["#s(approx (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps))","fresh",0.5344712407792276,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","fresh",32.77982008970996,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","fresh",0.797640403536992,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",14.121762762118438,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","fresh",1.2540442815321897,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","fresh",1.553280549819882,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","fresh",1.5239447352747595,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",14.587870697770608,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","next",14.586238801973426,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",14.603352192845701,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","next",14.668674428178154,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","fresh",31.76719891188264,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","fresh",1.2423255315321897,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","next",1.42238215042472,"binary64"]],"compiler":[[30,21],[20,16],[35,24],[30,22],[25,20],[28,22],[28,20],[19,14],[40,27],[13,10],[68,39],[50,31],[58,36],[32,20],[27,18],[22,16],[16,12],[18,14],[74,43],[62,38],[30,21],[20,16],[35,24],[30,22],[25,20],[28,22],[28,20],[19,14],[40,27],[68,39],[50,31],[58,36],[32,20],[27,18],[22,16],[16,12],[18,14],[74,43],[62,38]],"count":[[665,20]],"kept":[{"done":[1,0],"fresh":[3,0],"new":[656,19],"picked":[5,1]}],"memory":[[-8724096,34102272]],"min-error":[[0.0078125,"binary64"]],"time":79.178955078125,"type":"prune"},{"egraph":[[0,8055,508,0.106546787],[5,6333,513,0.037128911],[4,4240,513,0.022429377],[3,1422,516,0.020390776],[2,513,524,0.007817449],[1,205,532,0.002473697],[0,115,535,0.001215913],[0,76,549,0.000768856]],"inputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(fma.f64 #s(literal 1/2 binary64) eps x)","#s(literal 1/2 binary64)","eps","x","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(*.f64 #s(literal 1/2 binary64) eps)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","#s(literal -1/120 binary64)","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))","eps","(fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))","(fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","#s(literal 1/4 binary64)","x","(*.f64 #s(literal 1/6 binary64) eps)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","#s(literal 2 binary64)","x","eps","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64))","(*.f64 #s(literal -1/48 binary64) eps)","#s(literal -1/48 binary64)","#s(literal -2 binary64)"]],"locations":[["(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","cost-diff",0],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","cost-diff",2],["(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))","cost-diff",0],["#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","cost-diff",0],["(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","cost-diff",3],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","cost-diff",1],["(neg.f64 x)","cost-diff",0],["#s(approx (neg (sin x)) (neg.f64 x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","cost-diff",0],["(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","cost-diff",0],["(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","cost-diff",0],["#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","cost-diff",0],["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","cost-diff",0]],"memory":[[4538864,40357424]],"method":["egg-herbie"],"outputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))))","#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) eps x)","(fma.f64 eps #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","eps","x","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) eps)","(*.f64 eps #s(literal 1/2 binary64))","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (neg.f64 x))) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (neg.f64 x))) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (neg.f64 x)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64))","#s(literal -1/120 binary64)","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 (fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (neg.f64 x)) eps)))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 (fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (neg.f64 x)) eps))","(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","(*.f64 (fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (neg.f64 x)) eps)","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps)","eps","(fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))","(fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64))","#s(literal -1/48 binary64)","(*.f64 eps eps)","#s(literal 1/4 binary64)","x","(*.f64 #s(literal 1/6 binary64) eps)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) #s(literal -2 binary64)) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(fma.f64 eps #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","#s(literal 2 binary64)","x","eps","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64))","(*.f64 #s(literal -1/48 binary64) eps)","#s(literal -1/48 binary64)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":318.48291015625,"type":"simplify"},{"compiler":[[389,72]],"locations":[["(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","accuracy",0.058463967955896375],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","accuracy",0.12890625],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))","accuracy",0.13870864765959087],["(*.f64 #s(literal -1/48 binary64) eps)","accuracy",0.37109375],["(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","accuracy",0.01953125],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","accuracy",0.1840252675190592],["(*.f64 #s(literal 1/6 binary64) eps)","accuracy",0.375],["#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","accuracy",1.4106634005320673],["(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","accuracy",0.01953125],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","accuracy",0.0234375],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","accuracy",1.109541204239966],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","accuracy",14.121766298953398],["(neg.f64 x)","accuracy",0.0],["(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","accuracy",0.0234375],["#s(approx (neg (sin x)) (neg.f64 x))","accuracy",1.4378302607702866],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","accuracy",14.121766298953398],["#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","accuracy",0.0],["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","accuracy",0.0234375],["(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","accuracy",0.058463967955896375],["(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","accuracy",0.12890625]],"memory":[[-1027696,101799632]],"mixsample":[[0.02294921875,"const",800],[37.73291015625,"adjust",800],[58.092041015625,"ival-cos",1600],[0.010986328125,"ival-mult",2000],[0.100341796875,"const",400],[0.214111328125,"ival-assert",0],[6.8916015625,"ival-sub",0],[4.58837890625,"ival-cos",0],[18.4462890625,"const",0],[7.77685546875,"ival-cos",400],[21.526611328125,"adjust",2000],[0.010009765625,"ival-mult",800],[72.8837890625,"ival-add",0],[0.044921875,"ival-mult",400],[81.907470703125,"ival-mult",0],[0.34423828125,"ival-cos",800],[12.4013671875,"ival-sin",0],[0.007080078125,"ival-add",2000],[0.132080078125,"const",2000],[0.1220703125,"ival-add",400],[0.1240234375,"adjust",2800],[0.272216796875,"ival-true",0],[0.98291015625,"exact",0],[0.060791015625,"ival-add",800],[3.43359375,"ival-neg",0]],"outcomes":[[141.801513671875,1,"valid",95],[254.145751953125,2,"valid",156],[2.364013671875,3,"valid",1],[2.711181640625,0,"valid",4]],"time":462.22314453125,"type":"localize"},{"count":[[24,120]],"inputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(*.f64 #s(literal 1/6 binary64) eps)","(*.f64 #s(literal -1/48 binary64) eps)","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))"]],"memory":[[-3884704,14065600]],"outputs":[["(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/6 (pow eps 2)) 1))","(+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))","(* 1/2 eps)","(+ x (* 1/2 eps))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(* (sin (* 1/2 eps)) (sin (+ x (* 1/2 eps))))","(sin (+ x (* 1/2 eps)))","(- (cos (+ eps x)) (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* -1/120 (pow x 5))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(* (pow eps 2) (* (pow x 2) (+ 1/4 (* -1/48 (pow eps 2)))))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (+ (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2)))))","(* x (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(sin (* 1/2 (+ eps (* 2 x))))","(* -1/120 (pow x 2))","(* (pow x 2) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(* (sin (* 1/2 eps)) (sin (- (* 1/2 eps) (* -1 x))))","(sin (- (* 1/2 eps) (* -1 x)))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (* eps (- (* 1/6 (pow eps 2)) 1))) (* -1 (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x))) x)) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))))","(* -1 (* x (+ (* -1 (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))) (* -1 (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(sin (* 1/2 (- eps (* -2 x))))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(sin x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 x) (* eps (- (* 1/4 (pow x 2)) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/6 (* eps x)) (* 1/4 (pow x 2))) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/4 (pow x 2)) (* eps (+ (* 1/6 x) (* eps (+ 1/24 (* -1/48 (pow x 2))))))) 1/2))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(* -1 eps)","(* eps (- (* 1/4 (* eps x)) 1))","(* eps (- (* eps (+ (* 1/6 eps) (* 1/4 x))) 1))","(* eps (- (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/48 (* eps x)))))) 1))","(* 1/6 eps)","(* -1/48 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* (pow eps 4) (+ 1/24 (* -1/48 (pow x 2))))","(* (pow eps 4) (+ 1/24 (+ (* -1/48 (pow x 2)) (* 1/6 (/ x eps)))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2)))))) (/ 1/2 (pow eps 2))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1 (/ x (pow eps 3))) (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2))))))) (/ 1/2 (pow eps 2))))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* -1/48 (* (pow eps 4) x))","(* (pow eps 4) (+ (* -1/48 x) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))))","(* (pow eps 4) (- (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))) (/ 1 (pow eps 3))))","(* eps (+ 1/2 (/ x eps)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(* (sin (* 1/2 eps)) (sin (- x (* -1/2 eps))))","(sin (- x (* -1/2 eps)))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ x eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/4 (/ x eps)) 1/6) eps)) (* -1/48 x)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/4 x) (/ 1 eps)) eps)) 1/6) eps)) (* -1/48 x)))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))"]],"series":[[4.805908203125,"((* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (sin (+ (* 1/2 eps) x)) (sin (* 1/2 eps))) (sin (+ (* 1/2 eps) x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (+ (* -1/120 (* x x)) 1/6) (* 1/6 eps) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","eps","-inf"],[3.802978515625,"((* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (sin (+ (* 1/2 eps) x)) (sin (* 1/2 eps))) (sin (+ (* 1/2 eps) x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (+ (* -1/120 (* x x)) 1/6) (* 1/6 eps) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","eps","inf"],[2.801025390625,"((* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (sin (+ (* 1/2 eps) x)) (sin (* 1/2 eps))) (sin (+ (* 1/2 eps) x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (+ (* -1/120 (* x x)) 1/6) (* 1/6 eps) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","eps","0"],[5.8388671875,"((* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (sin (+ (* 1/2 eps) x)) (sin (* 1/2 eps))) (sin (+ (* 1/2 eps) x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (+ (* -1/120 (* x x)) 1/6) (* 1/6 eps) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","x","-inf"],[12.579833984375,"((* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (sin (+ (* 1/2 eps) x)) (sin (* 1/2 eps))) (sin (+ (* 1/2 eps) x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (+ (* -1/120 (* x x)) 1/6) (* 1/6 eps) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","x","inf"],[3.23876953125,"((* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (sin (+ (* 1/2 eps) x)) (sin (* 1/2 eps))) (sin (+ (* 1/2 eps) x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (+ (* -1/120 (* x x)) 1/6) (* 1/6 eps) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","x","0"]],"time":35.64599609375,"type":"series"},{"count":[[120,119]],"egraph":[[0,8111,1672,0.101795417],[2,4385,1826,0.026292427],[1,1532,1893,0.015427904],[0,487,1962,0.005086508]],"inputs":[["(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/6 (pow eps 2)) 1))","(+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))","(* 1/2 eps)","(+ x (* 1/2 eps))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(* (sin (* 1/2 eps)) (sin (+ x (* 1/2 eps))))","(sin (+ x (* 1/2 eps)))","(- (cos (+ eps x)) (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* -1/120 (pow x 5))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(* (pow eps 2) (* (pow x 2) (+ 1/4 (* -1/48 (pow eps 2)))))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (+ (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2)))))","(* x (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(sin (* 1/2 (+ eps (* 2 x))))","(* -1/120 (pow x 2))","(* (pow x 2) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(* (sin (* 1/2 eps)) (sin (- (* 1/2 eps) (* -1 x))))","(sin (- (* 1/2 eps) (* -1 x)))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (* eps (- (* 1/6 (pow eps 2)) 1))) (* -1 (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x))) x)) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))))","(* -1 (* x (+ (* -1 (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))) (* -1 (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(sin (* 1/2 (- eps (* -2 x))))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(sin x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 x) (* eps (- (* 1/4 (pow x 2)) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/6 (* eps x)) (* 1/4 (pow x 2))) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/4 (pow x 2)) (* eps (+ (* 1/6 x) (* eps (+ 1/24 (* -1/48 (pow x 2))))))) 1/2))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(* -1 eps)","(* eps (- (* 1/4 (* eps x)) 1))","(* eps (- (* eps (+ (* 1/6 eps) (* 1/4 x))) 1))","(* eps (- (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/48 (* eps x)))))) 1))","(* 1/6 eps)","(* -1/48 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* (pow eps 4) (+ 1/24 (* -1/48 (pow x 2))))","(* (pow eps 4) (+ 1/24 (+ (* -1/48 (pow x 2)) (* 1/6 (/ x eps)))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2)))))) (/ 1/2 (pow eps 2))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1 (/ x (pow eps 3))) (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2))))))) (/ 1/2 (pow eps 2))))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* -1/48 (* (pow eps 4) x))","(* (pow eps 4) (+ (* -1/48 x) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))))","(* (pow eps 4) (- (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))) (/ 1 (pow eps 3))))","(* eps (+ 1/2 (/ x eps)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(* (sin (* 1/2 eps)) (sin (- x (* -1/2 eps))))","(sin (- x (* -1/2 eps)))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ x eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/4 (/ x eps)) 1/6) eps)) (* -1/48 x)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/4 x) (/ 1 eps)) eps)) 1/6) eps)) (* -1/48 x)))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))"]],"memory":[[7106832,50708640]],"method":["egg-herbie"],"outputs":[["(* -2 (pow (sin (* 1/2 eps)) 2))","(*.f64 (pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal -2 binary64))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(*.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal -2 binary64)) (fma.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(fma.f64 (*.f64 x (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) #s(literal -2 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 x x #s(literal -2 binary64))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (+.f64 #s(literal -2 binary64) (*.f64 x (*.f64 #s(literal 1/3 binary64) x))) (*.f64 (pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) x)) x (*.f64 (pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)) #s(literal -2 binary64)))","(pow (sin (* 1/2 eps)) 2)","(pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64))","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)))) x (pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (fma.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1/2 binary64)))) x (*.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))) x (pow.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 2 binary64)))","(sin (* 1/2 eps))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(fma.f64 (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) x (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (cos.f64 (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1/2 binary64))) x (cos.f64 (*.f64 #s(literal -1/2 binary64) eps))) x (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (neg.f64 x) (sin.f64 eps) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* -1 (* eps x))","(*.f64 (neg.f64 x) eps)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 (neg.f64 x) eps))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(*.f64 (fma.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (*.f64 eps (fma.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x) eps (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) x))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x))","(* eps (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))","(*.f64 eps (fma.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x) eps (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","(* 1/2 eps)","(*.f64 eps #s(literal 1/2 binary64))","(+ x (* 1/2 eps))","(fma.f64 eps #s(literal 1/2 binary64) x)","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* -1/120 (pow x 2)))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* (sin (* 1/2 eps)) (sin (+ x (* 1/2 eps))))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(sin (+ x (* 1/2 eps)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(* -1/120 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 5 binary64)))","(* (pow eps 2) (* (pow x 2) (+ 1/4 (* -1/48 (pow eps 2)))))","(*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (+ (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(*.f64 (fma.f64 (*.f64 eps eps) (+.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) (/.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) x)) (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) x)) (*.f64 x x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2)))))","(*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x) eps) eps)","(* x (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) x)","x","(* x (+ 1 (* 1/2 (/ eps x))))","(fma.f64 (*.f64 (/.f64 eps x) #s(literal 1/2 binary64)) x x)","(sin (* 1/2 (+ eps (* 2 x))))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(* -1/120 (pow x 2))","(*.f64 #s(literal -1/120 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) x) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* (sin (* 1/2 eps)) (sin (- (* 1/2 eps) (* -1 x))))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(sin (- (* 1/2 eps) (* -1 x)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/6 binary64) (*.f64 x x)) #s(literal -1 binary64) #s(literal -1/120 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/120 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 x x)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (* eps (- (* 1/6 (pow eps 2)) 1))) (* -1 (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x))) x)) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps) eps (/.f64 (*.f64 eps (fma.f64 eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) x)) (*.f64 x x))","(* -1 (* x (+ (* -1 (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))) (* -1 (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))))","(*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) x)","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(fma.f64 (*.f64 (/.f64 eps x) #s(literal 1/2 binary64)) x x)","(sin (* 1/2 (- eps (* -2 x))))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(* 1/2 (* eps (sin x)))","(*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (cos.f64 x)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/12 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/12 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/48 binary64))) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(sin x)","(sin.f64 x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(fma.f64 (*.f64 (cos.f64 x) #s(literal 1/2 binary64)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sin.f64 x)) eps (*.f64 (cos.f64 x) #s(literal 1/2 binary64))) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)))) eps (sin.f64 x))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 x) (* eps (- (* 1/4 (pow x 2)) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps)","(* eps (+ (* -1 x) (* eps (- (+ (* 1/6 (* eps x)) (* 1/4 (pow x 2))) 1/2))))","(*.f64 (fma.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps)","(* eps (+ (* -1 x) (* eps (- (+ (* 1/4 (pow x 2)) (* eps (+ (* 1/6 x) (* eps (+ 1/24 (* -1/48 (pow x 2))))))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)) eps (*.f64 #s(literal 1/6 binary64) x)) eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))) eps (neg.f64 x)) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (cos.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps)) eps (neg.f64 (sin.f64 x))) eps)","(* -1 eps)","(neg.f64 eps)","(* eps (- (* 1/4 (* eps x)) 1))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)","(* eps (- (* eps (+ (* 1/6 eps) (* 1/4 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps)","(* eps (- (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/48 (* eps x)))))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal 1/4 binary64) x)) eps #s(literal -1 binary64)) eps)","(* 1/6 eps)","(*.f64 #s(literal 1/6 binary64) eps)","(* -1/48 eps)","(*.f64 #s(literal -1/48 binary64) eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* (pow eps 4) (+ 1/24 (* -1/48 (pow x 2))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)))","(* (pow eps 4) (+ 1/24 (+ (* -1/48 (pow x 2)) (* 1/6 (/ x eps)))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/48 binary64) x (/.f64 #s(literal 1/6 binary64) eps)) #s(literal 1/24 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ 1/24 (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2)))))) (/ 1/2 (pow eps 2))))","(*.f64 (-.f64 (fma.f64 x (fma.f64 #s(literal -1/48 binary64) x (/.f64 #s(literal 1/6 binary64) eps)) (fma.f64 (/.f64 #s(literal 1/4 binary64) eps) (/.f64 (*.f64 x x) eps) #s(literal 1/24 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ 1/24 (+ (* -1 (/ x (pow eps 3))) (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2))))))) (/ 1/2 (pow eps 2))))","(*.f64 (-.f64 (-.f64 (fma.f64 x (fma.f64 #s(literal -1/48 binary64) x (/.f64 #s(literal 1/6 binary64) eps)) (fma.f64 (/.f64 #s(literal 1/4 binary64) eps) (/.f64 (*.f64 x x) eps) #s(literal 1/24 binary64))) (/.f64 x (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* 1/24 (* (pow eps 4) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (cos.f64 x) (+.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 eps eps)) #s(literal 1/24 binary64)) (*.f64 (/.f64 (sin.f64 x) eps) (+.f64 #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (*.f64 eps eps))))) (pow.f64 eps #s(literal 4 binary64)))","(* -1/48 (* (pow eps 4) x))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/48 binary64)) x)","(* (pow eps 4) (+ (* -1/48 x) (* 1/6 (/ 1 eps))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))))","(*.f64 (fma.f64 x (+.f64 #s(literal -1/48 binary64) (/.f64 #s(literal 1/4 binary64) (*.f64 eps eps))) (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))) (/ 1 (pow eps 3))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (+.f64 (/.f64 #s(literal 1/6 binary64) eps) (/.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (/.f64 #s(literal -1 binary64) eps)) eps) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* eps (+ 1/2 (/ x eps)))","(*.f64 (+.f64 (/.f64 x eps) #s(literal 1/2 binary64)) eps)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(* (sin (* 1/2 eps)) (sin (- x (* -1/2 eps))))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(sin (- x (* -1/2 eps)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(*.f64 (-.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (fma.f64 #s(literal -1/6 binary64) x (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ x eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(*.f64 (-.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (/.f64 (fma.f64 #s(literal -1/6 binary64) x (/.f64 (-.f64 (/.f64 x eps) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))) eps)) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (sin.f64 x))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal -1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/4 (/ x eps)) 1/6) eps)) (* -1/48 x)))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (/.f64 (fma.f64 #s(literal -1/4 binary64) (/.f64 x eps) #s(literal -1/6 binary64)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/4 x) (/ 1 eps)) eps)) 1/6) eps)) (* -1/48 x)))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (/.f64 (-.f64 #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (/.f64 #s(literal -1 binary64) eps)) eps)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(*.f64 (+.f64 (/.f64 x eps) #s(literal 1/2 binary64)) eps)","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":263.0830078125,"type":"simplify"},{"count":[[24,294]],"egraph":[[0,9999,403,0.098677277],[2,3747,410,0.043436047],[1,433,410,0.012950359],[0,115,413,0.003294165],[0,76,423,0.000612533]],"inputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","(*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(*.f64 #s(literal 1/6 binary64) eps)","(*.f64 #s(literal -1/48 binary64) eps)","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))"]],"memory":[[-8175840,64660496]],"outputs":[["(*.f64 #s(literal -2 binary64) #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))))","(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(literal -2 binary64))","#s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))))","(*.f64 (-.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (-.f64 x (*.f64 eps #s(literal 1/2 binary64))))) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(literal 1/2 binary64))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(*.f64 (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (-.f64 x (*.f64 eps #s(literal 1/2 binary64))))) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (-.f64 x (*.f64 eps #s(literal 1/2 binary64))))) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x))))) #s(literal -2 binary64))","(/.f64 (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) (fma.f64 eps #s(literal 1/2 binary64) x))) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (-.f64 x (*.f64 eps #s(literal 1/2 binary64))))) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (-.f64 x (*.f64 eps #s(literal 1/2 binary64))))) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(literal 2 binary64))","(fma.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))","(-.f64 (/.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (-.f64 x (*.f64 eps #s(literal 1/2 binary64))))) #s(literal 2 binary64)) (/.f64 (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(literal 2 binary64)))","(+.f64 (*.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) (neg.f64 x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x))))))","(fma.f64 (sin.f64 (+.f64 x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (+.f64 x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x) (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 x) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 x) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))","(fma.f64 #s(literal 0 binary64) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x)) (*.f64 #s(literal 1 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 eps #s(literal 1/2 binary64) (neg.f64 x)))) (cos.f64 (/.f64 (*.f64 x x) (fma.f64 eps #s(literal 1/2 binary64) (neg.f64 x))))) (*.f64 (cos.f64 (/.f64 (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 eps #s(literal 1/2 binary64) (neg.f64 x)))) (sin.f64 (/.f64 (*.f64 x x) (fma.f64 eps #s(literal 1/2 binary64) (neg.f64 x))))))","(+.f64 (*.f64 (sin.f64 (+.f64 x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (+.f64 x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (*.f64 #s(literal 1 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))))","(+.f64 (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)) (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (cos.f64 x) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (neg.f64 x)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (neg (sin x)) (neg.f64 x))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (neg (sin x)) (neg.f64 x)) #s(literal 0 binary64) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(fma.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (neg.f64 x))))","(fma.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (neg.f64 x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(fma.f64 eps #s(approx (neg (sin x)) (neg.f64 x)) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (neg.f64 x))))","(fma.f64 eps #s(approx (neg (sin x)) (neg.f64 x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (neg.f64 x))) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) #s(literal 0 binary64)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (neg.f64 x))))","(+.f64 (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) #s(literal 0 binary64)))","#s(approx (neg (sin x)) (neg.f64 x))","(*.f64 #s(literal -1 binary64) x)","(*.f64 x #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 x x)) (+.f64 #s(literal 0 binary64) x))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))))","(neg.f64 x)","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) (neg.f64 x))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) (neg.f64 x))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64))) (pow.f64 (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))","(pow.f64 (/.f64 (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))) (-.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 eps eps)))) (*.f64 (neg.f64 eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps))) (*.f64 (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (*.f64 eps eps)))) (*.f64 (neg.f64 eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 eps eps)))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps))) (*.f64 (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (*.f64 eps eps)))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 eps eps)) (neg.f64 eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (*.f64 eps eps)) (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal 1/2 binary64)) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (*.f64 eps eps)) (neg.f64 eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps))) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps))) (neg.f64 eps)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (*.f64 eps eps)) (*.f64 eps eps) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (*.f64 (fma.f64 #s(literal 1/576 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -1/48 binary64) eps) eps))) (*.f64 eps eps)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64))) (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))) (-.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) eps (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(fma.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) eps (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps) x (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (*.f64 eps x) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))) (/.f64 (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 eps (-.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))))","(+.f64 (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))))","(+.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64))) (*.f64 (*.f64 eps x) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 eps (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps)))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (*.f64 eps (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) eps))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps)","(*.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) eps (*.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)) eps (*.f64 (*.f64 eps eps) (neg.f64 (*.f64 eps eps)))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))) eps (*.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps)))) (*.f64 (neg.f64 eps) eps))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))) eps (*.f64 (*.f64 eps eps) (neg.f64 (*.f64 eps eps)))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1 binary64)) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))))) (*.f64 eps eps))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (*.f64 eps eps))) (*.f64 eps eps) (*.f64 (neg.f64 eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps) (*.f64 (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(/.f64 (fma.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps) (*.f64 eps (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (*.f64 eps (neg.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (*.f64 eps eps)) (*.f64 eps eps) (*.f64 eps (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps)))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (fma.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 (*.f64 eps eps))))) (*.f64 eps (neg.f64 eps)))","(/.f64 (fma.f64 (neg.f64 (*.f64 eps eps)) (*.f64 eps eps) (*.f64 eps (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)) #s(literal 1 binary64)) eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 3 binary64)) #s(literal -1 binary64)) eps) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1 binary64)))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))) (neg.f64 eps)))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal 3 binary64)) (pow.f64 (neg.f64 eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))) (neg.f64 eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1 binary64)) (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1 binary64)) (*.f64 eps eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64))) (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64))) (*.f64 eps eps)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 eps eps) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))) (pow.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) #s(literal 2 binary64)))))","(fma.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (neg.f64 eps))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) eps (neg.f64 eps))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) #s(literal 0 binary64)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) (*.f64 eps eps) (neg.f64 eps))","(fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))))","(fma.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps) (neg.f64 eps))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(fma.f64 eps (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) #s(literal 0 binary64)))","(fma.f64 eps #s(literal -1 binary64) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) #s(literal 0 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps))","(+.f64 (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))) (neg.f64 eps))","(+.f64 (neg.f64 eps) (*.f64 (*.f64 eps eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) #s(literal 0 binary64)))","(*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal 1/2 binary64)) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) (-.f64 (*.f64 x #s(literal 2 binary64)) eps))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) x (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1/2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) #s(literal -2 binary64)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) #s(literal -2 binary64))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) #s(literal -2 binary64)))","(*.f64 #s(literal -2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(fma.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x)) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/1728000 binary64) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/1728000 binary64) #s(literal 1/216 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/1728000 binary64) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64))))))","(/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/1728000 binary64) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/1728000 binary64) #s(literal 1/216 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/1728000 binary64) #s(literal 1/216 binary64))))","(fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 x (*.f64 #s(literal -1/120 binary64) x) #s(literal 1/6 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))))","(+.f64 (*.f64 (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64)))","(*.f64 #s(literal 1/6 binary64) eps)","(*.f64 eps #s(literal 1/6 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1/6 binary64)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 #s(literal 1/6 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal 1/6 binary64) eps #s(literal 0 binary64))","(fma.f64 eps #s(literal 1/6 binary64) #s(literal 0 binary64))","(+.f64 (*.f64 #s(literal 1/6 binary64) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 1/6 binary64) eps))","(*.f64 #s(literal -1/48 binary64) eps)","(*.f64 eps #s(literal -1/48 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1/48 binary64)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/48 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 #s(literal -1/48 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(literal -1/48 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal -1/48 binary64) eps #s(literal 0 binary64))","(fma.f64 eps #s(literal -1/48 binary64) #s(literal 0 binary64))","(+.f64 (*.f64 #s(literal -1/48 binary64) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/48 binary64) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":343.018798828125,"type":"rewrite"},{"compiler":[[21391,2115]],"memory":[[5508112,38978064]],"time":53.84619140625,"type":"eval"},{"alts":[["(-.f64 #s(approx (+ (* -1 (cos x)) (* (cos eps) (cos x))) (*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 (sin.f64 eps) (sin.f64 x)))","fresh",0.2033096083345771,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))))) #s(literal -2 binary64))","fresh",0.9788012598655421,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","next",0.20206011212125052,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","fresh",0.2220963739061918,"binary64"],["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","next",0.3195456923574467,"binary64"],["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","done",0.19977510235280851,"binary64"],["#s(approx (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps))","fresh",0.5344712407792276,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","fresh",20.16266314738207,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","fresh",32.77982008970996,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","fresh",0.797640403536992,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",14.121762762118438,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","fresh",1.2540442815321897,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","fresh",14.586238756572309,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","next",14.587870697770608,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",14.586238801973426,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",14.603352192845701,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","done",14.668674428178154,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","next",31.76719891188264,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","fresh",1.2423255315321897,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","fresh",1.4223850376362683,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","next",1.4517209381342013,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","fresh",1.5239476074119125,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","fresh",32.580272889601275,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","fresh",14.63534660390376,"binary64"]],"compiler":[[30,21],[20,16],[35,24],[30,22],[31,23],[28,22],[28,20],[22,16],[19,14],[40,27],[13,10],[68,39],[28,19],[32,20],[27,19],[22,16],[16,12],[18,14],[74,43],[74,47],[68,43],[80,48],[82,48],[90,53],[30,21],[20,16],[35,24],[30,22],[31,23],[28,20],[22,16],[19,14],[40,27],[68,39],[28,19],[32,20],[27,19],[22,16],[18,14],[74,43],[74,47],[68,43],[80,48],[82,48],[90,53]],"count":[[415,24]],"kept":[{"done":[1,1],"fresh":[14,12],"new":[395,9],"picked":[5,2]}],"memory":[[304624,26485152]],"min-error":[[0.0078125,"binary64"]],"time":25.510009765625,"type":"prune"},{"egraph":[[0,8193,637,0.087931358],[5,5203,651,0.023389066],[4,4057,651,0.013621852],[3,1738,651,0.01498392],[2,620,659,0.007898618],[1,236,677,0.002441143],[0,128,677,0.001260434],[0,89,687,0.000690733]],"inputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","#s(literal 2 binary64)","x","eps","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64))","#s(literal -1/645120 binary64)","(*.f64 eps eps)","#s(literal 1/3840 binary64)","#s(literal -1/48 binary64)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","(neg.f64 eps)","eps","x","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))","#s(literal 1/5040 binary64)","(*.f64 x x)","x","#s(literal -1/120 binary64)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","#s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 eps #s(literal 1/2 binary64) x)","eps","#s(literal 1/2 binary64)","x","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64))","(*.f64 #s(literal -1/48 binary64) eps)","#s(literal -1/48 binary64)","#s(literal -2 binary64)"]],"locations":[["#s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))","cost-diff",0],["(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","cost-diff",0],["(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","cost-diff",0],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","cost-diff",1],["#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","cost-diff",0],["(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","cost-diff",0],["#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","cost-diff",0],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","cost-diff",0],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","cost-diff",2]],"memory":[[701792,38014464]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(fma.f64 eps #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","#s(literal 2 binary64)","x","eps","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64))","#s(literal -1/645120 binary64)","(*.f64 eps eps)","#s(literal 1/3840 binary64)","#s(literal -1/48 binary64)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps))))","#s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (- (cos eps) 1) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps)))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (*.f64 eps eps))","(*.f64 eps eps)","eps","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","(neg.f64 eps)","eps","x","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps)","(*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps)","(fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))","(fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64))","#s(literal 1/5040 binary64)","(*.f64 x x)","x","#s(literal -1/120 binary64)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) #s(literal -2 binary64)) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))))","(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))))","(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","#s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 eps #s(literal 1/2 binary64) x)","eps","#s(literal 1/2 binary64)","x","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64))","(*.f64 #s(literal -1/48 binary64) eps)","#s(literal -1/48 binary64)","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":237.6318359375,"type":"simplify"},{"compiler":[[438,85]],"locations":[["(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","accuracy",0.058463967955896375],["(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","accuracy",0.12890625],["#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))","accuracy",0.13870864765959087],["(*.f64 #s(literal -1/48 binary64) eps)","accuracy",0.37109375],["(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","accuracy",0.01171875],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","accuracy",0.0234375],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","accuracy",1.0981397971452524],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","accuracy",14.121766298953398],["(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","accuracy",0.01953125],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","accuracy",0.1840252675190592],["#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","accuracy",0.7815464653068658],["#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","accuracy",1.4106634005320673],["(*.f64 eps eps)","accuracy",0.0],["(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","accuracy",0.0078125],["#s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.40126920915642],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","accuracy",31.76718998744719],["(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","accuracy",0.0078125],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","accuracy",0.0234375],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","accuracy",0.058463967955896375],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","accuracy",0.12890625]],"memory":[[-400032,125082176]],"mixsample":[[44.951904296875,"adjust",800],[87.041748046875,"ival-cos",1600],[0.20849609375,"ival-assert",0],[10.644287109375,"ival-sub",0],[6.68701171875,"ival-cos",0],[38.834716796875,"const",0],[12.258056640625,"ival-cos",400],[28.451171875,"adjust",2000],[39.962890625,"ival-add",0],[179.47998046875,"ival-mult",0],[0.35205078125,"ival-cos",800],[8.882080078125,"ival-sin",0],[0.1298828125,"ival-add",400],[0.347412109375,"ival-true",0],[1.19482421875,"exact",0],[0.092041015625,"ival-add",800],[4.58837890625,"ival-neg",0]],"outcomes":[[122.69140625,1,"valid",86],[425.510498046875,2,"valid",167],[2.017822265625,0,"valid",3]],"time":624.989013671875,"type":"localize"},{"count":[[24,127]],"inputs":[["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","#s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(*.f64 #s(literal -1/48 binary64) eps)","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))"]],"memory":[[4680224,12901360]],"outputs":[["(* 1/2 eps)","(+ x (* 1/2 eps))","(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/6 (pow eps 2)) 1))","(+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(sin (* 1/2 (+ eps (* 2 x))))","(- (cos (+ eps x)) (cos x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(* (pow eps 2) (* (pow x 2) (+ 1/4 (* -1/48 (pow eps 2)))))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (+ (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2)))))","(* x (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(* 1/5040 (pow x 7))","(* (pow x 7) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6)))))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* 1/5040 (pow x 4))","(* (pow x 4) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 4) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(sin (* 1/2 (- eps (* -2 x))))","(- (cos (- eps (* -1 x))) (cos x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (* eps (- (* 1/6 (pow eps 2)) 1))) (* -1 (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x))) x)) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))))","(* -1 (* x (+ (* -1 (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))) (* -1 (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) 1/5040)))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(* -1 (* (pow x 7) (- (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(sin x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(pow eps 2)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(* eps (+ (* -1 x) (* eps (- (* 1/4 (pow x 2)) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/6 (* eps x)) (* 1/4 (pow x 2))) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/4 (pow x 2)) (* eps (+ (* 1/6 x) (* eps (+ 1/24 (* -1/48 (pow x 2))))))) 1/2))))","(* -1 eps)","(* eps (- (* 1/4 (* eps x)) 1))","(* eps (- (* eps (+ (* 1/6 eps) (* 1/4 x))) 1))","(* eps (- (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/48 (* eps x)))))) 1))","-1/48","(- (* 1/3840 (pow eps 2)) 1/48)","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(* -1/48 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ 1/2 (/ x eps)))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* (pow eps 4) (+ 1/24 (* -1/48 (pow x 2))))","(* (pow eps 4) (+ 1/24 (+ (* -1/48 (pow x 2)) (* 1/6 (/ x eps)))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2)))))) (/ 1/2 (pow eps 2))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1 (/ x (pow eps 3))) (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2))))))) (/ 1/2 (pow eps 2))))","(* -1/48 (* (pow eps 4) x))","(* (pow eps 4) (+ (* -1/48 x) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))))","(* (pow eps 4) (- (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))) (/ 1 (pow eps 3))))","(* -1/645120 (pow eps 4))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ x eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/4 (/ x eps)) 1/6) eps)) (* -1/48 x)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/4 x) (/ 1 eps)) eps)) 1/6) eps)) (* -1/48 x)))"]],"series":[[4.614990234375,"((* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (* (* eps eps) -1/2) (* eps eps) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (* 1/2 (+ (* 2 x) eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","eps","-inf"],[5.81103515625,"((* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (* (* eps eps) -1/2) (* eps eps) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (* 1/2 (+ (* 2 x) eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","eps","inf"],[3.4599609375,"((* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (* (* eps eps) -1/2) (* eps eps) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (* 1/2 (+ (* 2 x) eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","eps","0"],[5.265869140625,"((* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (* (* eps eps) -1/2) (* eps eps) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (* 1/2 (+ (* 2 x) eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","x","-inf"],[4.583984375,"((* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (* (* eps eps) -1/2) (* eps eps) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (* 1/2 (+ (* 2 x) eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","x","inf"],[2.12890625,"((* 1/2 (+ (* 2 x) eps)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (* (* eps eps) -1/2) (* eps eps) (- (cos (+ x eps)) (cos x)) (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (sin (* 1/2 (+ (* 2 x) eps))) (* 1/2 (+ (* 2 x) eps)) (+ (* (+ (* -1/645120 (* eps eps)) 1/3840) (* eps eps)) -1/48) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* -1/48 eps) (sin (* 1/2 (+ 0 eps))))","x","0"]],"time":28.962158203125,"type":"series"},{"count":[[127,126]],"egraph":[[0,8328,1851,0.10269261],[2,4630,2014,0.026645741],[1,1609,2018,0.017164248],[0,515,2075,0.005067109]],"inputs":[["(* 1/2 eps)","(+ x (* 1/2 eps))","(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(* eps (- (* 1/6 (pow eps 2)) 1))","(+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(sin (* 1/2 (+ eps (* 2 x))))","(- (cos (+ eps x)) (cos x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(* (pow eps 2) (* (pow x 2) (+ 1/4 (* -1/48 (pow eps 2)))))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (+ (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2)))))","(* x (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(* 1/5040 (pow x 7))","(* (pow x 7) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6)))))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* 1/5040 (pow x 4))","(* (pow x 4) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 4) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(sin (* 1/2 (- eps (* -2 x))))","(- (cos (- eps (* -1 x))) (cos x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (* eps (- (* 1/6 (pow eps 2)) 1))) (* -1 (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x))) x)) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))))","(* -1 (* x (+ (* -1 (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))) (* -1 (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) 1/5040)))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(* -1 (* (pow x 7) (- (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(sin x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* -1/2 (pow eps 2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(pow eps 2)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(* eps (+ (* -1 x) (* eps (- (* 1/4 (pow x 2)) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/6 (* eps x)) (* 1/4 (pow x 2))) 1/2))))","(* eps (+ (* -1 x) (* eps (- (+ (* 1/4 (pow x 2)) (* eps (+ (* 1/6 x) (* eps (+ 1/24 (* -1/48 (pow x 2))))))) 1/2))))","(* -1 eps)","(* eps (- (* 1/4 (* eps x)) 1))","(* eps (- (* eps (+ (* 1/6 eps) (* 1/4 x))) 1))","(* eps (- (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/48 (* eps x)))))) 1))","-1/48","(- (* 1/3840 (pow eps 2)) 1/48)","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(* -1/48 eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(* eps (+ 1/2 (/ x eps)))","(* 1/24 (* (pow eps 4) (cos x)))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(* (pow eps 4) (+ 1/24 (* -1/48 (pow x 2))))","(* (pow eps 4) (+ 1/24 (+ (* -1/48 (pow x 2)) (* 1/6 (/ x eps)))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2)))))) (/ 1/2 (pow eps 2))))","(* (pow eps 4) (- (+ 1/24 (+ (* -1 (/ x (pow eps 3))) (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2))))))) (/ 1/2 (pow eps 2))))","(* -1/48 (* (pow eps 4) x))","(* (pow eps 4) (+ (* -1/48 x) (* 1/6 (/ 1 eps))))","(* (pow eps 4) (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))))","(* (pow eps 4) (- (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))) (/ 1 (pow eps 3))))","(* -1/645120 (pow eps 4))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(- (cos (- x (* -1 eps))) (cos x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ x eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/4 (/ x eps)) 1/6) eps)) (* -1/48 x)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/4 x) (/ 1 eps)) eps)) 1/6) eps)) (* -1/48 x)))"]],"memory":[[-3871536,51562160]],"method":["egg-herbie"],"outputs":[["(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(+ x (* 1/2 eps))","(fma.f64 #s(literal 1/2 binary64) eps x)","(* -2 (pow (sin (* 1/2 eps)) 2))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(literal -2 binary64))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(fma.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64) (*.f64 (*.f64 x x) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(fma.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64) (*.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/3 binary64) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)))))","(pow (sin (* 1/2 eps)) 2)","(pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (*.f64 x (*.f64 #s(literal -1/2 binary64) x)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(literal -1/2 binary64))) x (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) x (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)))","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal -1/2 binary64))) x (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (neg.f64 x) (sin.f64 eps) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)","(+ (* eps (* x (- (* 1/6 (pow eps 2)) 1))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) x))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) eps) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x))","(+ (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* eps (* x (+ 1/6 (* -1/36 (pow eps 2))))) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))))))) (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) eps) eps)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x))","(* eps (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2))))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) eps) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* -1 (* eps x))","(*.f64 (neg.f64 eps) x)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal -1/120 binary64) (*.f64 #s(literal 1/6 binary64) eps)) (*.f64 (neg.f64 eps) x))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/5040 binary64) (*.f64 #s(literal -1/120 binary64) eps)) x) x (*.f64 #s(literal 1/6 binary64) eps)) (*.f64 (neg.f64 eps) x))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* -1/120 (pow x 2)))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin (* 1/2 (+ eps (* 2 x))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* (pow eps 2) (* (pow x 2) (+ 1/4 (* -1/48 (pow eps 2)))))","(*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps)","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) eps) eps (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) x)) (*.f64 x x))","(* (pow x 2) (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (+ (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x) (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) (pow x 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) x) (/.f64 eps x) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) eps) eps (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) x))) (*.f64 x x))","(* (pow eps 2) (* x (+ 1/4 (* -1/48 (pow eps 2)))))","(*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) eps) eps)","(* x (+ (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2)))) (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) eps) eps (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) x)) x)","(* 1/5040 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/5040 binary64))","(* (pow x 7) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (-.f64 #s(literal 1/5040 binary64) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6)))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(* 1/5040 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64))","(* (pow x 4) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/5040 binary64) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))))","(* (pow x 4) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(fma.f64 (*.f64 (/.f64 eps x) #s(literal -1/2 binary64)) (neg.f64 x) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin (* 1/2 (- eps (* -2 x))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (* eps (- (* 1/6 (pow eps 2)) 1))) (* -1 (/ (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)) x))) x)) (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) eps) eps (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) x) (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x)) (*.f64 x x))","(* -1 (* x (+ (* -1 (* (pow eps 2) (+ 1/4 (* -1/48 (pow eps 2))))) (* -1 (/ (* eps (- (* 1/6 (pow eps 2)) 1)) x)))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) eps) eps (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) x)) x)","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) 1/5040)))","(*.f64 (-.f64 #s(literal 1/5040 binary64) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(*.f64 (fma.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/5040 binary64) (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal -1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(*.f64 (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)))) (pow.f64 x #s(literal 7 binary64)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* 1/2 (* eps (sin x)))","(*.f64 (*.f64 (sin.f64 x) #s(literal 1/2 binary64)) eps)","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (cos.f64 x)) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/12 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/12 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/48 binary64))) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 (sin.f64 x) #s(literal 1/2 binary64))) eps)","(sin x)","(sin.f64 x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(fma.f64 (*.f64 (cos.f64 x) #s(literal 1/2 binary64)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sin.f64 x)) eps (*.f64 (cos.f64 x) #s(literal 1/2 binary64))) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/48 binary64))) eps (*.f64 (cos.f64 x) #s(literal 1/2 binary64))) eps (sin.f64 x))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(pow eps 2)","(*.f64 eps eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* 1/24 (* eps (cos x))) (* 1/6 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 x) (* eps (- (* 1/4 (pow x 2)) 1/2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps)","(* eps (+ (* -1 x) (* eps (- (+ (* 1/6 (* eps x)) (* 1/4 (pow x 2))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps x) #s(literal 1/6 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64))) eps (neg.f64 x)) eps)","(* eps (+ (* -1 x) (* eps (- (+ (* 1/4 (pow x 2)) (* eps (+ (* 1/6 x) (* eps (+ 1/24 (* -1/48 (pow x 2))))))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64)) eps (*.f64 #s(literal 1/6 binary64) x)) eps (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64))) eps (neg.f64 x)) eps)","(* -1 eps)","(neg.f64 eps)","(* eps (- (* 1/4 (* eps x)) 1))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)","(* eps (- (* eps (+ (* 1/6 eps) (* 1/4 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal -1 binary64)) eps)","(* eps (- (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/48 (* eps x)))))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps x) #s(literal -1/48 binary64) #s(literal 1/6 binary64)) eps (*.f64 #s(literal 1/4 binary64) x)) eps #s(literal -1 binary64)) eps)","-1/48","#s(literal -1/48 binary64)","(- (* 1/3840 (pow eps 2)) 1/48)","(fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64))","(- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48)","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(* -1/48 eps)","(*.f64 #s(literal -1/48 binary64) eps)","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (/ x eps)))","(*.f64 (+.f64 (/.f64 x eps) #s(literal 1/2 binary64)) eps)","(* 1/24 (* (pow eps 4) (cos x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/24 binary64)) (cos.f64 x))","(* (pow eps 4) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))","(*.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 (cos.f64 x) eps) (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x)))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (sin x) (pow eps 3))) (+ (* -1/2 (/ (cos x) (pow eps 2))) (+ (* 1/24 (cos x)) (* 1/6 (/ (sin x) eps))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) eps) (/.f64 (cos.f64 x) eps) (-.f64 (fma.f64 (/.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) (cos.f64 x))) (/.f64 (sin.f64 x) (pow.f64 eps #s(literal 3 binary64))))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ 1/24 (* -1/48 (pow x 2))))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64)))","(* (pow eps 4) (+ 1/24 (+ (* -1/48 (pow x 2)) (* 1/6 (/ x eps)))))","(*.f64 (fma.f64 (/.f64 x eps) #s(literal 1/6 binary64) (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ 1/24 (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2)))))) (/ 1/2 (pow eps 2))))","(*.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (*.f64 x x) eps) (/.f64 #s(literal 1/4 binary64) eps) (*.f64 (/.f64 x eps) #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ 1/24 (+ (* -1 (/ x (pow eps 3))) (+ (* -1/48 (pow x 2)) (+ (* 1/6 (/ x eps)) (* 1/4 (/ (pow x 2) (pow eps 2))))))) (/ 1/2 (pow eps 2))))","(*.f64 (-.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (*.f64 x x) eps) (/.f64 #s(literal 1/4 binary64) eps) (*.f64 (/.f64 x eps) #s(literal 1/6 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64))) (/.f64 x (pow.f64 eps #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1/48 (* (pow eps 4) x))","(*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) x) #s(literal -1/48 binary64))","(* (pow eps 4) (+ (* -1/48 x) (* 1/6 (/ 1 eps))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (/.f64 #s(literal 1/6 binary64) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))))","(*.f64 (fma.f64 (/.f64 (/.f64 x eps) eps) #s(literal 1/4 binary64) (fma.f64 #s(literal -1/48 binary64) x (/.f64 #s(literal 1/6 binary64) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ (* -1/48 x) (+ (* 1/4 (/ x (pow eps 2))) (* 1/6 (/ 1 eps)))) (/ 1 (pow eps 3))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (+.f64 (/.f64 #s(literal 1/6 binary64) eps) (/.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) x (/.f64 #s(literal -1 binary64) eps)) eps) eps))) (pow.f64 eps #s(literal 4 binary64)))","(* -1/645120 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/645120 binary64))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) 1/645120))","(*.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* 1/3840 (/ 1 (pow eps 2))) (+ 1/645120 (/ 1/48 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3840 binary64) (*.f64 eps eps)) #s(literal 1/645120 binary64)) (/.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(*.f64 (+.f64 (/.f64 x eps) #s(literal 1/2 binary64)) eps)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (sin.f64 x))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x))) eps)) (* 1/24 (cos x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) (cos.f64 x) (/.f64 (fma.f64 #s(literal -1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) (neg.f64 eps))) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(*.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64)) (/.f64 (fma.f64 #s(literal -1/6 binary64) x (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) (neg.f64 eps))) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ 1/24 (+ (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ x eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* -1/6 x)) eps)) (* -1/48 (pow x 2)))))","(*.f64 (-.f64 (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/24 binary64)) (/.f64 (fma.f64 #s(literal -1/6 binary64) x (/.f64 (-.f64 (/.f64 x eps) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64))) eps)) eps)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1/4 (/ x eps)) 1/6) eps)) (* -1/48 x)))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (/.f64 (fma.f64 #s(literal -1/4 binary64) (/.f64 x eps) #s(literal -1/6 binary64)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (+ (* -1 (/ (- (* -1 (/ (- (* 1/4 x) (/ 1 eps)) eps)) 1/6) eps)) (* -1/48 x)))","(*.f64 (fma.f64 #s(literal -1/48 binary64) x (/.f64 (-.f64 #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (/.f64 #s(literal -1 binary64) eps)) eps)) (neg.f64 eps))) (pow.f64 eps #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":267.9638671875,"type":"simplify"},{"count":[[24,188]],"egraph":[[0,8195,492,0.076811596],[2,4429,508,0.04566496],[1,507,508,0.015053437],[0,128,508,0.003625952],[0,89,518,0.000650948]],"inputs":[["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps)))","(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))","#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","#s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))","(fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(*.f64 #s(literal -1/48 binary64) eps)","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))"]],"memory":[[4089808,50676816]],"outputs":[["(*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps)) #s(literal 1/2 binary64)) (fma.f64 x #s(literal 2 binary64) (neg.f64 eps)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 (neg.f64 eps) eps))) (fma.f64 x #s(literal 2 binary64) (neg.f64 eps)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))) (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/8 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 eps eps)) (*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1/2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) x (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 #s(literal 1 binary64) x))","(+.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(*.f64 (*.f64 #s(literal -2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 #s(literal -2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) #s(literal -2 binary64))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) (*.f64 #s(literal -2 binary64) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)))","(fma.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x)) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps))))","#s(approx (- (cos eps) 1) (*.f64 #s(literal -1/2 binary64) (*.f64 eps eps)))","(*.f64 (*.f64 #s(literal -1/2 binary64) eps) eps)","(*.f64 #s(literal -1/2 binary64) (*.f64 eps eps))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps (*.f64 #s(literal -1/2 binary64) eps))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (*.f64 #s(literal -1/2 binary64) eps)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 #s(literal -1/2 binary64) eps)) (*.f64 eps eps))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)))","(*.f64 (neg.f64 eps) (neg.f64 eps))","(*.f64 eps (-.f64 eps #s(literal 0 binary64)))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (neg.f64 eps) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (neg.f64 eps))","(/.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 eps eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))))","(/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 eps eps))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (pow.f64 (neg.f64 eps) #s(literal 3 binary64)))","(/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 eps) (neg.f64 eps) #s(literal 0 binary64))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) #s(literal 0 binary64))","(fma.f64 eps eps #s(literal 0 binary64))","(-.f64 (*.f64 eps eps) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(+.f64 (*.f64 eps eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 eps eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64))) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) (*.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))","(fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))","(fma.f64 eps (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))","(fma.f64 x #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps)))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) #s(literal 2 binary64)) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) (*.f64 eps eps)))))","(+.f64 (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))","#s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) (*.f64 x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x (*.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x) (*.f64 #s(literal -1 binary64) x))","(+.f64 (*.f64 #s(literal -1 binary64) x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x))","(+.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) #s(literal -2 binary64)) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))))","(*.f64 (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))) #s(literal -2 binary64))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(literal -2 binary64)))","(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) #s(literal -2 binary64)))","(*.f64 #s(literal -2 binary64) (*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))))","(*.f64 #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)) (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))))","(*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps)))","(sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x)))","#s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 #s(literal -1/48 binary64) eps))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 #s(literal -1/48 binary64) eps))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/2304 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 #s(literal -1/48 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (+.f64 #s(literal 1/2304 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 #s(literal -1/48 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 #s(literal -1/48 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/2304 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/2304 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) (*.f64 #s(literal -1/48 binary64) eps))) (fma.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/110592 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps #s(literal -1/48 binary64))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal -1/48 binary64))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) #s(literal -1/48 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))) (/.f64 #s(literal 1/2304 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal 1/48 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps) #s(literal -1/48 binary64))","(+.f64 #s(literal -1/48 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/645120 binary64) #s(literal 1/3840 binary64)) eps) eps))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) (*.f64 x #s(literal 1/6 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) (*.f64 x #s(literal 1/6 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) (*.f64 x #s(literal 1/6 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) (*.f64 x #s(literal 1/6 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) (*.f64 x #s(literal 1/6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) (*.f64 x #s(literal 1/6 binary64)))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) x #s(literal 1/6 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 1/6 binary64))","(fma.f64 x (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) #s(literal 1/6 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) x) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/5040 binary64) #s(literal -1/120 binary64)) x) x))","(*.f64 #s(literal -1/48 binary64) eps)","(*.f64 eps #s(literal -1/48 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal -1/48 binary64)) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/48 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 #s(literal -1/48 binary64) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(literal -1/48 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal -1/48 binary64) eps #s(literal 0 binary64))","(fma.f64 eps #s(literal -1/48 binary64) #s(literal 0 binary64))","(+.f64 (*.f64 #s(literal -1/48 binary64) eps) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal -1/48 binary64) eps))","#s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":260.699951171875,"type":"rewrite"},{"compiler":[[20570,2385]],"memory":[[-10562576,42497440]],"time":131.662109375,"type":"eval"},{"alts":[["(-.f64 #s(approx (+ (* -1 (cos x)) (* (cos eps) (cos x))) (*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 (sin.f64 eps) (sin.f64 x)))","fresh",0.2033096083345771,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))))) #s(literal -2 binary64))","fresh",0.9788012598655421,"binary64"],["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","fresh",0.20206011212125052,"binary64"],["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","fresh",0.2220963739061918,"binary64"],["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","done",0.3195456923574467,"binary64"],["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","done",0.19977510235280851,"binary64"],["#s(approx (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps))","fresh",0.5344712407792276,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","fresh",20.16266314738207,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","fresh",32.77982008970996,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","fresh",0.797640403536992,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",14.121762762118438,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","fresh",1.2540442815321897,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","fresh",14.586238756572309,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","done",14.587870697770608,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",14.586238801973426,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",14.603352192845701,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","done",14.668674428178154,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","done",31.76719891188264,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","fresh",1.5376583846999117,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","fresh",1.2423255315321897,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","fresh",1.4223850376362683,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","done",1.4517209381342013,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","fresh",1.5239476074119125,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","fresh",32.580272889601275,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","fresh",14.63534660390376,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","fresh",14.603352238228046,"binary64"]],"compiler":[[1651,312],[30,21],[20,16],[41,27],[36,25],[31,23],[28,22],[28,20],[22,16],[19,14],[40,27],[13,10],[68,39],[28,19],[32,20],[27,19],[22,16],[16,12],[18,14],[68,42],[74,43],[74,47],[68,43],[80,48],[82,49],[90,53],[25,17]],"count":[[452,26]],"kept":[{"done":[3,3],"fresh":[16,13],"new":[428,6],"picked":[5,4]}],"memory":[[3512336,30789808]],"min-error":[[0.0078125,"binary64"]],"time":31.10986328125,"type":"prune"},{"accuracy":[0.19977510235280851],"baseline":[0.19977510235280851],"branch":[["x",0.19977510235280851,1,"binary64"],["eps",0.19977510235280851,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.19977510235280851,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[43,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps))","(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))))) #s(literal -2 binary64))","(-.f64 #s(approx (+ (* -1 (cos x)) (* (cos eps) (cos x))) (*.f64 (*.f64 (*.f64 (cos.f64 x) eps) eps) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 (sin.f64 eps) (sin.f64 x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))"]],"memory":[[1194656,16789472]],"oracle":[33.11959765271105],"outputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))"]],"repr":["binary64"],"time":29.93115234375,"times":[[9.972900390625,"x"],[8.818115234375,"eps"],[8.39892578125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.20206011212125052],"baseline":[0.20206011212125052],"branch":[["x",0.20206011212125052,1,"binary64"],["eps",0.20206011212125052,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.20206011212125052,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[36,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (+ (* -1 (cos x)) (* (cos eps) (cos x))) (* (sin eps) (sin x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (neg.f64 (sin.f64 x))) eps))"]],"memory":[[-2304224,14809296]],"oracle":[33.11959765271105],"outputs":[["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"]],"repr":["binary64"],"time":24.969970703125,"times":[[8.409912109375,"x"],[7.599853515625,"eps"],[6.68505859375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.2220963739061918],"baseline":[0.2220963739061918],"branch":[["x",0.2220963739061918,1,"binary64"],["eps",0.2220963739061918,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.2220963739061918,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[31,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"]],"memory":[[-2996144,13506416]],"oracle":[33.11959765271105],"outputs":[["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"]],"repr":["binary64"],"time":21.739013671875,"times":[[6.593017578125,"x"],[7.0048828125,"eps"],[5.85986328125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.3195456923574467],"baseline":[0.3195456923574467],"branch":[["x",0.3195456923574467,1,"binary64"],["eps",0.3195456923574467,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.3195456923574467,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[29,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"]],"memory":[[4605072,12787648]],"oracle":[33.11959765271105],"outputs":[["(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"]],"repr":["binary64"],"time":19.97705078125,"times":[[6.4638671875,"x"],[6.251953125,"eps"],[5.27685546875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.797640403536992],"baseline":[0.797640403536992],"branch":[["x",0.797640403536992,1,"binary64"],["eps",0.797640403536992,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.797640403536992,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[27,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))"]],"memory":[[-4967920,12325744]],"oracle":[33.11959765271105],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))"]],"repr":["binary64"],"time":19.93603515625,"times":[[6.0419921875,"x"],[6.064208984375,"eps"],[5.85595703125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.2423255315321897],"baseline":[1.2423255315321897],"branch":[["x",1.24232553153219,1,"binary64"],["eps",1.2423255315321897,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.2423255315321897,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[26,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))"]],"memory":[[3958912,12072928]],"oracle":[33.11959765271105],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))"]],"repr":["binary64"],"time":18.491943359375,"times":[[6.1181640625,"x"],[5.718994140625,"eps"],[4.76416015625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.2540442815321897],"baseline":[1.2540442815321897],"branch":[["x",1.25404428153219,1,"binary64"],["eps",1.2540442815321897,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.2540442815321897,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[22,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))"]],"memory":[[2818048,10778432]],"oracle":[33.11908100416383],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))"]],"repr":["binary64"],"time":16.0869140625,"times":[[5.10009765625,"x"],[5.23291015625,"eps"],[4.094970703125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.4223821504247198],"baseline":[1.42238215042472],"branch":[["x",1.42238215042472,1,"binary64"],["eps",1.4223821504247198,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.4223821504247198,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[21,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"]],"memory":[[-8256192,10560720]],"oracle":[33.11908100416383],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"]],"repr":["binary64"],"time":19.116943359375,"times":[[4.913818359375,"x"],[4.778076171875,"eps"],[7.601806640625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.4223850376362683],"baseline":[1.4223850376362683],"branch":[["x",1.4223850376362683,1,"binary64"],["eps",1.4223850376362683,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.4223850376362683,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[20,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))) (*.f64 x x)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))"]],"memory":[[2126256,10264160]],"oracle":[33.11908100416383],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"]],"repr":["binary64"],"time":14.902099609375,"times":[[4.83203125,"x"],[4.60302734375,"eps"],[3.739990234375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.4517209381342013],"baseline":[1.4517209381342013],"branch":[["x",1.451720938134201,1,"binary64"],["eps",1.4517209381342013,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.4517209381342013,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[16,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) (*.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 x (*.f64 (*.f64 eps eps) x)) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64))))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/48 binary64) #s(literal 1/4 binary64)) x) x) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))"]],"memory":[[889504,8949008]],"oracle":[33.11903413044046],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))"]],"repr":["binary64"],"time":12.716064453125,"times":[[4.1220703125,"x"],[3.891845703125,"eps"],[3.2158203125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[1.5239476074119125],"baseline":[1.5239476074119125],"branch":[["x",1.5239476074119125,1,"binary64"],["eps",1.5239476074119125,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.523947607411913,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[8,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (neg (sin x)) (neg.f64 x))) (neg.f64 eps)))"]],"memory":[[-2806688,6466208]],"oracle":[33.02264313612589],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))"]],"repr":["binary64"],"time":8.14794921875,"times":[[2.6328125,"x"],[2.48095703125,"eps"],[1.990966796875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[14.603352192845701],"baseline":[14.603352192845701],"branch":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",14.603352192845701,1,"binary64"],["x",14.603352192845703,1,"binary64"],["eps",14.603352192845701,1,"binary64"]],"compiler":[[7,6],[1,2],[1,2]],"count":[[5,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (neg (sin x)) eps) (*.f64 (fma.f64 (*.f64 (*.f64 eps x) x) #s(literal 1/6 binary64) (neg.f64 eps)) x)))"]],"memory":[[5552704,5552704]],"oracle":[33.02264313612589],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))"]],"repr":["binary64"],"time":5.924072265625,"times":[[1.6201171875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[1.93603515625,"x"],[1.77099609375,"eps"]],"type":"regimes"},{"accuracy":[14.668674428178154],"baseline":[14.668674428178154],"branch":[["x",14.668674428178155,1,"binary64"],["eps",14.668674428178154,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",14.668674428178154,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[3,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (- (cos eps) 1) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 #s(approx (cos eps) (fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))"]],"link":["."],"memory":[[-3285008,4968496]],"name":["2cos (problem 3.3.5)"],"oracle":[32.99809739225717],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"repr":["binary64"],"time":4.911865234375,"times":[[1.512939453125,"x"],[1.6259765625,"eps"],[1.18408203125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"egraph":[[6,5933,621,0.024323518],[5,4082,621,0.014837438],[4,3096,621,0.013111312],[3,1399,623,0.012748876],[2,489,630,0.007950614],[1,218,630,0.003679232],[0,145,632,0.002410655]],"inputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"memory":[[4273920,12506112]],"method":["egg-herbie"],"outputs":[["(*.f64 #s(approx (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","(*.f64 (*.f64 (sin.f64 #s(approx (* 1/2 (+ (* 2 x) eps)) (fma.f64 eps #s(literal 1/2 binary64) x))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/48 binary64) eps) eps #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 #s(approx (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x) x) eps (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) (fma.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 (*.f64 eps (fma.f64 eps (fma.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/4 binary64)) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64))) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) x #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) (fma.f64 #s(approx (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) (neg.f64 eps)) x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/24 binary64) #s(literal -1/2 binary64)) eps) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (- (* (+ (* (+ (* (sin x) 1/6) (* (* (cos x) eps) 1/24)) eps) (* (cos x) -1/2)) eps) (sin x)) eps) #s(approx (+ (* (* eps (+ (* eps (+ (* (+ (* -1/48 (* eps eps)) 1/4) x) (* 1/6 eps))) -1)) x) (* (* (+ (* (* eps eps) 1/24) -1/2) eps) eps)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps (neg.f64 x)) eps))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"stop":[["node limit",1]],"time":102.22412109375,"type":"simplify"},{"compiler":[[640,152],[0,2],[5,5],[0,2],[5,5],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[23,18],[18,14],[7,6],[29,20],[23,18],[18,14],[7,6],[34,22],[23,18],[18,14],[7,6],[12,10],[7,6]],"egraph":[[0,8328,1851,0.099784556],[2,4630,2014,0.024739979],[1,1609,2018,0.01437247],[0,515,2075,0.005302796],[0,8238,2073,0.090768983],[2,5622,2288,0.024651796],[1,1836,2371,0.017898298],[0,569,2475,0.005738689],[0,8397,272,0.082889116],[3,2426,292,0.034455631],[2,628,293,0.008297202],[1,277,293,0.001886543],[0,105,296,0.001012198],[0,8111,1672,0.096652604],[2,4385,1826,0.024741264],[1,1532,1893,0.014278112],[0,487,1962,0.004874529],[0,8343,16,0.072819103],[3,4790,16,0.043783131],[2,385,16,0.012517986],[1,54,16,0.001445885],[0,10,16,0.000617595],[0,6,16,8.9935e-5]],"memory":[[-4754624,12166176]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":2235.974853515625,"type":"soundness"},{"compiler":[[640,152],[640,152],[17,15],[17,15],[7,6],[7,6]],"memory":[[2262016,48881984]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":82.0439453125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.009033203125,"type":"end"}]