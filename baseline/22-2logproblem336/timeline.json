[{"memory":[[14864,14864]],"time":0.029052734375,"type":"start"},{"compiler":[[15,10]],"memory":[[83248,83248]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.967569162616416,"unknown":0.0,"valid":0.03243083738358394}],[0,{"invalid":0.0,"precondition":0.967569162616416,"unknown":0.03243083738358394,"valid":0.0}]],"time":0.412841796875,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.967569162616416,"valid":0.03243083738358394}],"memory":[[10514880,290534336]],"mixsample":[[152.170166015625,"adjust",800],[99.62744140625,"ival-log",400],[4.431884765625,"ival-assert",0],[93.595458984375,"ival-sub",0],[175.0966796875,"ival-log",0],[238.87109375,"ival-log1p",0],[14.900390625,"ival-and",0],[0.50537109375,"ival-sub",400],[117.420166015625,"ival-log1p",400],[30.870361328125,"ival->",0],[13.2890625,"exact",0],[21.350341796875,"ival-<",0]],"outcomes":[[1084.300537109375,1,"valid",6474],[128.001220703125,0,"valid",1782]],"time":1542.17822265625,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[250,3,0,3]],"explanations":[["-.f64","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","cancellation",250,4,[],[[]]]],"fperrors":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",253,0,false,3,[25.851309386539032]],["N",0,0,false,0,false],["(log.f64 N)",0,0,false,0,false],["(+.f64 N #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 (+.f64 N #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false]],"freqs":[[1,250],[0,6]],"maybe-confusion":[[250,3,0,0,1,2]],"memory":[[1507648,43237456]],"mixsample":[[10.851318359375,"adjust",800],[2.87158203125,"ival-add",0],[7.549072265625,"ival-log",400],[0.226806640625,"ival-assert",0],[4.952880859375,"ival-sub",0],[0.46533203125,"ival-true",0],[11.604248046875,"ival-log",0],[11.215576171875,"ival-log1p",0],[0.060302734375,"ival-sub",400],[7.684814453125,"ival-log1p",400],[0.396484375,"exact",0]],"outcomes":[[71.061767578125,1,"valid",408],[7.504150390625,0,"valid",104]],"time":132.409912109375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,182,5,0.00065158],[10,182,7,0.001030014],[9,174,7,0.00119487],[8,158,7,0.001792653],[7,109,7,0.001214165],[6,80,7,0.001092026],[5,48,7,0.000607611],[4,33,7,0.000324846],[3,25,7,0.000264395],[2,19,7,0.000195038],[1,15,7,0.000255749],[0,10,7,0.000225966],[0,6,7,0.000169273],[7,215,16,0.001043236],[6,204,16,0.001090899],[5,180,16,0.00101266],[4,122,16,0.000976192],[3,74,16,0.000586029],[2,41,16,0.000327575],[1,18,17,0.000184369],[0,8,19,0.000196697]],"inputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"memory":[[5624608,5624608]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":34.68798828125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06591796875,"type":"eval"},{"alts":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","next",50.26155543382157,"binary64"]],"compiler":[[7,6]],"memory":[[311952,311952]],"time":0.43603515625,"type":"prune"},{"egraph":[[0,182,14,0.001088439],[10,182,18,0.000756013],[9,174,18,0.000884517],[8,158,18,0.001080247],[7,109,18,0.000878627],[6,80,18,0.000784009],[5,48,18,0.000428274],[4,33,18,0.000234011],[3,25,18,0.000185523],[2,19,18,0.00013806],[1,15,18,0.000200034],[0,10,18,0.000245601],[0,6,18,9.8361e-5]],"inputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(+.f64 N #s(literal 1 binary64))","N","#s(literal 1 binary64)","(log.f64 N)"]],"locations":[["(log.f64 N)","cost-diff",0],["(+.f64 N #s(literal 1 binary64))","cost-diff",0],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","cost-diff",0],["(log.f64 (+.f64 N #s(literal 1 binary64)))","cost-diff",2]],"memory":[[863136,863136]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log1p.f64 N) (log.f64 N))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(log1p.f64 N)","(+.f64 N #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) N)","N","#s(literal 1 binary64)","(log.f64 N)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":14.742919921875,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 N #s(literal 1 binary64))","accuracy",0.0],["(log.f64 N)","accuracy",0.0],["(log.f64 (+.f64 N #s(literal 1 binary64)))","accuracy",0.00390625],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","accuracy",50.25536417405313]],"memory":[[-5952960,9924160]],"mixsample":[[6.2314453125,"adjust",800],[1.566162109375,"ival-add",0],[3.857421875,"ival-log",400],[0.14404296875,"ival-assert",0],[3.22802734375,"ival-sub",0],[0.22216796875,"ival-true",0],[5.58837890625,"ival-log",0],[7.241455078125,"ival-log1p",0],[0.0234375,"ival-sub",400],[4.658447265625,"ival-log1p",400],[0.19921875,"exact",0]],"outcomes":[[42.0478515625,1,"valid",204],[9.26953125,0,"valid",52]],"time":59.795166015625,"type":"localize"},{"count":[[4,27]],"inputs":[["(log.f64 (+.f64 N #s(literal 1 binary64)))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(+.f64 N #s(literal 1 binary64))","(log.f64 N)"]],"memory":[[1009520,21095328]],"outputs":[["N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","1","(+ 1 N)","(log N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (/ 1 N)))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))"]],"series":[[25.927001953125,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","-inf"],[8.385009765625,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","inf"],[34.39306640625,"((log (+ N 1)) (- (log (+ N 1)) (log N)) (+ N 1) (log N))","N","0"]],"time":69.16796875,"type":"series"},{"count":[[27,26]],"egraph":[[0,8152,214,0.175220318],[6,7369,223,0.023271278],[5,6313,223,0.031268151],[4,4231,223,0.028725698],[3,1601,227,0.019414644],[2,588,233,0.005207711],[1,250,234,0.001905451],[0,88,258,0.000885265]],"inputs":[["N","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","1","(+ 1 N)","(log N)","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (/ 1 N)))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))"]],"memory":[[871888,31681312]],"method":["egg-herbie"],"outputs":[["N","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(fma.f64 (*.f64 N N) #s(literal -1/2 binary64) (-.f64 N (log.f64 N)))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N) N (-.f64 N (log.f64 N)))","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","(log N)","(log.f64 N)","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(-.f64 (log.f64 N) (/.f64 #s(literal -1 binary64) N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (log.f64 N) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(+ (log -1) (* -1 (log (/ -1 N))))","(+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (+.f64 (log.f64 (neg.f64 N)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)) N))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)"]],"stop":[["iter limit",1],["node limit",1]],"time":387.535888671875,"type":"simplify"},{"count":[[4,425]],"egraph":[[0,8874,12,0.074696685],[3,2628,15,0.040778803],[2,269,15,0.008246256],[1,42,15,0.001009131],[0,10,15,0.000624423],[0,6,16,0.000208173]],"inputs":[["(log.f64 (+.f64 N #s(literal 1 binary64)))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","(+.f64 N #s(literal 1 binary64))","(log.f64 N)"]],"memory":[[1506448,57758416]],"outputs":[["(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 1 binary64))","(log1p.f64 N)","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))))","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(neg.f64 (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 N)))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log.f64 (-.f64 N #s(literal 1 binary64))) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (log1p.f64 (pow.f64 N #s(literal 3 binary64))))","(-.f64 (/.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))) (/.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))) (/.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(-.f64 (/.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))) (/.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))) (/.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (*.f64 N N)))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (log.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (log.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (log.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)))) (log.f64 (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64)))) (log.f64 (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)))) (log.f64 (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))) (log.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 9 binary64))) (log.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 N)))","(exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (log1p.f64 N)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log1p.f64 N))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))) (log1p.f64 (fma.f64 N N N)))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 N N N)))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))) (log.f64 (+.f64 (fma.f64 N N #s(literal -1 binary64)) N)))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64))))) (log.f64 (fma.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N)) (pow.f64 N #s(literal 4 binary64)))))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64)))) (log1p.f64 N))","(+.f64 (neg.f64 (log.f64 (-.f64 N #s(literal 1 binary64)))) (log.f64 (fma.f64 N N #s(literal -1 binary64))))","(+.f64 (neg.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (log1p.f64 (pow.f64 N #s(literal 3 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (pow.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(+.f64 #s(literal 0 binary64) (log1p.f64 N))","(+.f64 (log1p.f64 N) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(+.f64 (log1p.f64 N) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 N) #s(literal 0 binary64))","(log.f64 (+.f64 #s(literal 1 binary64) N))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (log.f64 N) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))))) (*.f64 (log.f64 N) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (*.f64 (log.f64 N) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))))) (*.f64 (log.f64 N) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (log.f64 N) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))) (log.f64 N) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (log.f64 N) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64)))))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))) (log.f64 N) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (log.f64 N)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N)))) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (+.f64 (pow.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))) (+.f64 #s(literal 0 binary64) (fma.f64 (log.f64 N) (log.f64 N) (*.f64 #s(literal 0 binary64) (log.f64 N))))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (fma.f64 N N #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(neg.f64 (log.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (log1p.f64 N) (log.f64 N))))","(neg.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (-.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (+.f64 (log.f64 N) (log1p.f64 N))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))) (/.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (+.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))) (log.f64 N))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N)))","(-.f64 (log.f64 (*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) N)))","(-.f64 (log.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) N)))","(-.f64 (log.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (log.f64 N)))","(-.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) N)) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) N)) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))))","(-.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (log.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (fma.f64 N N #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 9 binary64))) (log.f64 (*.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (*.f64 N (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (pow.f64 N #s(literal 3 binary64)))) (log.f64 (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (-.f64 (log.f64 (-.f64 N #s(literal 1 binary64))) (neg.f64 (log.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (+.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (log.f64 N)))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (-.f64 (log1p.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N)) (neg.f64 (log.f64 N))))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) (fma.f64 N N #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (log.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (log1p.f64 N) (log.f64 (neg.f64 (neg.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) N)) (log.f64 (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (/.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) N)))","(+.f64 (log.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) N)) (log.f64 (/.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) N)))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (pow.f64 (neg.f64 N) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (pow.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) N) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) N)))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) N) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (/.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) N)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(+.f64 (log1p.f64 N) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 N N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (*.f64 N N))) (+.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (fma.f64 N N #s(literal -1 binary64)) N))","(*.f64 (/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 6 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N)) (pow.f64 N #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 N N #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) N))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 N N #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 N N #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) #s(literal -1 binary64)))","(*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) N) (*.f64 (-.f64 N #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) N) (/.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) N))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 N N #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 N N)) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 N N)) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 N N)) (-.f64 N #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) N)) (*.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 N #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N)) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) N)))","(/.f64 (-.f64 (*.f64 (*.f64 N N) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) N)) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) (/.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 N #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (*.f64 N N)) (-.f64 N #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (*.f64 N N)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) N))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 N N #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N #s(literal 1 binary64)) (-.f64 N #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (-.f64 N #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (-.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 N #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) N))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 N #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 N N) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) N) N #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 N N) (fma.f64 N N #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) N) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 N N) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) N #s(literal 1 binary64))","(fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 N #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (fma.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (*.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 N #s(literal 1 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))))))","(-.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) N)) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 4 binary64)) (fma.f64 N N #s(literal 1 binary64))) (-.f64 N #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 N N #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))) (-.f64 N #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 (fma.f64 N N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 6 binary64)) (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))) (/.f64 (pow.f64 (-.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(-.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 N)) #s(literal -1 binary64)))","(+.f64 (*.f64 N (/.f64 N (-.f64 N #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 1 binary64) N)","(+.f64 N #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (log.f64 N)))","(+.f64 #s(literal 0 binary64) (log.f64 N))","(+.f64 (log.f64 N) #s(literal 0 binary64))","(log.f64 N)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":261.133056640625,"type":"rewrite"},{"compiler":[[12538,1566]],"memory":[[3644512,45194720]],"time":127.9150390625,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",48.94672503737714,"binary64"],["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",49.113088870080006,"binary64"],["(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","fresh",48.913196451153524,"binary64"],["(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",50.17529080984707,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","next",50.29848704643233,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",50.30073264669656,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","next",50.35981434754931,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",50.399055365182356,"binary64"],["(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","fresh",50.13313949329553,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","fresh",50.361024127621924,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.08643336701424,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","fresh",50.29645665848959,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",50.303746381458225,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.302678117871025,"binary64"],["(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","next",48.35938651659255,"binary64"],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","fresh",48.67407714276263,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",2.455869653783334,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","next",1.764415990429462,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",3.8923262234949845,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","next",8.72236888430596,"binary64"]],"compiler":[[23,12],[38,13],[52,20],[22,10],[33,18],[25,13],[22,12],[15,9],[68,17],[47,15],[40,14],[35,20],[27,15],[21,10],[9,7],[6,5],[19,15],[23,18],[15,12],[11,9],[23,12],[38,13],[52,20],[22,10],[33,18],[25,13],[22,12],[15,9],[68,17],[47,15],[40,14],[35,20],[27,15],[21,10],[9,7],[6,5],[19,15],[23,18],[15,12],[11,9]],"count":[[448,20]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[447,20],"picked":[1,0]}],"memory":[[-941520,26458736]],"min-error":[[0.20482304771870655,"binary64"]],"time":34.569091796875,"type":"prune"},{"egraph":[[0,8406,330,0.13289164],[6,7808,330,0.027950101],[5,4461,330,0.04914476],[4,1707,330,0.022407874],[3,679,330,0.007978631],[2,291,330,0.00257184],[1,145,330,0.001199393],[0,83,330,0.000867484],[0,49,340,0.00087148]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","N","(+.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","N","#s(literal 3 binary64)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(log.f64 N)","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(+.f64 (log.f64 N) (log1p.f64 N))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(log1p.f64 N)","N","#s(literal 6 binary64)","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(log.f64 N)","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(+.f64 (log.f64 N) (log1p.f64 N))","(+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(*.f64 (log.f64 N) (log1p.f64 N))","#s(literal 2 binary64)"]],"locations":[["(log1p.f64 N)","cost-diff",0],["(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","cost-diff",0],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","cost-diff",0],["(log1p.f64 N)","cost-diff",0],["(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","cost-diff",0],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","cost-diff",0],["(/.f64 N (+.f64 #s(literal 1 binary64) N))","cost-diff",0],["(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","cost-diff",0],["(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","cost-diff",0],["(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","cost-diff",2],["(/.f64 #s(literal 1 binary64) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","cost-diff",0],["(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","cost-diff",0],["(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","cost-diff",0]],"memory":[[2065936,46679072]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","N","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","N","(+.f64 #s(literal 1 binary64) N)","#s(literal 1 binary64)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","N","#s(literal 3 binary64)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(log.f64 N)","(fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(+.f64 (log.f64 N) (log1p.f64 N))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(log1p.f64 N)","N","#s(literal 6 binary64)","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(log.f64 N)","(*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(+.f64 (log.f64 N) (log1p.f64 N))","(+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(*.f64 (log.f64 N) (log1p.f64 N))","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":393.65283203125,"type":"simplify"},{"compiler":[[378,47]],"locations":[["(pow.f64 (log.f64 N) #s(literal 4 binary64))","accuracy",0.8711055177274275],["(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","accuracy",1.2399988385633594],["(pow.f64 (log.f64 N) #s(literal 6 binary64))","accuracy",1.2486151230064713],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","accuracy",49.3235030816243],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.545917529305326],["(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","accuracy",0.7313616212007971],["(pow.f64 (log.f64 N) #s(literal 3 binary64))","accuracy",0.7342340332848188],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","accuracy",49.818029549926166],["(+.f64 #s(literal 1 binary64) N)","accuracy",0.0],["(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","accuracy",0.0],["(/.f64 N (+.f64 #s(literal 1 binary64) N))","accuracy",0.0078125],["(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","accuracy",48.33903894531996],["(/.f64 #s(literal 1 binary64) N)","accuracy",0.0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","accuracy",8.72236888430596],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","accuracy",0.05859375],["(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","accuracy",0.1484375],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.359375],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","accuracy",1.709752420518512]],"memory":[[-2093696,69138864]],"mixsample":[[33.104248046875,"ival-div",0],[106.80615234375,"adjust",800],[0.11328125,"ival-pow2",400],[1.610595703125,"ival-div",400],[0.2705078125,"ival-assert",0],[18.3623046875,"ival-sub",0],[0.06689453125,"ival-sub",400],[11.445068359375,"const",0],[6.186767578125,"ival-log1p",400],[0.03955078125,"ival-neg",400],[49.57763671875,"ival-pow",0],[13.09912109375,"ival-add",0],[0.096923828125,"ival-mult",400],[11.393798828125,"ival-mult",0],[4.511962890625,"ival-log",400],[0.440185546875,"ival-add",400],[0.468505859375,"ival-true",0],[20.86376953125,"ival-log",0],[10.00390625,"ival-log1p",0],[9.487548828125,"ival-pow",400],[1.543212890625,"exact",0],[2.823486328125,"ival-neg",0],[12.50830078125,"ival-pow2",0]],"outcomes":[[340.402587890625,1,"valid",197],[35.247314453125,0,"valid",59]],"time":454.2890625,"type":"localize"},{"count":[[24,157]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal 1 binary64) N)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))"]],"memory":[[2527664,36262256]],"outputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ 1 N)","N","(* N (+ 1 (* -1 N)))","(* N (+ 1 (* N (- N 1))))","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))) (log N))) (* -1 (/ (- (* 1/3 (log N)) 1) (log N)))))) (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(* -1 (pow (log N) 3))","(- (pow N 3) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* -3/2 N))) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2)))) (pow (log N) 3))","(pow N 3)","(* (pow N 3) (+ 1 (* -3/2 N)))","(* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2))))","(* (pow N 3) (+ 1 (* N (- (* N (+ 7/4 (* -15/8 N))) 3/2))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))) (log N))) (+ (* -1 (/ (+ (* -1 (pow (log N) 3)) (+ (* 1/3 (pow (log N) 4)) (pow (log N) 2))) (pow (log N) 4))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(* -1 (pow (log N) 6))","(- (pow N 6) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* -3 N))) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3)))) (pow (log N) 6))","(pow N 6)","(* (pow N 6) (+ 1 (* -3 N)))","(* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3))))","(* (pow N 6) (+ 1 (* N (- (* N (+ 23/4 (* -9 N))) 3))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","1","(+ 1 N)","(pow (log N) 3)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(pow (log N) 6)","(pow (log N) 4)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(- 1 (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))) N)","(/ (- (+ 1 (+ (* -4/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -2/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ 1 (+ (log (/ 1 N)) (* 1/2 (log (/ 1 N))))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* 2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 1/2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))) N)","(/ (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))) N)","(/ (- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (pow N 3))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))))))) (/ 1 (pow N 3))) N)","(* -1 (pow (log (/ 1 N)) 3))","(+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (* N (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1))) (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))))) (+ (* -1/2 (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3)))) (+ (* 1/3 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 3) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))))))) N)","(* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1)) (pow N 3))) (+ (* 2 (/ (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (+ (/ (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2) (pow N 3)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N)))))))) N)","(pow (log (/ 1 N)) 6)","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (pow (log (/ 1 N)) 6))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 3))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(* N (+ 1 (/ 1 N)))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(pow (log (/ 1 N)) 4)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* N (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* -1/2 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/3 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (+ (/ (* (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))) (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2))) N)) (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 6)","(+ (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)"]],"series":[[49.798095703125,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (/ (/ N (+ 1 N)) 1) (neg (log (/ (/ N (+ 1 N)) 1))) (log (/ (/ N (+ 1 N)) 1)) (/ N (+ 1 N)) (/ (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (+ (* (+ (log N) (log (+ 1 N))) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (pow (log (+ 1 N)) 3) (log (+ 1 N)) (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (* (+ (log N) (log (+ 1 N))) (+ (+ (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (* (log N) (log (+ 1 N))) 2)))) (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (pow (log (+ 1 N)) 6) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (+ 1 N) (pow (log N) 3) (pow (log (+ 1 N)) 2) (pow (log N) 6) (pow (log N) 4))","N","-inf"],[42.72802734375,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (/ (/ N (+ 1 N)) 1) (neg (log (/ (/ N (+ 1 N)) 1))) (log (/ (/ N (+ 1 N)) 1)) (/ N (+ 1 N)) (/ (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (+ (* (+ (log N) (log (+ 1 N))) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (pow (log (+ 1 N)) 3) (log (+ 1 N)) (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (* (+ (log N) (log (+ 1 N))) (+ (+ (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (* (log N) (log (+ 1 N))) 2)))) (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (pow (log (+ 1 N)) 6) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (+ 1 N) (pow (log N) 3) (pow (log (+ 1 N)) 2) (pow (log N) 6) (pow (log N) 4))","N","inf"],[28.364013671875,"((- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (- (log (+ N 1)) (log N)) (/ 1 N) (/ (/ N (+ 1 N)) 1) (neg (log (/ (/ N (+ 1 N)) 1))) (log (/ (/ N (+ 1 N)) 1)) (/ N (+ 1 N)) (/ (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (+ (* (+ (log N) (log (+ 1 N))) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 3) (pow (log N) 3)) (pow (log (+ 1 N)) 3) (log (+ 1 N)) (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (* (+ (log N) (log (+ 1 N))) (+ (+ (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (* (log N) (log (+ 1 N))) 2)))) (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (pow (log (+ 1 N)) 6) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (+ 1 N) (pow (log N) 3) (pow (log (+ 1 N)) 2) (pow (log N) 6) (pow (log N) 4))","N","0"]],"time":138.31005859375,"type":"series"},{"count":[[157,156]],"egraph":[[0,8126,11815,0.119469192],[1,3456,12432,0.041258468],[0,993,13581,0.014254007]],"inputs":[["(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ 1 N)","N","(* N (+ 1 (* -1 N)))","(* N (+ 1 (* N (- N 1))))","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* 1/2 N) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))) (log N))) (* -1 (/ (- (* 1/3 (log N)) 1) (log N)))))) (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(* -1 (pow (log N) 3))","(- (pow N 3) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* -3/2 N))) (pow (log N) 3))","(- (* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2)))) (pow (log N) 3))","(pow N 3)","(* (pow N 3) (+ 1 (* -3/2 N)))","(* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2))))","(* (pow N 3) (+ 1 (* N (- (* N (+ 7/4 (* -15/8 N))) 3/2))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))) (log N))) (+ (* -1 (/ (+ (* -1 (pow (log N) 3)) (+ (* 1/3 (pow (log N) 4)) (pow (log N) 2))) (pow (log N) 4))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(* -1 (pow (log N) 6))","(- (pow N 6) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* -3 N))) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3)))) (pow (log N) 6))","(pow N 6)","(* (pow N 6) (+ 1 (* -3 N)))","(* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3))))","(* (pow N 6) (+ 1 (* N (- (* N (+ 23/4 (* -9 N))) 3))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","1","(+ 1 N)","(pow (log N) 3)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(pow (log N) 6)","(pow (log N) 4)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(- 1 (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(/ -1 N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))) N)","(/ (- (+ 1 (+ (* -4/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -2/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ 1 (+ (log (/ 1 N)) (* 1/2 (log (/ 1 N))))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* 2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 1/2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))) N)","(/ (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))) N)","(/ (- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (pow N 3))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))))))) (/ 1 (pow N 3))) N)","(* -1 (pow (log (/ 1 N)) 3))","(+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (* N (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1))) (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))))) (+ (* -1/2 (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3)))) (+ (* 1/3 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 3) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))))))) N)","(* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1)) (pow N 3))) (+ (* 2 (/ (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (+ (/ (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2) (pow N 3)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N)))))))) N)","(pow (log (/ 1 N)) 6)","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (pow (log (/ 1 N)) 6))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 3))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(* N (+ 1 (/ 1 N)))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(pow (log (/ 1 N)) 4)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* N (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* -1/2 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/3 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (+ (/ (* (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))) (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2))) N)) (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 6)","(+ (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)"]],"memory":[[-772048,70431056]],"method":["egg-herbie"],"outputs":[["(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N) (log.f64 N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N) (log.f64 N))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 (pow N 3))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","N","(* N (+ 1 (* -1 N)))","(*.f64 (-.f64 #s(literal 1 binary64) N) N)","(* N (+ 1 (* N (- N 1))))","(*.f64 (fma.f64 (-.f64 N #s(literal 1 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1 (* -1 N))) 1))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) N) N #s(literal -1 binary64)) N #s(literal 1 binary64)) N)","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* 1/2 N) 1)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (* -1/3 N))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (neg.f64 N) (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 1 binary64)) (log.f64 N))) #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))) (log N))) (* -1 (/ (- (* 1/3 (log N)) 1) (log N)))))) (+ (* -1 (/ (+ 1 (* -1/2 (log N))) (log N))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (-.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/3 binary64) (log.f64 N) #s(literal -1 binary64))) (log.f64 N)) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 1 binary64)) (log.f64 N))) (log.f64 N)))) N (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 N) #s(literal 1 binary64)) (log.f64 N))))) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -1 (pow (log N) 3))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))","(- (pow N 3) (pow (log N) 3))","(-.f64 (pow.f64 N #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(- (* (pow N 3) (+ 1 (* -3/2 N))) (pow (log N) 3))","(fma.f64 (fma.f64 #s(literal -3/2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(- (* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2)))) (pow (log N) 3))","(fma.f64 (fma.f64 (fma.f64 #s(literal 7/4 binary64) N #s(literal -3/2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(pow N 3)","(pow.f64 N #s(literal 3 binary64))","(* (pow N 3) (+ 1 (* -3/2 N)))","(*.f64 (fma.f64 #s(literal -3/2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* (pow N 3) (+ 1 (* N (- (* 7/4 N) 3/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 7/4 binary64) N #s(literal -3/2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* (pow N 3) (+ 1 (* N (- (* N (+ 7/4 (* -15/8 N))) 3/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -15/8 binary64) N #s(literal 7/4 binary64)) N #s(literal -3/2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (neg.f64 N) (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal -1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))) (log N))) (+ (* -1 (/ (+ (* -1 (pow (log N) 3)) (+ (* 1/3 (pow (log N) 4)) (pow (log N) 2))) (pow (log N) 4))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal -1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (log.f64 N)))) N (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal -1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))))) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -1 (pow (log N) 6))","(neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(- (pow N 6) (pow (log N) 6))","(-.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(- (* (pow N 6) (+ 1 (* -3 N))) (pow (log N) 6))","(-.f64 (*.f64 (fma.f64 #s(literal -3 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(- (* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3)))) (pow (log N) 6))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 23/4 binary64) N #s(literal -3 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow N 6)","(pow.f64 N #s(literal 6 binary64))","(* (pow N 6) (+ 1 (* -3 N)))","(*.f64 (fma.f64 #s(literal -3 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64)))","(* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 23/4 binary64) N #s(literal -3 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64)))","(* (pow N 6) (+ 1 (* N (- (* N (+ 23/4 (* -9 N))) 3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -9 binary64) N #s(literal 23/4 binary64)) N #s(literal -3 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N))","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","1","#s(literal 1 binary64)","(+ 1 N)","(+.f64 #s(literal 1 binary64) N)","(pow (log N) 3)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (* -1 N)))","(*.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/6 binary64) N #s(literal 11/12 binary64)) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(pow (log N) 6)","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(pow (log N) 4)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64)))) N)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))))","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 N N))) N)","(- 1 (/ 1 N))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N))","(- (+ 1 (/ 1 (pow N 2))) (/ 1 N))","(-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) N))","(- (+ 1 (/ 1 (pow N 2))) (+ (/ 1 N) (/ 1 (pow N 3))))","(-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) N)) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(/ -1 N)","(/.f64 #s(literal -1 binary64) N)","(/ (- (* 1/2 (/ 1 N)) 1) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(/ (- (* 1/2 (/ 1 N)) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)","(/ (- (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))) (+ 1 (/ 1/3 (pow N 2)))) N)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)) (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) N)","(/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))) (/.f64 (log.f64 N) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)))) N)","(/ (- (+ 1 (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 N) (*.f64 N N)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 N N)) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 N N)) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))))) #s(literal 1 binary64)) (+.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 N N)) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (log.f64 N) #s(literal 3 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 N N)) (/.f64 (neg.f64 (log.f64 N)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N))))) (/.f64 (log.f64 N) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)))) N)","(/ (- (+ 1 (+ (* -4/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* 2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))))) (+ (* -1 (/ (log (/ 1 N)) (* N (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -2/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/3 (/ (log (/ 1 N)) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* 1/2 (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (/ (log (/ 1 N)) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ 1 (+ (log (/ 1 N)) (* 1/2 (log (/ 1 N))))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* 2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 1/2 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (/ (* (+ (* -2 (log (/ 1 N))) (* -1 (log (/ 1 N)))) (- (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* -1 (/ (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))))) (* (pow N 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))))))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -4/3 binary64) (pow.f64 N #s(literal 3 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 N) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 (log.f64 N) (*.f64 N N)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (fma.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 N N)) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 N N)) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))))))))) #s(literal 1 binary64)) (/.f64 (log.f64 N) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N))) (fma.f64 (/.f64 #s(literal -2/3 binary64) (pow.f64 N #s(literal 3 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 N #s(literal 3 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 N N)) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (fma.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (log.f64 N) (*.f64 N N)) (fma.f64 (/.f64 (fma.f64 #s(literal 3/2 binary64) (neg.f64 (log.f64 N)) #s(literal 1 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (log.f64 N) #s(literal 3 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (log.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (fma.f64 #s(literal 1/9 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal 2/3 binary64) (/.f64 (neg.f64 (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (fma.f64 #s(literal 1/6 binary64) (/.f64 (neg.f64 (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (fma.f64 (/.f64 (fma.f64 (/.f64 (log.f64 N) #s(literal 3 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) #s(literal 3 binary64)) (/.f64 (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))))))) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (/.f64 (log.f64 N) #s(literal 3 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (fma.f64 #s(literal -1/6 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal -1/3 binary64) (/.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (log.f64 N)) #s(literal -3 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 N N)))))))))) N)","(/ (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) N)","(/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) N)","(/.f64 (+.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (/.f64 (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))) N)) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N)","(/ (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))) N)","(/.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) N) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal -1/2 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 #s(literal 1/3 binary64) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64) (fma.f64 (log.f64 N) (log.f64 N) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))))) (/.f64 (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))) N))) N)","(/ (- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -4/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) N)) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (pow N 3))) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) N)) (+ (* -1/4 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (log (/ 1 N)) (pow N 2))) (+ (* 2 (pow (log (/ 1 N)) 2)) (+ (/ 1 (pow N 2)) (pow (log (/ 1 N)) 2))))))))))))) (/ 1 (pow N 3))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -4/3 binary64) (+.f64 (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) N) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal -1/2 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/4 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 #s(literal 1/3 binary64) N) (fma.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64) (fma.f64 (log.f64 N) (log.f64 N) (/.f64 #s(literal 1 binary64) (*.f64 N N)))))))))) (/.f64 (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))) N)) (/.f64 (*.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64))) (pow.f64 N #s(literal 3 binary64)))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))) N)","(* -1 (pow (log (/ 1 N)) 3))","(neg.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N)))","(fma.f64 #s(literal 3 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (neg.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (log (/ 1 N)) 2) N))))))","(fma.f64 (/.f64 #s(literal -2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (-.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 N N)) #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))","(+ (* -2 (/ (log (/ 1 N)) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -1 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -1 (pow (log (/ 1 N)) 3)) (+ (* -1/2 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (+ (* 1/3 (/ (pow (log (/ 1 N)) 2) (pow N 3))) (+ (* 2 (/ (log (/ 1 N)) (pow N 3))) (+ (* 2 (/ (pow (log (/ 1 N)) 2) N)) (+ (/ 1 (pow N 3)) (/ (pow (log (/ 1 N)) 2) N))))))))))","(fma.f64 (/.f64 #s(literal -2 binary64) N) (/.f64 (neg.f64 (log.f64 N)) N) (fma.f64 (/.f64 (log.f64 N) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (+.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 N N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) #s(literal 1/3 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 2 binary64) (+.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) (pow.f64 N #s(literal 3 binary64))))))","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) N)) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (* N (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) N)","(/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64)) N))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))))))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 N N) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) N) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -4 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (*.f64 N N)) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (neg.f64 (log.f64 N)) (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (*.f64 N N) (neg.f64 (log.f64 N)))) (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1))) (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))))) (+ (* -1/2 (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3)))) (+ (* 1/3 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 3) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))))))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 N N) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (fma.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (neg.f64 (log.f64 N))) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 #s(literal -4 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (*.f64 N N)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (neg.f64 (log.f64 N))) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 #s(literal 3 binary64) (*.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) #s(literal -1/2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) N) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (*.f64 (fma.f64 #s(literal -4 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))))))) (*.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (*.f64 N N) (neg.f64 (log.f64 N)))) (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))) (*.f64 (*.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 (pow.f64 N #s(literal 3 binary64)) (neg.f64 (log.f64 N)))) (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))) #s(literal -1/2 binary64))))))) N)","(* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))","(*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64))","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))) N)","(/.f64 (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))))) N)","(/.f64 (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 N N)) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N))))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1)) (pow N 3))) (+ (* 2 (/ (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (+ (/ (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2) (pow N 3)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N)))))))) N)","(/.f64 (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) (/.f64 #s(literal -2 binary64) N) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)","(pow (log (/ 1 N)) 6)","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (pow (log (/ 1 N)) 6))","(fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64)))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64) (+.f64 (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (*.f64 N N)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64)))))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 3))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))))","(fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (+.f64 (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (*.f64 N N)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64)))))))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(* N (+ 1 (/ 1 N)))","(+.f64 #s(literal 1 binary64) N)","(pow (log (/ 1 N)) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -2/3 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(pow (log (/ 1 N)) 4)","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64) #s(literal 1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(neg.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(neg.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1 binary64) #s(literal -1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) N))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N))","(+ 1 (* -1 (/ (- 1 (/ 1 N)) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 N)) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) N)) N)) N))","(* -1 (/ (- 1 (* 1/2 (/ 1 N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) N))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N)) N))","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* N (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) N))","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) N)))) N)","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (log.f64 #s(literal -1 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) N)) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64)))) N)))) N)","(* -1 (/ (+ (* -2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (- (+ (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/2 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (/ (* (+ 1 (+ (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1 (/ (log (/ -1 N)) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (+ (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (/ (log -1) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))))) (+ (/ (* (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1/2 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (- (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) (/ (* (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) 2))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (log.f64 #s(literal -1 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/4 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 #s(literal 2/3 binary64) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))))))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (log.f64 #s(literal -1 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))))) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64)))))) N)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (fma.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3/2 binary64) #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) N)) (/.f64 (*.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) #s(literal 2 binary64))))) N) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))))) N)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))","(/.f64 (neg.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) N)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) N)))) N)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N))) N) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) N)","(* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1 (/ (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2/3 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) N)) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N))) N) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) N)","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) N))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) N))) N))","(+ (* -1 (/ (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -1 (/ (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) N)) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) N)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2 binary64) (-.f64 (/.f64 (neg.f64 (-.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) N))) N) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))) N))","(+ (log -1) (* -1 (log (/ -1 N))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 N (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))) N)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (/.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal -3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (*.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) N)) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))) N)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* -1/2 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/3 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (+ (/ (* (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (/.f64 (-.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal -3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2/3 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (-.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) #s(literal -1/2 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 #s(literal 3 binary64) (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (fma.f64 (/.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal -3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (*.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))))) N)) (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) #s(literal 2 binary64)))) N)) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))) N)","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(*.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) N) #s(literal -2 binary64))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) N))) N)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))))) N)) N))) N)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))) (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2))) N)) (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))))) (/.f64 (fma.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2/3 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))) N)) N))) N))) N)","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 6)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64))","(+ (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) N) #s(literal -2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) N)) N))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))))) N)) N)) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) N)) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":370.291015625,"type":"simplify"},{"count":[[24,917]],"egraph":[[0,8462,161,0.089412454],[2,3030,161,0.043067356],[1,396,161,0.010281631],[0,83,168,0.002731972],[0,49,219,0.000476272]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","(/.f64 #s(literal 1 binary64) N)","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","(log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64)))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(log1p.f64 N)","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal 1 binary64) N)","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))"]],"memory":[[-6447360,69376016]],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N) (*.f64 (neg.f64 N) #s(literal -1 binary64))) (*.f64 N N))","(/.f64 (fma.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 (neg.f64 N)) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (neg.f64 (neg.f64 N))))","(/.f64 (fma.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) N))","(/.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N) (*.f64 (*.f64 N (neg.f64 N)) #s(literal -1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) (neg.f64 N)))","(/.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 (*.f64 N (neg.f64 N)) #s(literal 1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) (neg.f64 (neg.f64 N))))","(/.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N (*.f64 (*.f64 N (neg.f64 N)) #s(literal 1 binary64))) (*.f64 (*.f64 N (neg.f64 N)) N))","(/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 N) (*.f64 N #s(literal -1 binary64))) (*.f64 N (neg.f64 N)))","(/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (neg.f64 (neg.f64 N)) N) (*.f64 N (neg.f64 (neg.f64 N))))","(/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N N) (*.f64 N N))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N) (*.f64 (*.f64 N N) #s(literal -1 binary64))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N (*.f64 N N)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 N) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 N)) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 (neg.f64 N))))","(/.f64 (+.f64 N (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64))) (*.f64 (/.f64 N (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 N) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 N)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 N)) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) (neg.f64 (neg.f64 N))))","(/.f64 (+.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N))","(/.f64 (-.f64 (neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) N)","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64))) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 3 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) N))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (*.f64 N #s(literal -1 binary64))) (*.f64 N N))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 N (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (neg.f64 N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) N))","(neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (pow.f64 N #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 #s(literal -1 binary64) N))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) (pow.f64 N #s(literal -1 binary64))) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))","(/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 N #s(literal -3 binary64))) (pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) N))","(/.f64 (*.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) (neg.f64 N)))","(/.f64 (*.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) N))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) N) (*.f64 N (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 N N))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64))) (*.f64 N (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64))) (*.f64 N (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(neg.f64 (/.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(neg.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N)))","(fma.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1/2 binary64) N) (neg.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N)))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1/2 binary64)) (pow.f64 N #s(literal -1/2 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) N))","(*.f64 #s(literal 1 binary64) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (pow.f64 N #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 N)) #s(literal -1 binary64))","(pow.f64 (*.f64 N N) #s(literal -1/2 binary64))","(pow.f64 N #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 N)))","(/.f64 #s(literal 1 binary64) N)","(neg.f64 (/.f64 #s(literal -1 binary64) N))","(exp.f64 (neg.f64 (log.f64 N)))","(*.f64 (pow.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N))) (-.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)","(*.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (neg.f64 N) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(*.f64 N (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 N (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N) #s(literal -1 binary64))","(pow.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 N)) (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 N) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (neg.f64 N) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(neg.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(exp.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) (neg.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 0 binary64))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 0 binary64)) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64)))))","(/.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (fma.f64 (log1p.f64 N) (log1p.f64 N) (*.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(neg.f64 (-.f64 (log1p.f64 N) (log.f64 N)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 N) (log.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (log.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(-.f64 (log.f64 (neg.f64 (neg.f64 N))) (log.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))))","(-.f64 (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)) (log.f64 #s(literal -1 binary64)))","(-.f64 (log.f64 (neg.f64 N)) (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))))","(-.f64 (log.f64 (neg.f64 N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(-.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(-.f64 (log.f64 N) (log1p.f64 N))","(-.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(+.f64 (log.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log1p.f64 (neg.f64 N)))","(+.f64 (log.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(+.f64 (log.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(+.f64 (neg.f64 (log1p.f64 N)) (log.f64 N))","(+.f64 (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (neg.f64 N)) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(+.f64 (log.f64 N) (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64))))","(+.f64 (log.f64 N) (neg.f64 (log1p.f64 N)))","(+.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(*.f64 (pow.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 #s(literal 1 binary64) (*.f64 N N))) (-.f64 #s(literal 1 binary64) N))","(*.f64 (/.f64 N (fma.f64 N N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 N (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) N)","(*.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(*.f64 (neg.f64 N) (pow.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 N (+.f64 #s(literal 1 binary64) N)))","(*.f64 N (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 N (pow.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N) #s(literal -1 binary64))","(pow.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 N)) (neg.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 N) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(/.f64 (neg.f64 N) (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64)))","(/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(/.f64 N (+.f64 #s(literal 1 binary64) N))","(neg.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))))","(exp.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) (neg.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 0 binary64))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (log.f64 N)))","(*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (neg.f64 (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log1p.f64 N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 (log.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(fma.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (neg.f64 (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(fma.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(+.f64 (*.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(+.f64 (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (log1p.f64 N)) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N))))","(+.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (log1p.f64 N))","(*.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 3/2 binary64) (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)))","(pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (log1p.f64 N) #s(literal 1 binary64))","(log1p.f64 N)","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(neg.f64 (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) #s(literal 0 binary64))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(exp.f64 (log.f64 (log1p.f64 N)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))))","(+.f64 #s(literal 0 binary64) (log1p.f64 N))","(+.f64 (log1p.f64 N) #s(literal 0 binary64))","(log.f64 (+.f64 #s(literal 1 binary64) N))","(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) (neg.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 0 binary64))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 0 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal 0 binary64))","(fma.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (log.f64 N) #s(literal -1 binary64) (log1p.f64 N))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (log1p.f64 N) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(fma.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(fma.f64 #s(literal -1 binary64) (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (-.f64 (log.f64 (neg.f64 N)) (log1p.f64 N)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)) (log.f64 (neg.f64 N)))","(-.f64 (neg.f64 (log.f64 N)) (neg.f64 (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (log1p.f64 N) (log.f64 N))","(-.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal -1 binary64) N #s(literal -1 binary64))) #s(literal -1 binary64))) (log.f64 #s(literal -1 binary64)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 N)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(+.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))) (neg.f64 (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))))","(+.f64 #s(literal 0 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(+.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal 0 binary64))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 12 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 5 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 9/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 9/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 5 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 12 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 18 binary64)) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(+.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 5 binary64)) (log1p.f64 N))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 9/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 9/2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(*.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 5 binary64)))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(*.f64 (pow.f64 (/.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1/3 binary64)) (neg.f64 N))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) (neg.f64 (neg.f64 N)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N)))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (neg.f64 N)))","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) N))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N #s(literal 1/3 binary64))) (*.f64 N N))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (*.f64 N (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) (*.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) (neg.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 (pow.f64 N #s(literal -3 binary64)) #s(literal 1/64 binary64) #s(literal -1/27 binary64))))","(fma.f64 #s(literal -1/4 binary64) (/.f64 #s(literal -1 binary64) N) #s(literal -1/3 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/4 binary64) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal -1 binary64)) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 2 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (/.f64 #s(literal 1/9 binary64) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 3 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))) (/.f64 #s(literal 1/27 binary64) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))","(+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)))","(*.f64 (fma.f64 N N #s(literal -1 binary64)) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) N) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) N))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 N N))) (-.f64 #s(literal 1 binary64) N))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 N N #s(literal -1 binary64))) (-.f64 N #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1 binary64) N)))","(/.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64))) (neg.f64 (-.f64 N #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)) (-.f64 #s(literal 1 binary64) N))","(/.f64 (fma.f64 N N #s(literal -1 binary64)) (-.f64 N #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) N #s(literal 1 binary64))","(fma.f64 N #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1 binary64) N)))","(-.f64 (/.f64 (*.f64 N N) (-.f64 N #s(literal 1 binary64))) (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) N)","(+.f64 N #s(literal 1 binary64))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (log.f64 N))","(*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (log.f64 N) #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 3/2 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (log1p.f64 N) (log1p.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (log.f64 N) #s(literal 5 binary64)) (log.f64 N))","(*.f64 (pow.f64 (log.f64 N) #s(literal 9/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 9/2 binary64)))","(*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 5 binary64)))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64) (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 4 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (log.f64 N))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":322.14892578125,"type":"rewrite"},{"compiler":[[44954,4530]],"memory":[[2482320,113106544]],"time":170.777099609375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","next",48.94672503737714,"binary64"],["(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",50.17529080984707,"binary64"],["(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 5 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","fresh",49.165774132028105,"binary64"],["(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",49.03060392486426,"binary64"],["(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",48.81573806680513,"binary64"],["(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","next",50.291931460711446,"binary64"],["(/.f64 (-.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","fresh",49.634518602464574,"binary64"],["(/.f64 (-.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",49.752093805646126,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","fresh",50.203500892998726,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","fresh",50.30461586502218,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","done",50.29848704643233,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",50.30073264669656,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",49.71958189686192,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",50.35981434754931,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",50.399055365182356,"binary64"],["(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","fresh",50.13313949329553,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.08643336701424,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","fresh",50.20184652927573,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",50.303746381458225,"binary64"],["(/.f64 #s(approx (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (/.f64 (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) (/.f64 #s(literal -2 binary64) N) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","fresh",2.1668086125642048,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.302678117871025,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","fresh",48.35938651659255,"binary64"],["(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","fresh",2.4599261907672303,"binary64"],["(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","fresh",48.67407714276263,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N N) (*.f64 N N)))","fresh",1.9792836328488976,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","next",1.9519363821231268,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",2.455869653783334,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","fresh",1.764415990429462,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","fresh",1.78006492040978,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",2.470892433552361,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","next",3.8923262234949845,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))","fresh",1.9743924433195288,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))) N))","fresh",1.9646721169227936,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","next",1.7526936614726631,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",8.72236888430596,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","fresh",1.823030129502282,"binary64"]],"compiler":[[23,12],[22,10],[36,20],[27,14],[25,13],[33,18],[35,20],[24,14],[40,21],[32,17],[33,18],[25,13],[24,14],[22,12],[15,9],[68,17],[40,14],[42,23],[27,15],[254,81],[21,10],[7,6],[23,17],[6,5],[26,18],[32,20],[19,15],[32,24],[25,19],[21,16],[27,21],[41,21],[37,28],[25,20],[11,9],[26,20],[23,12],[22,10],[36,20],[27,14],[25,13],[33,18],[35,20],[24,14],[40,21],[32,17],[25,13],[24,14],[15,9],[68,17],[40,14],[42,23],[27,15],[254,81],[21,10],[7,6],[23,17],[6,5],[26,18],[32,20],[19,15],[32,24],[25,19],[21,16],[27,21],[41,21],[37,28],[25,20],[26,20]],"count":[[1064,36]],"kept":[{"done":[0,0],"fresh":[15,10],"new":[1044,23],"picked":[5,3]}],"memory":[[991552,59521952]],"min-error":[[0.1293467660980528,"binary64"]],"time":72.0849609375,"type":"prune"},{"egraph":[[0,8058,455,0.061901378],[5,7341,460,0.022268674],[4,4363,460,0.040180874],[3,1337,464,0.02198623],[2,389,466,0.007520032],[1,167,476,0.002619451],[0,99,479,0.001575098],[0,59,505,0.00093149]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(literal 1 binary64)","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","N","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(/.f64 #s(literal -1/2 binary64) N)","#s(literal -1/2 binary64)","N","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","(neg.f64 (neg.f64 N))","(neg.f64 N)","(*.f64 N N)","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","#s(literal -1 binary64)","(neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(log1p.f64 N)","N","#s(literal 6 binary64)","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(log.f64 N)","(+.f64 (log.f64 N) (log1p.f64 N))","(+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(*.f64 (log.f64 N) (log1p.f64 N))","#s(literal 2 binary64)","(+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))"]],"locations":[["(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","cost-diff",0],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","cost-diff",0],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","cost-diff",0],["(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","cost-diff",0],["(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","cost-diff",0],["(log1p.f64 N)","cost-diff",0],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","cost-diff",0],["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","cost-diff",6],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","cost-diff",0],["(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","cost-diff",2],["(neg.f64 (neg.f64 N))","cost-diff",2],["(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","cost-diff",4],["#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","cost-diff",0],["(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","cost-diff",0],["(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","cost-diff",0],["(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","cost-diff",0],["(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","cost-diff",3]],"memory":[[5382448,27198464]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (pow.f64 N #s(literal 3 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (pow.f64 N #s(literal 3 binary64)))","#s(literal 1 binary64)","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 (-.f64 N #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N))) N)","N","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(/.f64 (-.f64 (-.f64 N #s(literal 1/2 binary64)) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N)) N)","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64)) N)","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(-.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1/4 binary64) N))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(/.f64 #s(literal -1/2 binary64) N)","#s(literal -1/2 binary64)","N","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(/.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (pow.f64 N #s(literal 3 binary64)))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(fma.f64 (-.f64 N #s(literal 1/2 binary64)) N (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(-.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N) #s(literal 1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1/4 binary64) N)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(-.f64 #s(literal -1/3 binary64) (/.f64 #s(literal -1/4 binary64) N))","(/.f64 #s(literal 1/4 binary64) N)","#s(literal 1/4 binary64)","N","#s(literal 1/3 binary64)","(neg.f64 (neg.f64 N))","N","(neg.f64 N)","(*.f64 N N)","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","(pow.f64 N #s(literal 3 binary64))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","#s(literal -1 binary64)","(neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(log1p.f64 N)","N","#s(literal 6 binary64)","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(log.f64 N)","(+.f64 (log.f64 N) (log1p.f64 N))","(+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))","(*.f64 (log.f64 N) (log1p.f64 N))","#s(literal 2 binary64)","(+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":244.2568359375,"type":"simplify"},{"compiler":[[485,50]],"locations":[["(pow.f64 (log.f64 N) #s(literal 4 binary64))","accuracy",0.8711055177274275],["(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","accuracy",1.2399988385633594],["(pow.f64 (log.f64 N) #s(literal 6 binary64))","accuracy",1.2486151230064713],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","accuracy",49.3235030816243],["(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","accuracy",0.45703125],["(pow.f64 (log.f64 N) #s(literal 2 binary64))","accuracy",0.5436325195368841],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.545917529305326],["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","accuracy",48.70466762815285],["(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","accuracy",0.2578125],["(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","accuracy",0.28353500976844204],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.359375],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","accuracy",1.709752420518512],["(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","accuracy",0.0],["(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","accuracy",0.05859375],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","accuracy",1.709752420518512],["#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","accuracy",8.868788103796572],["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","accuracy",0.0703125],["(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","accuracy",0.1484375],["(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","accuracy",0.359375],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","accuracy",1.709752420518512]],"memory":[[-3039712,80265888]],"mixsample":[[29.318603515625,"ival-div",0],[22.9052734375,"adjust",800],[0.844970703125,"ival-div",400],[2.6396484375,"ival-pow2",400],[0.052978515625,"const",400],[0.170654296875,"ival-assert",0],[11.306396484375,"ival-sub",0],[0.100830078125,"ival-sub",400],[7.92431640625,"const",0],[4.74267578125,"ival-log1p",400],[0.50439453125,"ival-neg",400],[51.977294921875,"ival-pow",0],[9.931640625,"ival-add",0],[14.790771484375,"ival-mult",0],[0.686279296875,"ival-mult",400],[4.18310546875,"ival-log",400],[0.61767578125,"ival-add",400],[0.292724609375,"ival-true",0],[4.41455078125,"ival-log",0],[7.093505859375,"ival-log1p",0],[4.79736328125,"ival-pow",400],[0.896240234375,"exact",0],[3.853515625,"ival-neg",0],[13.511962890625,"ival-pow2",0]],"outcomes":[[226.7001953125,1,"valid",201],[24.788330078125,0,"valid",55]],"time":307.68017578125,"type":"localize"},{"count":[[27,165]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(neg.f64 (neg.f64 N))","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))"]],"memory":[[-6370544,34515968]],"outputs":[["(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ -1/4 N)","(/ (- (* 1/3 N) 1/4) N)","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) N)","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) N)","N","(pow N 3)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(/ 1 (log N))","(+ (* -1 (/ N (pow (log N) 2))) (/ 1 (log N)))","(+ (* N (- (* N (+ (* 1/2 (/ 1 (pow (log N) 2))) (/ 1 (pow (log N) 3)))) (/ 1 (pow (log N) 2)))) (/ 1 (log N)))","(+ (* N (- (* N (+ (* -1 (* N (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (/ 1 (pow (log N) 3)) (/ 1 (pow (log N) 4)))))) (+ (* 1/2 (/ 1 (pow (log N) 2))) (/ 1 (pow (log N) 3))))) (/ 1 (pow (log N) 2)))) (/ 1 (log N)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))) (log N))) (+ (* -1 (/ (+ (* -1 (pow (log N) 3)) (+ (* 1/3 (pow (log N) 4)) (pow (log N) 2))) (pow (log N) 4))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(* -1 (pow (log N) 5))","(+ (* -1 (pow (log N) 5)) (* N (pow (log N) 4)))","(+ (* -1 (pow (log N) 5)) (* N (- (* -1 (* N (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)))) (* -1 (pow (log N) 4)))))","(+ (* -1 (pow (log N) 5)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)) (log N))) (+ (* -1/2 (pow (log N) 3)) (* -1/3 (pow (log N) 4)))))) (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)))) (* -1 (pow (log N) 4)))))","(* -1 (pow (log N) 6))","(- (pow N 6) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* -3 N))) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3)))) (pow (log N) 6))","(pow N 6)","(* (pow N 6) (+ 1 (* -3 N)))","(* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3))))","(* (pow N 6) (+ 1 (* N (- (* N (+ 23/4 (* -9 N))) 3))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(pow (log N) 2)","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(pow (log N) 6)","(pow (log N) 4)","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","1","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ -1/2 (log (/ 1 N)))","(* -1 (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/4 (/ 1 (* N (pow (log (/ 1 N)) 2))))))","(- (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 2)))) (+ (/ 1/4 (* N (pow (log (/ 1 N)) 2))) (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 3)))))))","(- (+ (/ 1/16 (* (pow N 3) (pow (log (/ 1 N)) 3))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (- (* 1/8 (/ 1 (pow (log (/ 1 N)) 2))) (* 1/8 (/ 1 (pow (log (/ 1 N)) 3)))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/12 (* (pow N 3) (pow (log (/ 1 N)) 2))) (+ (/ 1/4 (* N (pow (log (/ 1 N)) 2))) (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 3)))))))))","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (* N (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1))) (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))))) (+ (* -1/2 (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3)))) (+ (* 1/3 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 3) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))))))) N)","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (log (/ 1 N)))) (* 1/4 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/6 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 1/4 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (* 1/4 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 3) (log (/ 1 N))))))))))) N)","(* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1)) (pow N 3))) (+ (* 2 (/ (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (+ (/ (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2) (pow N 3)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N)))))))) N)","(pow (log (/ 1 N)) 6)","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (pow (log (/ 1 N)) 6))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 3))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(* -1/2 (log (/ 1 N)))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(pow (log (/ 1 N)) 4)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(* (pow N 2) (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(- (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (/ 1 (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) N)) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (+ (* 1/3 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N)) (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) N)) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* -1/2 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/3 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (+ (/ (* (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -2/3 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1/2 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))) (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2))) N)) (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 6)","(+ (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)"]],"series":[[27.4111328125,"((/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (neg (neg N)) (* (* N N) (neg (neg N))) (- (log (+ N 1)) (log N)) (+ (* (pow (log (+ 1 N)) 2) (pow (+ (log N) (log (+ 1 N))) -1)) (neg (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))))) (pow (log (+ 1 N)) 2) (log (+ 1 N)) (pow (+ (log N) (log (+ 1 N))) -1) (/ (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (+ (log N) (log (+ 1 N)))) (+ (pow (* (log N) (log (+ 1 N))) 2) (+ (pow (log N) 4) (pow (log (+ 1 N)) 4)))) (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (+ (log N) (log (+ 1 N)))) (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (pow (log (+ 1 N)) 6) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (/ (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (* (* N N) (neg (neg N)))) (pow (log N) 2) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))) (pow (log N) 6) (pow (log N) 4))","N","-inf"],[22.642822265625,"((/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (neg (neg N)) (* (* N N) (neg (neg N))) (- (log (+ N 1)) (log N)) (+ (* (pow (log (+ 1 N)) 2) (pow (+ (log N) (log (+ 1 N))) -1)) (neg (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))))) (pow (log (+ 1 N)) 2) (log (+ 1 N)) (pow (+ (log N) (log (+ 1 N))) -1) (/ (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (+ (log N) (log (+ 1 N)))) (+ (pow (* (log N) (log (+ 1 N))) 2) (+ (pow (log N) 4) (pow (log (+ 1 N)) 4)))) (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (+ (log N) (log (+ 1 N)))) (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (pow (log (+ 1 N)) 6) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (/ (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (* (* N N) (neg (neg N)))) (pow (log N) 2) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))) (pow (log N) 6) (pow (log N) 4))","N","inf"],[14.361083984375,"((/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (- (log (+ N 1)) (log N)) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (- (log (+ N 1)) (log N)) (/ (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) N) (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (neg (neg N)) (* (* N N) (neg (neg N))) (- (log (+ N 1)) (log N)) (+ (* (pow (log (+ 1 N)) 2) (pow (+ (log N) (log (+ 1 N))) -1)) (neg (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))))) (pow (log (+ 1 N)) 2) (log (+ 1 N)) (pow (+ (log N) (log (+ 1 N))) -1) (/ (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (+ (log N) (log (+ 1 N)))) (+ (pow (* (log N) (log (+ 1 N))) 2) (+ (pow (log N) 4) (pow (log (+ 1 N)) 4)))) (/ (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (+ (log N) (log (+ 1 N)))) (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (pow (log (+ 1 N)) 6) (/ (- (/ 1/4 N) 1/3) N) (- (/ 1/4 N) 1/3) (/ (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (* (* N N) (neg (neg N)))) (pow (log N) 2) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))) (pow (log N) 6) (pow (log N) 4))","N","0"]],"time":75.0,"type":"series"},{"count":[[165,164]],"egraph":[[0,8950,12849,0.142777313],[1,3839,13529,0.035519796],[0,1125,14583,0.018181567]],"inputs":[["(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(/ -1/4 (pow N 3))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/ -1/4 N)","(/ (- (* 1/3 N) 1/4) N)","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) N)","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) N)","N","(pow N 3)","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(/ 1 (log N))","(+ (* -1 (/ N (pow (log N) 2))) (/ 1 (log N)))","(+ (* N (- (* N (+ (* 1/2 (/ 1 (pow (log N) 2))) (/ 1 (pow (log N) 3)))) (/ 1 (pow (log N) 2)))) (/ 1 (log N)))","(+ (* N (- (* N (+ (* -1 (* N (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (/ 1 (pow (log N) 3)) (/ 1 (pow (log N) 4)))))) (+ (* 1/2 (/ 1 (pow (log N) 2))) (/ 1 (pow (log N) 3))))) (/ 1 (pow (log N) 2)))) (/ 1 (log N)))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))) (log N))) (+ (* -1 (/ (+ (* -1 (pow (log N) 3)) (+ (* 1/3 (pow (log N) 4)) (pow (log N) 2))) (pow (log N) 4))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(* -1 (pow (log N) 5))","(+ (* -1 (pow (log N) 5)) (* N (pow (log N) 4)))","(+ (* -1 (pow (log N) 5)) (* N (- (* -1 (* N (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)))) (* -1 (pow (log N) 4)))))","(+ (* -1 (pow (log N) 5)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)) (log N))) (+ (* -1/2 (pow (log N) 3)) (* -1/3 (pow (log N) 4)))))) (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)))) (* -1 (pow (log N) 4)))))","(* -1 (pow (log N) 6))","(- (pow N 6) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* -3 N))) (pow (log N) 6))","(- (* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3)))) (pow (log N) 6))","(pow N 6)","(* (pow N 6) (+ 1 (* -3 N)))","(* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3))))","(* (pow N 6) (+ 1 (* N (- (* N (+ 23/4 (* -9 N))) 3))))","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(pow (log N) 2)","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(pow (log N) 6)","(pow (log N) 4)","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","1","(- 1 (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(/ -1/2 N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(/ -1/2 (log (/ 1 N)))","(* -1 (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/4 (/ 1 (* N (pow (log (/ 1 N)) 2))))))","(- (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 2)))) (+ (/ 1/4 (* N (pow (log (/ 1 N)) 2))) (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 3)))))))","(- (+ (/ 1/16 (* (pow N 3) (pow (log (/ 1 N)) 3))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (- (* 1/8 (/ 1 (pow (log (/ 1 N)) 2))) (* 1/8 (/ 1 (pow (log (/ 1 N)) 3)))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/12 (* (pow N 3) (pow (log (/ 1 N)) 2))) (+ (/ 1/4 (* N (pow (log (/ 1 N)) 2))) (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 3)))))))))","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (* N (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1))) (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))))) (+ (* -1/2 (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3)))) (+ (* 1/3 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 3) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))))))) N)","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (log (/ 1 N)))) (* 1/4 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/6 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 1/4 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (* 1/4 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 3) (log (/ 1 N))))))))))) N)","(* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1)) (pow N 3))) (+ (* 2 (/ (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (+ (/ (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2) (pow N 3)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N)))))))) N)","(pow (log (/ 1 N)) 6)","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (pow (log (/ 1 N)) 6))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 3))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))))","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(* -1/2 (log (/ 1 N)))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(pow (log (/ 1 N)) 4)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(* (pow N 2) (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(- (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (/ 1 (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) N)) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (+ (* 1/3 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N)) (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) N)) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* -1/2 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/3 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (+ (/ (* (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -2/3 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1/2 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))) (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2))) N)) (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 6)","(+ (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)"]],"memory":[[7867088,78828704]],"method":["egg-herbie"],"outputs":[["(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N) (log.f64 N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N) (log.f64 N))","(* -4 (pow N 4))","(*.f64 #s(literal -4 binary64) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* -16/3 N) 4))","(*.f64 (fma.f64 #s(literal -16/3 binary64) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 #s(literal 8/9 binary64) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -112/27 binary64) N #s(literal 8/9 binary64)) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 (pow N 3))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ -1/4 N)","(/.f64 #s(literal -1/4 binary64) N)","(/ (- (* 1/3 N) 1/4) N)","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) N)","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) N)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) N)","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)","N","(pow N 3)","(pow.f64 N #s(literal 3 binary64))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (* -1 N)))","(*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/6 binary64) N #s(literal 11/12 binary64)) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(/ 1 (log N))","(/.f64 #s(literal 1 binary64) (log.f64 N))","(+ (* -1 (/ N (pow (log N) 2))) (/ 1 (log N)))","(-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 N (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(+ (* N (- (* N (+ (* 1/2 (/ 1 (pow (log N) 2))) (/ 1 (pow (log N) 3)))) (/ 1 (pow (log N) 2)))) (/ 1 (log N)))","(fma.f64 (-.f64 (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) N) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) N (/.f64 #s(literal 1 binary64) (log.f64 N)))","(+ (* N (- (* N (+ (* -1 (* N (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (/ 1 (pow (log N) 3)) (/ 1 (pow (log N) 4)))))) (+ (* 1/2 (/ 1 (pow (log N) 2))) (/ 1 (pow (log N) 3))))) (/ 1 (pow (log N) 2)))) (/ 1 (log N)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 N) (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N (neg.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N (/.f64 #s(literal 1 binary64) (log.f64 N)))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (neg.f64 N) (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal -1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))) (log N))) (+ (* -1 (/ (+ (* -1 (pow (log N) 3)) (+ (* 1/3 (pow (log N) 4)) (pow (log N) 2))) (pow (log N) 4))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (* -1/2 (pow (log N) 4)) (pow (log N) 3)) (pow (log N) 4))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal -1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (log.f64 N)))) N (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal -1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))))) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -1 (pow (log N) 5))","(neg.f64 (pow.f64 (log.f64 N) #s(literal 5 binary64)))","(+ (* -1 (pow (log N) 5)) (* N (pow (log N) 4)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) N (neg.f64 (pow.f64 (log.f64 N) #s(literal 5 binary64))))","(+ (* -1 (pow (log N) 5)) (* N (- (* -1 (* N (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)))) (* -1 (pow (log N) 4)))))","(fma.f64 (fma.f64 (neg.f64 N) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64))) N (neg.f64 (pow.f64 (log.f64 N) #s(literal 5 binary64))))","(+ (* -1 (pow (log N) 5)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)) (log N))) (+ (* -1/2 (pow (log N) 3)) (* -1/3 (pow (log N) 4)))))) (+ (* 1/2 (pow (log N) 4)) (pow (log N) 3)))) (* -1 (pow (log N) 4)))))","(fma.f64 (fma.f64 (-.f64 (*.f64 (neg.f64 N) (-.f64 (fma.f64 #s(literal -1/3 binary64) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) #s(literal -1/2 binary64))) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (log.f64 N)))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) N (pow.f64 (log.f64 N) #s(literal 4 binary64))) N (neg.f64 (pow.f64 (log.f64 N) #s(literal 5 binary64))))","(* -1 (pow (log N) 6))","(neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(- (pow N 6) (pow (log N) 6))","(-.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(- (* (pow N 6) (+ 1 (* -3 N))) (pow (log N) 6))","(-.f64 (*.f64 (fma.f64 #s(literal -3 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(- (* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3)))) (pow (log N) 6))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 23/4 binary64) N #s(literal -3 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64))) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow N 6)","(pow.f64 N #s(literal 6 binary64))","(* (pow N 6) (+ 1 (* -3 N)))","(*.f64 (fma.f64 #s(literal -3 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64)))","(* (pow N 6) (+ 1 (* N (- (* 23/4 N) 3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 23/4 binary64) N #s(literal -3 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64)))","(* (pow N 6) (+ 1 (* N (- (* N (+ 23/4 (* -9 N))) 3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -9 binary64) N #s(literal 23/4 binary64)) N #s(literal -3 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 6 binary64)))","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N))","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(pow (log N) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(fma.f64 (fma.f64 (+.f64 (fma.f64 (neg.f64 N) (+.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (log.f64 N))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(pow (log N) 6)","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(pow (log N) 4)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64)))) N)","(* N (+ 1 (* 1/2 (/ 1 N))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N)","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","(*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N)","1","#s(literal 1 binary64)","(- 1 (* 1/2 (/ 1 N)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N)))","(-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N))","(- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3)))))","(-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))))","(/ -1/2 N)","(/.f64 #s(literal -1/2 binary64) N)","(/ (- (* 1/3 (/ 1 N)) 1/2) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N)","(/ (- (* 1/3 (/ 1 N)) (+ 1/2 (/ 1/4 (pow N 2)))) N)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/4 binary64) (*.f64 N N))) N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (*.f64 N N))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (*.f64 N N))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64)))) (*.f64 N N))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/.f64 (+.f64 (fma.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (neg.f64 (log.f64 N))) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))) #s(literal 1 binary64)) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (neg.f64 (log.f64 N)))) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))))) #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (+.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/4 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (neg.f64 (log.f64 N)))) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/16 binary64) (neg.f64 (log.f64 N))) (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (neg.f64 (log.f64 N)))) (log.f64 N)) #s(literal 1/12 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (neg.f64 (log.f64 N)))) (neg.f64 (log.f64 N))) (+.f64 (/.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))))))))) #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal -1/2 binary64) #s(literal -1/16 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (log.f64 N)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (log.f64 N)) (/.f64 #s(literal 3/16 binary64) (neg.f64 (log.f64 N))))) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (+.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N)))) #s(literal 1/8 binary64)) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/4 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))) N)","(pow (log (/ 1 N)) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -2/3 binary64) (+.f64 (fma.f64 (/.f64 (log.f64 N) N) (/.f64 #s(literal -1 binary64) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) N)) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(/ -1/2 (log (/ 1 N)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N)))","(* -1 (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/4 (/ 1 (* N (pow (log (/ 1 N)) 2))))))","(neg.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N)) (/.f64 #s(literal 1/2 binary64) (neg.f64 (log.f64 N)))))","(- (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 2)))) (+ (/ 1/4 (* N (pow (log (/ 1 N)) 2))) (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 3)))))))","(-.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 N N))) (+.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 N N))) (/.f64 #s(literal 1/2 binary64) (neg.f64 (log.f64 N)))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))))","(- (+ (/ 1/16 (* (pow N 3) (pow (log (/ 1 N)) 3))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (- (* 1/8 (/ 1 (pow (log (/ 1 N)) 2))) (* 1/8 (/ 1 (pow (log (/ 1 N)) 3)))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/12 (* (pow N 3) (pow (log (/ 1 N)) 2))) (+ (/ 1/4 (* N (pow (log (/ 1 N)) 2))) (+ (* 1/2 (/ 1 (log (/ 1 N)))) (* 1/8 (/ 1 (* (pow N 2) (pow (log (/ 1 N)) 3)))))))))","(-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) (neg.f64 (log.f64 N))) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))) (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 N N))) (/.f64 #s(literal 1/2 binary64) (neg.f64 (log.f64 N)))))))","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (* N (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) N)","(/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 N)) N)) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64)) N))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))))))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (*.f64 N N)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) N) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -4 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (*.f64 N N)) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (neg.f64 (log.f64 N)) (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1))) (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))))) (+ (* -1/2 (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3)))) (+ (* 1/3 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* (pow N 3) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* N (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2)))) (+ (* -1/2 (/ (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* -2 (* (log (/ 1 N)) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (+ (* 4 (pow (log (/ 1 N)) 2)) (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))))))) (+ (* -2 (pow (log (/ 1 N)) 3)) (* -1/2 (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))) (* (pow N 3) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))) (* -1/2 (/ (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))))) (* -1/2 (/ (* (log (/ 1 N)) (* (+ (* -2 (* (log (/ 1 N)) (+ (* -4 (pow (log (/ 1 N)) 3)) (* -2 (pow (log (/ 1 N)) 3))))) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)) 2))))) (* (pow N 2) (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 4)) (pow (log (/ 1 N)) 4)))))))))))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (neg.f64 (log.f64 N)))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (*.f64 N N)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 (log.f64 N)) N)) (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (fma.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)))) (*.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (neg.f64 (log.f64 N))) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -4 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (*.f64 N N)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 3 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) #s(literal -1/2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 1/3 binary64) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) (pow.f64 N #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (log.f64 N))) N) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (*.f64 (fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -4 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))))))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))) (*.f64 (*.f64 (/.f64 (fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -4 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N))) #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal -1/2 binary64) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64))))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) (*.f64 #s(literal -1/6 binary64) (/.f64 (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (log.f64 N) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -6 binary64)) (neg.f64 (log.f64 N))) #s(literal -2 binary64) (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))))) #s(literal -1/2 binary64))))))) N)","(/ (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N))","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))) N)","(/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (neg.f64 (log.f64 N)) N)) #s(literal -1/2 binary64) (fma.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 (log.f64 N)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2)))))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (neg.f64 (log.f64 N)) N)) #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (fma.f64 (*.f64 (neg.f64 (log.f64 N)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 (log.f64 N) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (log.f64 N))) (*.f64 (/.f64 #s(literal 1/4 binary64) N) (*.f64 (neg.f64 (log.f64 N)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1))) (+ (* 2 (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2))) (* (pow N 3) (log (/ 1 N))))) (* (pow (log (/ 1 N)) 2) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (+ (* -1/2 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))))) (* 2 (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (log (/ 1 N)))) (* 1/4 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/6 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 1/4 (/ (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (* 1/4 (/ (- (* -1/2 (/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))))) (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2)) (log (/ 1 N)))) (* -1/2 (* (log (/ 1 N)) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))))) (* (pow N 3) (log (/ 1 N))))))))))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (neg.f64 (log.f64 N))) (fma.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (*.f64 (neg.f64 (log.f64 N)) N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (fma.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (fma.f64 (*.f64 (neg.f64 (log.f64 N)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64))) (log.f64 N))) (fma.f64 (*.f64 #s(literal 1/4 binary64) (neg.f64 (log.f64 N))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 (log.f64 N) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (log.f64 N))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 (log.f64 N) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (log.f64 N))) (fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (log.f64 N))) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (/.f64 (neg.f64 (log.f64 N)) N) (*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))) (neg.f64 (log.f64 N))) (*.f64 (log.f64 N) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (neg.f64 (log.f64 N))))))))))) N)","(* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N))","(*.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64))","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))) N)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N)) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N))))) N)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 N N)) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N))))) N)","(/ (+ (* -2 (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) N)) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (- (+ (* -4/3 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (+ (* -1/2 (+ 1 (log (/ 1 N)))) (* -1/4 (pow (log (/ 1 N)) 2))))) 1)) (pow N 3))) (+ (* 2 (/ (* (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 2))) (+ (/ (pow (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) 2) (pow N 3)) (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) N)))))))) N)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)","(pow (log (/ 1 N)) 6)","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (pow (log (/ 1 N)) 6))","(fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64)))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))","(fma.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64)) N) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64) (+.f64 (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (*.f64 N N)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64)))))","(+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ 1 (+ (* -1 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 1/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N))))))) (pow N 3))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2))))) (pow N 2))) (+ (* -2 (/ (* (pow (log (/ 1 N)) 3) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) N)) (+ (* 2 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -1 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1/2 (pow (log (/ 1 N)) 2)))) (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2))) (pow N 3))) (+ (/ (pow (+ (* 2 (pow (log (/ 1 N)) 2)) (pow (log (/ 1 N)) 2)) 2) (pow N 2)) (pow (log (/ 1 N)) 6))))))","(fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -2 binary64)) N) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (+.f64 (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) (*.f64 N N)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 6 binary64)))))))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(* -1/2 (log (/ 1 N)))","(*.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64))","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(-.f64 (*.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64)) (/.f64 #s(literal 1/4 binary64) N))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(-.f64 (-.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/8 binary64) (*.f64 N N))) (/.f64 #s(literal 1/4 binary64) N)) (/.f64 #s(literal 1/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(-.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))) (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (neg.f64 (log.f64 N)))) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/4 binary64) N)) (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))))","(pow (log (/ 1 N)) 4)","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64) #s(literal 1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(neg.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(neg.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1 binary64) #s(literal -1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) N))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","(+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N))","(* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N))","(* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) (*.f64 N N))","(* (pow N 2) (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N)) (*.f64 N N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 #s(literal 2 binary64) N) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64)) (/.f64 (+.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) N))) N)","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (neg.f64 (+.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (-.f64 (*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N))) N)","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64)) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) #s(literal -2/3 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 11/12 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 5 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (-.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/3 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/3 binary64))) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (-.f64 (*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) N))) N)","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) N)) N))","(+ (log -1) (* -1 (log (/ -1 N))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) N))","(/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))","(- (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))) (/ 1 (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (/.f64 #s(literal 1 binary64) N) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) N)) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N)) N))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (- (+ (* 1/3 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1 (/ (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N)) (+ (* 1/2 (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) N)) (/ 1 (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1/3 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) N)) N)) N))","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))","(*.f64 (/.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) N))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))) N)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (/.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal -3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (*.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))) N)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* -1/2 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/3 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (+ (/ (* (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)))) (+ (* -1/2 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))) (/ (* (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2)))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1 (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))) (* (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2) (pow (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) 2))))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) (+ (* 2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (/.f64 (-.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal -3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2/3 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (-.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) #s(literal -1/2 binary64) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 #s(literal 3 binary64) (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (fma.f64 (/.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal 3 binary64)) (/.f64 #s(literal -3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (*.f64 (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (*.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))))) N)) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (+.f64 #s(literal 4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) #s(literal 2 binary64)))) N)) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -6 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))) N)","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) N)) #s(literal -2 binary64))","(* -1 (/ (+ (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) N))) N)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N)) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) N))) N)","(* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -2/3 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1/2 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* 2 (/ (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))) (* -1 (/ (- (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (* 2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (-.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (/.f64 (-.f64 (fma.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2/3 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (-.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2/3 binary64))) (/.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (neg.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 2 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N)) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -2 binary64))) N))) N)","(* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))","(*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) N) #s(literal -2 binary64))","(* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) N))) N)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))))) N)) N))) N)","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1 (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/2 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2/3 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))) (pow (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))) 2))) N)) (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))))) (/.f64 (fma.f64 (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) #s(literal 2 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -1/2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2/3 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))) N)) N))) N))) N)","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 6)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64))","(+ (* -2 (/ (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) N) #s(literal -2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2)) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) N)) N))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 2 (* (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -1/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))))))))) N)) (+ (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -1/2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))))))) (pow (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) 2))) N)) (* 2 (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 6))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 6 binary64)) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64))) (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -3 binary64)) (*.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -1/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64))))) N)) N)) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(neg.f64 (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) N)))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)) N))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)) N))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)) N))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))) N) #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":367.155029296875,"type":"simplify"},{"count":[[27,898]],"egraph":[[0,8962,282,0.09127075],[2,3223,282,0.045512494],[1,426,282,0.013220683],[0,99,331,0.00301252],[0,59,361,0.000588089]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(neg.f64 (neg.f64 N))","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))"]],"memory":[[-134724088,76352448]],"outputs":[["(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) N) (pow.f64 (pow.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) N) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(pow.f64 (exp.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) N)","(/.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (*.f64 N (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 N (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 N (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (neg.f64 N))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) (neg.f64 N)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N) (/.f64 #s(literal -1 binary64) N))","(exp.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)))","(+.f64 (pow.f64 (*.f64 (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) N) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(+.f64 (pow.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(*.f64 (pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64)) (pow.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(*.f64 (/.f64 N (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) N)","(*.f64 (neg.f64 N) (pow.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(*.f64 N (/.f64 (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 N (pow.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(pow.f64 (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 N) (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 (neg.f64 N) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)))","(/.f64 N (*.f64 #s(literal 1 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(/.f64 N (neg.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","(/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","(neg.f64 (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))) (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 (neg.f64 N) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))))","(exp.f64 (neg.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (-.f64 (log.f64 N) (log1p.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (/.f64 N (-.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal -1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal 1 binary64))","(fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (+.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64)))","(-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))","(+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (fma.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (neg.f64 N) N) (*.f64 N N))","(/.f64 (fma.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (/.f64 N #s(literal 1 binary64)) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (/.f64 N #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) N))","(/.f64 (fma.f64 (neg.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) (neg.f64 N) N) (*.f64 N N))","(/.f64 (fma.f64 (neg.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) (/.f64 N #s(literal 1 binary64)) (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) (/.f64 N #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) N (*.f64 (neg.f64 N) #s(literal 1 binary64))) (*.f64 (neg.f64 N) N))","(/.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (neg.f64 N) (neg.f64 N)) (*.f64 N (neg.f64 N)))","(/.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (/.f64 N #s(literal 1 binary64)) N) (*.f64 N (/.f64 N #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N N) (*.f64 N N))","(/.f64 (fma.f64 #s(literal -1 binary64) N (*.f64 (/.f64 N #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) #s(literal -1 binary64))) (*.f64 (/.f64 N #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) (neg.f64 N)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 N #s(literal 1 binary64)) (*.f64 (/.f64 N #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) #s(literal 1 binary64))) (*.f64 (/.f64 N #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) (/.f64 N #s(literal 1 binary64))))","(/.f64 (+.f64 N (*.f64 (/.f64 N #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) #s(literal 1 binary64))) (*.f64 (/.f64 N #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) N))","(/.f64 (-.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (-.f64 (neg.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))) #s(literal 1 binary64)) (neg.f64 N))","(/.f64 (/.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal -1 binary64)) N)","(/.f64 (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64)) N)","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal -2 binary64))) (+.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 3 binary64)) (neg.f64 (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) #s(literal 2 binary64)) (+.f64 (pow.f64 N #s(literal -2 binary64)) (*.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))) N)","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) N))","(/.f64 (-.f64 (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (neg.f64 N)) (*.f64 N N))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 N (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 N (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) (neg.f64 N))","(/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) N))","(neg.f64 (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (neg.f64 N)))","(fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) (pow.f64 N #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)))","(-.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (/.f64 #s(literal -1 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) N) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)) (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))) (pow.f64 (+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 3 binary64)) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 2 binary64)))))","(-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64))","(+.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)))","#s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N))","(*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(*.f64 N (+.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(pow.f64 (/.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) (neg.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64))) (+.f64 (pow.f64 N #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)))))","(fma.f64 (exp.f64 (log.f64 N)) (exp.f64 (log.f64 N)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) #s(literal -1 binary64)) (neg.f64 N) (*.f64 N N))","(fma.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) (*.f64 (neg.f64 N) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 (+.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 N) (*.f64 N N))","(fma.f64 (*.f64 N N) #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 (neg.f64 N) (neg.f64 N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))) (*.f64 N N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N (*.f64 N N))","(fma.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (*.f64 N N))","(fma.f64 N N (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(fma.f64 #s(literal 1 binary64) (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (/.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(-.f64 (*.f64 N N) (*.f64 (neg.f64 N) (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))))","(+.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) (*.f64 N N))","(+.f64 (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))","(*.f64 (pow.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 (neg.f64 N) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 N))","(*.f64 N #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) N)","(pow.f64 N #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 N N)) (neg.f64 N))","(/.f64 (pow.f64 N #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 N N (*.f64 #s(literal 0 binary64) (neg.f64 N)))))","(neg.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)))","(neg.f64 (neg.f64 N))","(-.f64 #s(literal 0 binary64) (neg.f64 N))","(exp.f64 (*.f64 (log.f64 N) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) N)","N","(*.f64 (pow.f64 (neg.f64 N) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 3/2 binary64)) (pow.f64 (*.f64 (neg.f64 N) N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 3/2 binary64)) (pow.f64 N #s(literal 3 binary64)))","(*.f64 (*.f64 (*.f64 N N) #s(literal -1 binary64)) (neg.f64 N))","(*.f64 (pow.f64 N #s(literal 3/2 binary64)) (pow.f64 N #s(literal 3/2 binary64)))","(*.f64 (neg.f64 (*.f64 N N)) (neg.f64 N))","(*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 N N) N)","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(*.f64 N (*.f64 N N))","(*.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))","(pow.f64 (exp.f64 (log.f64 N)) #s(literal 3 binary64))","(pow.f64 (pow.f64 N #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 N N) #s(literal 3/2 binary64))","(pow.f64 N #s(literal 3 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (*.f64 N N)) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (pow.f64 N #s(literal 9 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) (fma.f64 N N (*.f64 #s(literal 0 binary64) (neg.f64 N)))) #s(literal 3 binary64)))","(neg.f64 (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 3 binary64)))","(neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 N) #s(literal 3 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(*.f64 (pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (-.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (log1p.f64 N)) (log1p.f64 N) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log1p.f64 N)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log1p.f64 N)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log.f64 N) (/.f64 (log.f64 N) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (neg.f64 N)))","(-.f64 (log.f64 (neg.f64 (+.f64 N #s(literal 1 binary64)))) (log.f64 (neg.f64 N)))","(-.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 0 binary64)) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 N #s(literal 1 binary64))))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(*.f64 (log1p.f64 N) (log1p.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(exp.f64 (+.f64 (log.f64 (log1p.f64 N)) (log.f64 (log1p.f64 N))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)))","(pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (log1p.f64 N) #s(literal 1 binary64))","(log1p.f64 N)","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(neg.f64 (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(exp.f64 (log.f64 (log1p.f64 N)))","(+.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))))","(log.f64 (+.f64 N #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)))","(exp.f64 (fma.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1/2 binary64) (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 3 binary64)))) (fma.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (-.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (-.f64 (log1p.f64 N) (log.f64 N)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (log1p.f64 N)) (log1p.f64 N) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log1p.f64 N)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log1p.f64 N)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log.f64 N) (/.f64 (log.f64 N) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (neg.f64 N)))","(-.f64 (log.f64 (neg.f64 (+.f64 N #s(literal 1 binary64)))) (log.f64 (neg.f64 N)))","(-.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 0 binary64)) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))) (/.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 N #s(literal 1 binary64))))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 12 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (pow.f64 (log.f64 N) #s(literal 18 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 12 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 18 binary64)) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 18 binary64)) (+.f64 (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (log1p.f64 N) #s(literal 12 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))","(+.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 6 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64))","(pow.f64 (log1p.f64 N) #s(literal 6 binary64))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64) (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 4 binary64) (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64) (log.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 3 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64))))","(*.f64 (pow.f64 (/.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (/.f64 #s(literal -1 binary64) N))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N))","(pow.f64 (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1 binary64)) #s(literal -1/3 binary64)) (neg.f64 N))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1/3 binary64)) (neg.f64 N))","(/.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal -1 binary64)) N)","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 N #s(literal -1 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))","(/.f64 (-.f64 (/.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal 6 binary64))) (*.f64 #s(literal 1/27 binary64) (pow.f64 N #s(literal -3 binary64)))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N)))))","(/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) N)","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) N))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) N) N) (*.f64 N #s(literal 1/3 binary64))) (*.f64 N N))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (*.f64 N (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (*.f64 N (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) (neg.f64 N))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))) N))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 #s(literal -1/4 binary64) (/.f64 (pow.f64 N #s(literal -1 binary64)) (neg.f64 N)) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(fma.f64 #s(literal 1/4 binary64) (/.f64 (pow.f64 N #s(literal -1 binary64)) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(-.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (/.f64 #s(literal 1/3 binary64) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) N) N) (neg.f64 (/.f64 #s(literal 1/3 binary64) N)))","(*.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (pow.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (pow.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))) (neg.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))) (neg.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (-.f64 #s(literal 1/9 binary64) (*.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64)))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) #s(literal -1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 N #s(literal -3 binary64)) #s(literal -1/27 binary64))))","(fma.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/4 binary64) #s(literal -1/3 binary64))","(fma.f64 #s(literal -1/4 binary64) (/.f64 #s(literal -1 binary64) N) #s(literal -1/3 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal -1 binary64)) #s(literal -1/3 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 2 binary64)) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))) (/.f64 #s(literal 1/9 binary64) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 3 binary64)) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))) (/.f64 #s(literal 1/27 binary64) (fma.f64 (pow.f64 N #s(literal -2 binary64)) #s(literal 1/16 binary64) (+.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 1/9 binary64)))))","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(+.f64 #s(literal -1/3 binary64) (/.f64 #s(literal 1/4 binary64) N))","(+.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal -1/3 binary64))","(*.f64 (pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -2 binary64)) (pow.f64 (/.f64 N (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (pow.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))))","(*.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (neg.f64 (pow.f64 N #s(literal -3 binary64))))","(*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(pow.f64 (/.f64 N (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) N) (*.f64 N N))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 N #s(literal -3 binary64))) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64))) (pow.f64 N #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64)))) (neg.f64 N))","(/.f64 (neg.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) N)","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (*.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(/.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 3 binary64))) (*.f64 (pow.f64 N #s(literal 3 binary64)) (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))))","(/.f64 #s(literal 1 binary64) (/.f64 N (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))))","(neg.f64 (/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) (neg.f64 N)))","(neg.f64 (/.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N))) (pow.f64 N #s(literal 3 binary64))))","(neg.f64 (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (log.f64 N)) (neg.f64 (log.f64 N)))","(*.f64 (log.f64 N) (log.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(exp.f64 (+.f64 (log.f64 (log.f64 N)) (log.f64 (log.f64 N))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))))","(*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (log.f64 N) (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (log.f64 N) (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log.f64 N)) #s(literal 2 binary64))","(pow.f64 (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(exp.f64 (fma.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64) (*.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 6 binary64)) (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 6 binary64)))","(*.f64 (pow.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (pow.f64 (log.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (exp.f64 #s(literal 6 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 3/2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64))","(pow.f64 (log.f64 N) #s(literal 6 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64))))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 4 binary64) (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64) (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 3 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 4 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (log.f64 N))","(*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64) (log.f64 (log.f64 N))))","(exp.f64 (+.f64 (log.f64 (log.f64 N)) (*.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 N)) #s(literal 2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":527.833984375,"type":"rewrite"},{"compiler":[[55874,5211]],"memory":[[7987136,133573344]],"time":193.514892578125,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",48.56765007832825,"binary64"],["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",48.9076376124796,"binary64"],["(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",49.13614639841321,"binary64"],["(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",50.17529080984707,"binary64"],["(fma.f64 (exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",49.33465904595532,"binary64"],["(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",48.81573806680513,"binary64"],["(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",49.94620259467407,"binary64"],["(/.f64 (/.f64 (fma.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","fresh",49.05147217137583,"binary64"],["(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","done",50.291931460711446,"binary64"],["(/.f64 (/.f64 #s(approx (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","fresh",2.186742476940144,"binary64"],["(/.f64 (-.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","fresh",49.634518602464574,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","fresh",50.203500892998726,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","fresh",50.30461586502218,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","done",50.29848704643233,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",50.30073264669656,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",49.71958189686192,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",50.399055365182356,"binary64"],["(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","fresh",50.13313949329553,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.08643336701424,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","fresh",50.20184652927573,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","next",50.303746381458225,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","next",50.302678117871025,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","fresh",48.35938651659255,"binary64"],["(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","fresh",2.4599261907672303,"binary64"],["(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","fresh",48.67407714276263,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N N) (*.f64 N N)))","fresh",1.9792836328488976,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","next",2.6432383356659432,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",2.455869653783334,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","fresh",1.764415990429462,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",2.470892433552361,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","done",3.8923262234949845,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","fresh",1.982234113700807,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))) N))","fresh",1.9646721169227936,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","fresh",1.9744234909062328,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal -1 binary64)))))","fresh",2.439557314291803,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","next",3.5431863642128194,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","fresh",2.2301578621610627,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","fresh",1.6280672891583812,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","next",1.6174456764336078,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","fresh",2.2299258364665104,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",8.72236888430596,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","fresh",1.823030129502282,"binary64"]],"compiler":[[25,14],[23,12],[23,12],[22,10],[25,14],[25,13],[39,14],[40,23],[33,18],[254,81],[35,20],[40,21],[32,17],[33,18],[25,13],[24,14],[15,9],[68,17],[40,14],[42,23],[27,15],[21,10],[7,6],[23,17],[6,5],[26,18],[34,22],[19,15],[32,24],[21,16],[27,21],[29,21],[37,28],[45,32],[27,22],[32,24],[39,29],[45,34],[43,33],[39,30],[11,9],[26,20],[25,14],[23,12],[23,12],[22,10],[25,14],[25,13],[39,14],[40,23],[254,81],[35,20],[40,21],[32,17],[25,13],[24,14],[15,9],[68,17],[40,14],[42,23],[27,15],[21,10],[7,6],[23,17],[6,5],[26,18],[34,22],[19,15],[32,24],[21,16],[29,21],[37,28],[45,32],[27,22],[32,24],[39,29],[45,34],[43,33],[39,30],[26,20]],"count":[[1242,42]],"kept":[{"done":[3,2],"fresh":[28,20],"new":[1206,18],"picked":[5,2]}],"memory":[[-2938736,69584016]],"min-error":[[0.10666178593376527,"binary64"]],"time":75.7509765625,"type":"prune"},{"egraph":[[0,8183,476,0.042220011],[4,5331,476,0.037625071],[3,2006,476,0.030880038],[2,492,498,0.013024419],[1,181,515,0.003022962],[0,102,532,0.000985454],[0,63,552,0.00063095]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))","(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","(neg.f64 N)","N","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)","(-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))","#s(literal 1/12 binary64)","(/.f64 #s(literal 1/24 binary64) N)","#s(literal 1/24 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","(/.f64 #s(literal 1/2 binary64) N)","#s(literal 1/2 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)","#s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))","#s(literal -1/3 binary64)","N","(neg.f64 (neg.f64 N))","(neg.f64 N)","(*.f64 N N)","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(log1p.f64 N)","N","#s(literal 4 binary64)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(log.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(+.f64 (log.f64 N) (log1p.f64 N))","#s(literal -1 binary64)","(fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)"]],"locations":[["(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","cost-diff",0],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","cost-diff",0],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","cost-diff",0],["(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","cost-diff",2],["(log1p.f64 N)","cost-diff",0],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","cost-diff",0],["(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","cost-diff",0],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","cost-diff",0],["(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","cost-diff",2],["(neg.f64 (neg.f64 N))","cost-diff",2],["(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","cost-diff",3],["#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","cost-diff",0],["(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","cost-diff",3],["(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))))","cost-diff",0],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","cost-diff",0],["(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","cost-diff",1],["(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","cost-diff",5]],"memory":[[440784,22656752]],"method":["egg-herbie"],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))","(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","(+.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)","(neg.f64 N)","N","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)","(-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","#s(literal 1/2 binary64)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))","#s(literal 1/12 binary64)","(/.f64 #s(literal 1/24 binary64) N)","#s(literal 1/24 binary64)","#s(literal -1 binary64)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (-.f64 N #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (-.f64 N #s(literal -1/2 binary64))))","#s(literal 1 binary64)","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (-.f64 N #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","(-.f64 N #s(literal -1/2 binary64))","(/.f64 #s(literal 1/2 binary64) N)","#s(literal 1/2 binary64)","N","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (-.f64 N #s(literal 1/2 binary64)) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (*.f64 N N)))","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(/.f64 (-.f64 (-.f64 N #s(literal 1/2 binary64)) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (*.f64 N N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(neg.f64 (fma.f64 N (-.f64 #s(literal 1/2 binary64) N) #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))))","(-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N))","#s(literal -1/2 binary64)","(/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)","#s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))","#s(literal -1/3 binary64)","N","(neg.f64 (neg.f64 N))","N","(neg.f64 N)","(*.f64 N N)","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","(pow.f64 N #s(literal 3 binary64))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","N","#s(literal 2 binary64)","(+.f64 (log.f64 N) (log1p.f64 N))","(log.f64 N)","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(log1p.f64 N)","N","#s(literal 4 binary64)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(log.f64 N)","(pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))","(+.f64 (log.f64 N) (log1p.f64 N))","#s(literal -1 binary64)","(fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":193.47802734375,"type":"simplify"},{"compiler":[[455,57]],"locations":[["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.534198779305326],["(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","accuracy",0.8506167970327536],["(pow.f64 (log.f64 N) #s(literal 4 binary64))","accuracy",0.8548167481905434],["(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","accuracy",48.87837454372537],["(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","accuracy",0.44921875],["(pow.f64 (log.f64 N) #s(literal 2 binary64))","accuracy",0.5319137695368841],["(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","accuracy",0.534198779305326],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","accuracy",49.11919413692779],["(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","accuracy",0.27572250976844204],["(/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)","accuracy",0.3515625],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","accuracy",1.3894556969552336],["#s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))","accuracy",8.515744294225394],["(/.f64 #s(literal 1/2 binary64) N)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)))","accuracy",0.0625],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","accuracy",1.3894556969552336],["#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))","accuracy",3.189486559487296],["(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","accuracy",0.33203125],["(/.f64 #s(literal 1/24 binary64) N)","accuracy",0.36328125],["#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))","accuracy",1.3877849146454169],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","accuracy",1.3894556969552336]],"memory":[[-3915952,83362192]],"mixsample":[[26.62744140625,"adjust",800],[33.838134765625,"ival-div",0],[1.602294921875,"ival-div",400],[2.999755859375,"ival-pow2",400],[0.6005859375,"adjust",4800],[0.48876953125,"adjust",4000],[0.1650390625,"ival-assert",0],[18.341064453125,"ival-sub",0],[19.14208984375,"const",0],[0.15087890625,"ival-sub",400],[5.34912109375,"ival-log1p",400],[19.247314453125,"ival-pow",0],[9.48291015625,"ival-add",0],[0.033935546875,"ival-mult",800],[0.65234375,"ival-add",400],[0.490966796875,"adjust",2800],[7.46533203125,"ival-log1p",0],[0.043212890625,"ival-div",2000],[0.043212890625,"ival-div",4000],[5.62353515625,"ival-pow",400],[7.526123046875,"ival-pow2",0],[0.03173828125,"ival-mult",2000],[0.169189453125,"const",400],[0.0224609375,"ival-add",4000],[0.591796875,"adjust",2000],[22.736083984375,"ival-mult",0],[0.138427734375,"ival-mult",400],[3.5263671875,"ival-log",400],[0.021240234375,"ival-add",2000],[0.046875,"ival-div",800],[5.04248046875,"ival-log",0],[0.3466796875,"ival-true",0],[0.986083984375,"exact",0],[0.02783203125,"ival-add",800],[2.404296875,"ival-neg",0],[0.029541015625,"ival-mult",4000]],"outcomes":[[234.766845703125,1,"valid",198],[9.425537109375,5,"exit",5],[25.611328125,0,"valid",53]],"time":336.27294921875,"type":"localize"},{"count":[[30,166]],"inputs":[["(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(neg.f64 (neg.f64 N))","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1/24 binary64) N)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(/.f64 #s(literal 1/2 binary64) N)","#s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 4 binary64))"]],"memory":[[7611136,30302256]],"outputs":[["(/ 1/24 (pow N 2))","(/ (+ 1/24 (* -1/12 N)) (pow N 2))","(/ (+ 1/24 (* N (- (* 1/2 N) 1/12))) (pow N 2))","(/ (+ 1/24 (* N (- (* N (+ 1/2 N)) 1/12))) (pow N 2))","(/ -1/24 (pow N 3))","(/ (- (* 1/12 N) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* -1/2 N))) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* N (- (* -1 N) 1/2)))) 1/24) (pow N 3))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","1/2","(+ 1/2 N)","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(/ -1/4 N)","(/ (- (* 1/3 N) 1/4) N)","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) N)","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) N)","N","(pow N 3)","(/ (pow N 2) (log N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (pow (log N) 3))","(+ (* -1 (pow (log N) 3)) (* N (pow (log N) 2)))","(+ (* -1 (pow (log N) 3)) (* N (- (* -1 (* N (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ (* -1 (pow (log N) 3)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (log N) (* 1/2 (pow (log N) 2))) (log N))) (+ (* -1/2 (log N)) (* -1/3 (pow (log N) 2)))))) (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ 1 (+ (* -1 (log N)) (* 1/3 (pow (log N) 2)))) (pow (log N) 2))) (+ (* -1 (/ (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))) (log N))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(* -1 (pow (log N) 4))","(- (pow N 4) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* -2 N))) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2)))) (pow (log N) 4))","(pow N 4)","(* (pow N 4) (+ 1 (* -2 N)))","(* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2))))","(* (pow N 4) (+ 1 (* N (- (* N (+ 17/6 (* -7/2 N))) 2))))","(/ 1/24 N)","(/ -1/24 (pow N 2))","(/ (- (* 1/12 N) 1/24) (pow N 2))","(/ 1/2 N)","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(pow (log N) 2)","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(pow (log N) 4)","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","-1","(* -1 (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(* -1/2 (log (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(* 2 (/ (pow (log (/ 1 N)) 2) N))","(/ (- (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))) (* -1 (/ (log (/ 1 N)) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2)))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (log (/ 1 N)))) (* 1/2 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 1/4 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2))))))))) N)","(/ (- (+ 1 (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) (+ (* -1/4 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (pow (log (/ 1 N)) 3))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (pow (log (/ 1 N)) 3)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ 1 (+ (* -2 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))))))) N)","(* -4 (/ (pow (log (/ 1 N)) 3) N))","(/ (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (* 4 (/ (pow (log (/ 1 N)) 2) N)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (* 4 (/ (pow (log (/ 1 N)) 2) N)))))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (+ 1 (log (/ 1 N))) 2) (pow N 3))))))))) N)","(pow (log (/ 1 N)) 4)","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (pow (log (/ 1 N)) 4))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))","(+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 3))) (+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))))","(/ 1/12 N)","(/ (- 1/12 (* 1/24 (/ 1 N))) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)","(- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(* (pow N 2) (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 1/2 (/ (* (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) N)) (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) N)) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(+ (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(* -1 (/ (- (* 1/24 (/ 1 N)) 1/12) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))"]],"series":[[22.10791015625,"((* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (+ (* (/ 1/2 N) N) N) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (neg (neg N)) (* (* N N) (neg (neg N))) (- (log (+ N 1)) (log N)) (- (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N))))) (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (log (+ 1 N)) 2) (log (+ 1 N)) (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (/ (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (+ (* (log N) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (log (+ 1 N)) 4) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/ 1/24 N) (/ (- 1/12 (/ 1/24 N)) N) (/ 1/2 N) (- (/ 1/4 N) 1/3) (/ (- (/ 1/4 N) 1/3) N) (/ (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (* (* N N) (neg (neg N)))) (pow (log N) 2) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))) (pow (log N) 4))","N","-inf"],[20.468994140625,"((* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (+ (* (/ 1/2 N) N) N) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (neg (neg N)) (* (* N N) (neg (neg N))) (- (log (+ N 1)) (log N)) (- (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N))))) (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (log (+ 1 N)) 2) (log (+ 1 N)) (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (/ (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (+ (* (log N) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (log (+ 1 N)) 4) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/ 1/24 N) (/ (- 1/12 (/ 1/24 N)) N) (/ 1/2 N) (- (/ 1/4 N) 1/3) (/ (- (/ 1/4 N) 1/3) N) (/ (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (* (* N N) (neg (neg N)))) (pow (log N) 2) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))) (pow (log N) 4))","N","inf"],[14.462890625,"((* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (+ (* (/ 1/2 N) N) N) (- (log (+ N 1)) (log N)) (/ 1 (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1))) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (neg (neg N)) (* (* N N) (neg (neg N))) (- (log (+ N 1)) (log N)) (- (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N))))) (/ (pow (log (+ 1 N)) 2) (+ (log N) (log (+ 1 N)))) (pow (log (+ 1 N)) 2) (log (+ 1 N)) (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (/ (* (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (+ (log N) (log (+ 1 N))) -1)) (+ (* (log N) (log N)) (pow (log (+ 1 N)) 2))) (- (pow (log (+ 1 N)) 4) (pow (log N) 4)) (pow (log (+ 1 N)) 4) (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/ 1/24 N) (/ (- 1/12 (/ 1/24 N)) N) (/ 1/2 N) (- (/ 1/4 N) 1/3) (/ (- (/ 1/4 N) 1/3) N) (/ (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (* (* N N) (neg (neg N)))) (pow (log N) 2) (/ (pow (log N) 2) (+ (log N) (log (+ 1 N)))) (pow (log N) 4))","N","0"]],"time":63.97314453125,"type":"series"},{"count":[[166,165]],"egraph":[[0,8772,9022,0.123361466],[1,3305,9523,0.032808213],[0,1032,10394,0.011962346]],"inputs":[["(/ 1/24 (pow N 2))","(/ (+ 1/24 (* -1/12 N)) (pow N 2))","(/ (+ 1/24 (* N (- (* 1/2 N) 1/12))) (pow N 2))","(/ (+ 1/24 (* N (- (* N (+ 1/2 N)) 1/12))) (pow N 2))","(/ -1/24 (pow N 3))","(/ (- (* 1/12 N) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* -1/2 N))) 1/24) (pow N 3))","(/ (- (* N (+ 1/12 (* N (- (* -1 N) 1/2)))) 1/24) (pow N 3))","(* -1 (log N))","(- N (log N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(/ -1/4 (pow N 4))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","1/2","(+ 1/2 N)","(* -4 (pow N 4))","(* (pow N 4) (- (* -16/3 N) 4))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(/ -1/4 N)","(/ (- (* 1/3 N) 1/4) N)","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) N)","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) N)","N","(pow N 3)","(/ (pow N 2) (log N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(pow N 2)","(* (pow N 2) (+ 1 (* -1 N)))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(* N (+ 1 (* -1/2 N)))","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(* -1 (pow (log N) 3))","(+ (* -1 (pow (log N) 3)) (* N (pow (log N) 2)))","(+ (* -1 (pow (log N) 3)) (* N (- (* -1 (* N (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ (* -1 (pow (log N) 3)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (log N) (* 1/2 (pow (log N) 2))) (log N))) (+ (* -1/2 (log N)) (* -1/3 (pow (log N) 2)))))) (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(+ N (* -1 (log N)))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ 1 (+ (* -1 (log N)) (* 1/3 (pow (log N) 2)))) (pow (log N) 2))) (+ (* -1 (/ (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))) (log N))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(* -1 (pow (log N) 4))","(- (pow N 4) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* -2 N))) (pow (log N) 4))","(- (* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2)))) (pow (log N) 4))","(pow N 4)","(* (pow N 4) (+ 1 (* -2 N)))","(* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2))))","(* (pow N 4) (+ 1 (* N (- (* N (+ 17/6 (* -7/2 N))) 2))))","(/ 1/24 N)","(/ -1/24 (pow N 2))","(/ (- (* 1/12 N) 1/24) (pow N 2))","(/ 1/2 N)","(/ 1/4 N)","(/ (+ 1/4 (* -1/3 N)) N)","(/ 1/4 (pow N 2))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(pow (log N) 2)","(log N)","(+ (log N) (* -1 N))","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(pow (log N) 4)","(* N (+ 1 (* 1/2 (/ 1 N))))","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","-1","(* -1 (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (* 1/2 (/ 1 N))))","(- (/ 1/12 (pow N 2)) (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))))","(/ 1 N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(* -1/2 (log (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(pow (log (/ 1 N)) 2)","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(* -1 (log (/ 1 N)))","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(* 2 (/ (pow (log (/ 1 N)) 2) N))","(/ (- (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))) (* -1 (/ (log (/ 1 N)) N))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2)))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2)))))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (log (/ 1 N)))) (* 1/2 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 1/4 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2))))))))) N)","(/ (- (+ 1 (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) (+ (* -1/4 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (pow (log (/ 1 N)) 3))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (pow (log (/ 1 N)) 3)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ 1 (+ (* -2 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))))))) N)","(* -4 (/ (pow (log (/ 1 N)) 3) N))","(/ (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (* 4 (/ (pow (log (/ 1 N)) 2) N)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (* 4 (/ (pow (log (/ 1 N)) 2) N)))))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (+ 1 (log (/ 1 N))) 2) (pow N 3))))))))) N)","(pow (log (/ 1 N)) 4)","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (pow (log (/ 1 N)) 4))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))","(+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 3))) (+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))))","(/ 1/12 N)","(/ (- 1/12 (* 1/24 (/ 1 N))) N)","-1/3","(- (* 1/4 (/ 1 N)) 1/3)","(/ -1/3 N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)","(- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(* (pow N 2) (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(+ (log -1) (* -1 (log (/ -1 N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 1/2 (/ (* (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) N)) (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) N)) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(+ (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(* -1 (/ (- (* 1/24 (/ 1 N)) 1/12) N))","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))"]],"memory":[[-10746064,69300368]],"method":["egg-herbie"],"outputs":[["(/ 1/24 (pow N 2))","(/.f64 #s(literal 1/24 binary64) (*.f64 N N))","(/ (+ 1/24 (* -1/12 N)) (pow N 2))","(/.f64 (fma.f64 #s(literal -1/12 binary64) N #s(literal 1/24 binary64)) (*.f64 N N))","(/ (+ 1/24 (* N (- (* 1/2 N) 1/12))) (pow N 2))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))","(/ (+ 1/24 (* N (- (* N (+ 1/2 N)) 1/12))) (pow N 2))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))","(/ -1/24 (pow N 3))","(/.f64 #s(literal -1/24 binary64) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* 1/12 N) 1/24) (pow N 3))","(/.f64 (fma.f64 #s(literal 1/12 binary64) N #s(literal -1/24 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/12 (* -1/2 N))) 1/24) (pow N 3))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/12 binary64)) N #s(literal -1/24 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/ (- (* N (+ 1/12 (* N (- (* -1 N) 1/2)))) 1/24) (pow N 3))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) N #s(literal -1/2 binary64)) N #s(literal 1/12 binary64)) N #s(literal -1/24 binary64)) (pow.f64 N #s(literal 3 binary64)))","(* -1 (log N))","(neg.f64 (log.f64 N))","(- N (log N))","(-.f64 N (log.f64 N))","(- (* N (+ 1 (* -1/2 N))) (log N))","(-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N) (log.f64 N))","(- (* N (+ 1 (* N (- (* 1/3 N) 1/2)))) (log N))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N) (log.f64 N))","(/ -1/4 (pow N 4))","(/.f64 #s(literal -1/4 binary64) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* 1/3 N) 1/4) (pow N 4))","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) (pow N 4))","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 4 binary64)))","1/2","#s(literal 1/2 binary64)","(+ 1/2 N)","(+.f64 #s(literal 1/2 binary64) N)","(* -4 (pow N 4))","(*.f64 #s(literal -4 binary64) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* -16/3 N) 4))","(*.f64 (fma.f64 #s(literal -16/3 binary64) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* 8/9 N) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 #s(literal 8/9 binary64) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (- (* N (- (* N (+ 8/9 (* -112/27 N))) 16/3)) 4))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -112/27 binary64) N #s(literal 8/9 binary64)) N #s(literal -16/3 binary64)) N #s(literal -4 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ -1/4 N)","(/.f64 #s(literal -1/4 binary64) N)","(/ (- (* 1/3 N) 1/4) N)","(/.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/4 binary64)) N)","(/ (- (* N (+ 1/3 (* -1/2 N))) 1/4) N)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)","(/ (- (* N (+ 1/3 (* N (- N 1/2)))) 1/4) N)","(/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)","N","(pow N 3)","(pow.f64 N #s(literal 3 binary64))","(/ (pow N 2) (log N))","(/.f64 (*.f64 N N) (log.f64 N))","(* (pow N 2) (+ (* -1 (* N (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (neg.f64 N) (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (* 11/12 (/ 1 (log N)))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (fma.f64 (+.f64 (+.f64 (/.f64 #s(literal 11/12 binary64) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N))) N (neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))))) N (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(* (pow N 2) (+ (* N (- (* N (- (+ (* 1/2 (/ 1 (pow (log N) 2))) (+ (* 11/12 (/ 1 (log N))) (* N (- (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (pow (log N) 2))) (+ (* 1/3 (/ 1 (pow (log N) 2))) (+ (* 1/2 (/ 1 (pow (log N) 3))) (+ (* 1/2 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))) (+ (* 5/6 (/ 1 (log N))) (* 11/12 (/ 1 (pow (log N) 2))))))))))) (* -1 (/ (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))) (log N))))) (+ (/ 1 (log N)) (/ 1 (pow (log N) 2))))) (/ 1 (log N))))","(*.f64 (fma.f64 (fma.f64 (+.f64 (fma.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (+.f64 (+.f64 (/.f64 #s(literal 11/12 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 5/6 binary64) (log.f64 N))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (log.f64 N))))) N (+.f64 (/.f64 #s(literal 11/12 binary64) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))) (log.f64 N))) N (neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (log.f64 N))))) N (/.f64 #s(literal 1 binary64) (log.f64 N))) (*.f64 N N))","(pow N 2)","(*.f64 N N)","(* (pow N 2) (+ 1 (* -1 N)))","(*.f64 (-.f64 #s(literal 1 binary64) N) (*.f64 N N))","(* (pow N 2) (+ 1 (* N (- (* 11/12 N) 1))))","(*.f64 (fma.f64 (fma.f64 #s(literal 11/12 binary64) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(* (pow N 2) (+ 1 (* N (- (* N (+ 11/12 (* -5/6 N))) 1))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/6 binary64) N #s(literal 11/12 binary64)) N #s(literal -1 binary64)) N #s(literal 1 binary64)) (*.f64 N N))","(* N (+ 1 (* -1/2 N)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* 1/3 N) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* N (+ 1 (* N (- (* N (+ 1/3 (* -1/4 N))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) N #s(literal 1/3 binary64)) N #s(literal -1/2 binary64)) N #s(literal 1 binary64)) N)","(* -1 (pow (log N) 3))","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))","(+ (* -1 (pow (log N) 3)) (* N (pow (log N) 2)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ (* -1 (pow (log N) 3)) (* N (- (* -1 (* N (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(fma.f64 (fma.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64) (log.f64 N)) (neg.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ (* -1 (pow (log N) 3)) (* N (- (* N (- (* -1 (* N (+ (* -1 (/ (+ (log N) (* 1/2 (pow (log N) 2))) (log N))) (+ (* -1/2 (log N)) (* -1/3 (pow (log N) 2)))))) (+ (log N) (* 1/2 (pow (log N) 2))))) (* -1 (pow (log N) 2)))))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (-.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/3 binary64) (*.f64 #s(literal -1/2 binary64) (log.f64 N))) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64) (log.f64 N)) (log.f64 N))) N (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64) (log.f64 N)))) N (pow.f64 (log.f64 N) #s(literal 2 binary64))) N (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))","(+ N (* -1 (log N)))","(-.f64 N (log.f64 N))","(+ (* -1 (log N)) (* N (+ 1 (* -1 (* N (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 N) #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(+ (* -1 (log N)) (* N (+ 1 (* N (- (* N (- (* 1/2 (/ 1 (log N))) (+ (* -1 (/ (+ 1 (+ (* -1 (log N)) (* 1/3 (pow (log N) 2)))) (pow (log N) 2))) (+ (* -1 (/ (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))) (log N))) (/ 1 (pow (log N) 2)))))) (+ (* -1 (/ (+ (log N) (* -1/2 (pow (log N) 2))) (pow (log N) 2))) (/ 1 (log N))))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (log.f64 N)) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (log.f64 N))) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (-.f64 #s(literal 1 binary64) (log.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64))))) N (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) (/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))) N #s(literal 1 binary64)) N (neg.f64 (log.f64 N)))","(* -1 (pow (log N) 4))","(neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(- (pow N 4) (pow (log N) 4))","(-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(- (* (pow N 4) (+ 1 (* -2 N))) (pow (log N) 4))","(-.f64 (*.f64 (fma.f64 #s(literal -2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(- (* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2)))) (pow (log N) 4))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 17/6 binary64) N #s(literal -2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow N 4)","(pow.f64 N #s(literal 4 binary64))","(* (pow N 4) (+ 1 (* -2 N)))","(*.f64 (fma.f64 #s(literal -2 binary64) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (+ 1 (* N (- (* 17/6 N) 2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 17/6 binary64) N #s(literal -2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))","(* (pow N 4) (+ 1 (* N (- (* N (+ 17/6 (* -7/2 N))) 2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -7/2 binary64) N #s(literal 17/6 binary64)) N #s(literal -2 binary64)) N #s(literal 1 binary64)) (pow.f64 N #s(literal 4 binary64)))","(/ 1/24 N)","(/.f64 #s(literal 1/24 binary64) N)","(/ -1/24 (pow N 2))","(/.f64 #s(literal -1/24 binary64) (*.f64 N N))","(/ (- (* 1/12 N) 1/24) (pow N 2))","(/.f64 (fma.f64 #s(literal 1/12 binary64) N #s(literal -1/24 binary64)) (*.f64 N N))","(/ 1/2 N)","(/.f64 #s(literal 1/2 binary64) N)","(/ 1/4 N)","(/.f64 #s(literal 1/4 binary64) N)","(/ (+ 1/4 (* -1/3 N)) N)","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) N)","(/ 1/4 (pow N 2))","(/.f64 #s(literal 1/4 binary64) (*.f64 N N))","(/ (+ 1/4 (* -1/3 N)) (pow N 2))","(/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N))","(pow (log N) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(log N)","(log.f64 N)","(+ (log N) (* -1 N))","(-.f64 (log.f64 N) N)","(+ (log N) (* N (- (* N (+ 1/2 (/ 1 (log N)))) 1)))","(fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 1/2 binary64)) N #s(literal -1 binary64)) N (log.f64 N))","(+ (log N) (* N (- (* N (+ 1/2 (+ (* -1 (* N (+ 1/3 (+ (/ 1 (log N)) (/ 1 (pow (log N) 2)))))) (/ 1 (log N))))) 1)))","(fma.f64 (fma.f64 (fma.f64 (+.f64 (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) (log.f64 N))) (/.f64 #s(literal 1 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 N) (+.f64 (/.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 1/2 binary64))) N #s(literal -1 binary64)) N (log.f64 N))","(pow (log N) 4)","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(* N (+ 1 (* 1/2 (/ 1 N))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","(* N (- (+ 1 (* 1/2 (/ 1 N))) (/ 1/12 (pow N 2))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N)","(* N (- (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))) (/ 1/12 (pow N 2))))","(*.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N)","-1","#s(literal -1 binary64)","(* -1 (+ 1 (* 1/2 (/ 1 N))))","(+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal -1 binary64))","(- (/ 1/12 (pow N 2)) (+ 1 (* 1/2 (/ 1 N))))","(-.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N))","(- (/ 1/12 (pow N 2)) (+ 1 (+ (* 1/2 (/ 1 N)) (* 1/24 (/ 1 (pow N 3))))))","(-.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) (*.f64 N N)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)))","(/ 1 N)","(/.f64 #s(literal 1 binary64) N)","(/ (- 1 (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))) N)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N)","(/ (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))) N)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64)))) N)","(* (pow N 2) (- 1 (* 1/2 (/ 1 N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) (*.f64 N N))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (* 1/2 (/ 1 N))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (*.f64 N N))","(* (pow N 2) (- (+ 1 (/ 1/3 (pow N 2))) (+ (* 1/2 (/ 1 N)) (* 1/4 (/ 1 (pow N 3))))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64)))) (*.f64 N N))","(/ (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))) N)","(/.f64 (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N)) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) #s(literal 1 binary64))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (/ 1/2 (* N (log (/ 1 N)))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (neg.f64 (log.f64 N))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (+.f64 (fma.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) #s(literal -1/2 binary64) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))) #s(literal 1 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N))) #s(literal 1/8 binary64))) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/4 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))) N)","(/ (- (+ 1 (+ (* -1/2 (/ (+ 11/12 (* 1/2 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* N (log (/ 1 N))))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* 1/16 (/ 1 (log (/ 1 N)))) (+ 1/12 (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/6 (* (pow N 3) (log (/ 1 N)))) (/ 1/2 (* N (log (/ 1 N)))))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (log (/ 1 N)))) (+ 1/12 (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (log (/ 1 N)))) (* 3/16 (/ 1 (log (/ 1 N))))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (* 1/4 (/ 1 (* (pow N 2) (log (/ 1 N))))))))) N)","(/.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (pow.f64 N #s(literal 3 binary64))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (neg.f64 (log.f64 N))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (/.f64 (-.f64 (/.f64 #s(literal 1/16 binary64) (neg.f64 (log.f64 N))) (fma.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (log.f64 N)) #s(literal 1/12 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (neg.f64 (log.f64 N))) (+.f64 (/.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 (/.f64 #s(literal 1/2 binary64) N) (neg.f64 (log.f64 N)))))))) #s(literal 1 binary64)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N))) #s(literal 1/8 binary64))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) (/.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (log.f64 N)) #s(literal -1/12 binary64)) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N))) #s(literal 1/8 binary64))) (log.f64 N)) (/.f64 #s(literal 3/16 binary64) (neg.f64 (log.f64 N))))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N))) #s(literal 1/8 binary64))) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/4 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))) N)","(* -1/2 (log (/ 1 N)))","(*.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64))","(+ (* -1/2 (log (/ 1 N))) (* 3/4 (/ 1 N)))","(fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal 3/4 binary64) N))","(+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (+.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 N N)) (/.f64 #s(literal 3/4 binary64) N)) (/.f64 #s(literal 3/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -2/3 (log (/ 1 N))) 1) (* (pow N 3) (log (/ 1 N))))) (+ (/ 1/8 (pow N 2)) (+ (* 3/4 (/ 1 N)) (* 3/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))))) (+ (* -1/2 (/ (+ 1/8 (+ (* -1/2 (/ (+ 1 (log (/ 1 N))) (log (/ 1 N)))) (* 3/8 (/ 1 (log (/ 1 N)))))) (* (pow N 3) (log (/ 1 N))))) (+ (/ 3/16 (* (pow N 3) (log (/ 1 N)))) (* 1/12 (/ 1 (pow N 3))))))","(-.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64))) (+.f64 (+.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 N N)) (/.f64 #s(literal 3/4 binary64) N)) (/.f64 #s(literal 3/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (log.f64 N)) (+.f64 (/.f64 #s(literal 3/8 binary64) (neg.f64 (log.f64 N))) #s(literal 1/8 binary64))) (neg.f64 (log.f64 N))) (+.f64 (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 3/16 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))))))","(pow (log (/ 1 N)) 2)","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(+ (* -2 (/ (log (/ 1 N)) N)) (pow (log (/ 1 N)) 2))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(+ (* -2 (/ (log (/ 1 N)) N)) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))","(fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (log.f64 N) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))","(- (+ (* -2 (/ (log (/ 1 N)) N)) (+ (* -2/3 (/ (log (/ 1 N)) (pow N 3))) (+ (/ 1 (pow N 2)) (+ (/ (log (/ 1 N)) (pow N 2)) (pow (log (/ 1 N)) 2))))) (/ 1 (pow N 3)))","(-.f64 (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -2/3 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) N) #s(literal -2 binary64) (+.f64 (fma.f64 (/.f64 #s(literal -1 binary64) N) (/.f64 (log.f64 N) N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 N N))))) (/.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64))))","(* -1 (log (/ 1 N)))","(log.f64 N)","(+ (* -1 (log (/ 1 N))) (/ 1 N))","(+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N))","(- (+ (* -1 (log (/ 1 N))) (/ 1 N)) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(- (+ (* -1 (log (/ 1 N))) (+ (/ 1 N) (* 1/3 (/ 1 (pow N 3))))) (/ 1/2 (pow N 2)))","(-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) N)) (log.f64 N)) (/.f64 #s(literal 1/2 binary64) (*.f64 N N)))","(* 2 (/ (pow (log (/ 1 N)) 2) N))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 2 binary64))","(/ (- (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))) (* -1 (/ (log (/ 1 N)) N))) N)","(/.f64 (-.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (neg.f64 (log.f64 N)) N)) #s(literal -1/2 binary64) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))) (/.f64 (log.f64 N) N)) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2)))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2)))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (*.f64 N N)) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (neg.f64 (log.f64 N)) N))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (*.f64 N N)) #s(literal 1/2 binary64) (/.f64 (log.f64 N) N)))) N)","(/ (- (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (log (/ 1 N))))) (* 2 (pow (log (/ 1 N)) 2))))) (+ (* -1 (/ (log (/ 1 N)) N)) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (log (/ 1 N)))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (log (/ 1 N)))) (* 1/2 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* -1/2 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 2) (log (/ 1 N))))) (+ (* -1/3 (/ (log (/ 1 N)) (pow N 3))) (+ (* 1/4 (/ (- (* -1/2 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (log (/ 1 N)))) (* -1 (log (/ 1 N)))) (* (pow N 3) (log (/ 1 N))))) (* 1/2 (/ (log (/ 1 N)) (pow N 2))))))))) N)","(/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 N N)) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (neg.f64 (log.f64 N))) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (neg.f64 (log.f64 N))) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64))) #s(literal 2 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (neg.f64 (log.f64 N)) N))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)))) (/.f64 (log.f64 N) N)) (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (neg.f64 (log.f64 N))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (neg.f64 (log.f64 N)))) (*.f64 (log.f64 N) #s(literal 1/2 binary64))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N)))) (fma.f64 (/.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) #s(literal -1/3 binary64) (fma.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (log.f64 N)) (neg.f64 (log.f64 N))) (*.f64 (neg.f64 (log.f64 N)) (pow.f64 N #s(literal 3 binary64)))) #s(literal 1/4 binary64) (*.f64 (/.f64 (neg.f64 (log.f64 N)) N) (/.f64 #s(literal 1/2 binary64) N)))))) N)","(/ (- (+ 1 (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))) N)","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N)) (/.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/4 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N)) (/.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (*.f64 N N)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (*.f64 N N)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 N N))) (/.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))))) N)","(/ (- (+ 1 (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N)))))) (pow (+ 1 (log (/ 1 N))) 2))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3))))))) (+ (* -1/4 (/ (* (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* -4 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* 2 (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)))) (pow (log (/ 1 N)) 3))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (pow (log (/ 1 N)) 3)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (* (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (- (* -1/4 (/ (+ (* 2 (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N))))) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (pow (log (/ 1 N)) 3))))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ 1 (+ (* -2 (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1))) (+ (* 2/3 (pow (log (/ 1 N)) 2)) (* 2 (log (/ 1 N)))))) (* (pow N 3) (pow (log (/ 1 N)) 3)))) (+ (* -1/4 (/ (+ (* -2 (log (/ 1 N))) (+ (* -2 (* (log (/ 1 N)) (+ 1 (log (/ 1 N))))) (* -1 (pow (log (/ 1 N)) 2)))) (* (pow N 2) (pow (log (/ 1 N)) 3)))) (* -1/4 (/ (+ (* 2 (pow (log (/ 1 N)) 2)) (* 4 (pow (log (/ 1 N)) 2))) (* N (pow (log (/ 1 N)) 3)))))))))) N)","(/.f64 (-.f64 (fma.f64 #s(literal -1/4 binary64) (+.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (neg.f64 (log.f64 N))) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64))) #s(literal 2 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 2 binary64)))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64)))) (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N))) (/.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (*.f64 N N)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (fma.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (pow.f64 N #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal -4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)))))) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (fma.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 N)) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 4 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))))) (*.f64 N N)) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 6 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 (fma.f64 (*.f64 (neg.f64 (log.f64 N)) #s(literal -2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (+.f64 (fma.f64 #s(literal 2/3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64))))) (*.f64 #s(literal -1/4 binary64) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (/.f64 #s(literal 6 binary64) N) (/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) (log.f64 N) (fma.f64 #s(literal -1 binary64) (log.f64 N) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 N N)))))))) N)","(* -4 (/ (pow (log (/ 1 N)) 3) N))","(*.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) #s(literal -4 binary64))","(/ (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (* 4 (/ (pow (log (/ 1 N)) 2) N)))) N)","(/.f64 (fma.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) #s(literal -4 binary64) (fma.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N)) #s(literal 2 binary64) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 4 binary64)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (* 4 (/ (pow (log (/ 1 N)) 2) N)))))) N)","(/.f64 (fma.f64 #s(literal -4 binary64) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (neg.f64 (log.f64 N)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) (*.f64 N N))) (*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 4 binary64)))) N)","(/ (+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* -4 (/ (* (log (/ 1 N)) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* -4 (pow (log (/ 1 N)) 3)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 11/12 (* 1/2 (log (/ 1 N))))) (pow N 3))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) N)) (/ (pow (+ 1 (log (/ 1 N))) 2) (pow N 3))))))))) N)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -4 binary64) (neg.f64 (log.f64 N))) N) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (fma.f64 #s(literal -4 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal 2 binary64) (fma.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) (*.f64 N N))) (fma.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) #s(literal 4 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64)))))))) N)","(pow (log (/ 1 N)) 4)","(pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (pow (log (/ 1 N)) 4))","(fma.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) #s(literal -4 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))","(+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))","(fma.f64 (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N) #s(literal -4 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) N) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N)) (fma.f64 (/.f64 #s(literal 4 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))","(+ (* -4 (/ (* (log (/ 1 N)) (+ 1 (log (/ 1 N)))) (pow N 3))) (+ (* -4 (/ (pow (log (/ 1 N)) 3) N)) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (+ 1 (log (/ 1 N)))) (pow N 2))) (+ (* 2 (/ (* (pow (log (/ 1 N)) 2) (- (* -2/3 (log (/ 1 N))) 1)) (pow N 3))) (+ (* 4 (/ (pow (log (/ 1 N)) 2) (pow N 2))) (pow (log (/ 1 N)) 4))))))","(fma.f64 #s(literal -4 binary64) (fma.f64 (neg.f64 (log.f64 N)) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) N)) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64))) (pow.f64 N #s(literal 3 binary64)))) (fma.f64 (/.f64 #s(literal 4 binary64) N) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) N) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64)))))","(/ 1/12 N)","(/.f64 #s(literal 1/12 binary64) N)","(/ (- 1/12 (* 1/24 (/ 1 N))) N)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","-1/3","#s(literal -1/3 binary64)","(- (* 1/4 (/ 1 N)) 1/3)","(-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64))","(/ -1/3 N)","(/.f64 #s(literal -1/3 binary64) N)","(/ (- (* 1/4 (/ 1 N)) 1/3) N)","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)","(- (* -1/2 (log (/ 1 N))) (* 1/4 (/ 1 N)))","(fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal -1/4 binary64) N))","(- (+ (* -1/2 (log (/ 1 N))) (/ 1/8 (pow N 2))) (+ (* 1/4 (/ 1 N)) (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N)))))))","(-.f64 (-.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/8 binary64) (*.f64 N N))) (/.f64 #s(literal 1/4 binary64) N)) (/.f64 #s(literal 1/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))","(- (+ (* -1/2 (log (/ 1 N))) (+ (/ 1/16 (* (pow N 3) (log (/ 1 N)))) (/ 1/8 (pow N 2)))) (+ (* -1/2 (/ (- 1/8 (* 1/8 (/ 1 (log (/ 1 N))))) (* (pow N 3) (log (/ 1 N))))) (+ (* 1/4 (/ 1 N)) (+ (* 1/8 (/ 1 (* (pow N 2) (log (/ 1 N))))) (* 1/12 (/ 1 (pow N 3)))))))","(-.f64 (fma.f64 (neg.f64 (log.f64 N)) #s(literal -1/2 binary64) (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 N #s(literal 3 binary64))) (neg.f64 (log.f64 N))) (/.f64 #s(literal 1/8 binary64) (*.f64 N N)))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (neg.f64 (log.f64 N))) (/.f64 (+.f64 #s(literal 1/8 binary64) (/.f64 #s(literal 1/8 binary64) (log.f64 N))) (pow.f64 N #s(literal 3 binary64))) (+.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) N) (/.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal 3 binary64)))) (/.f64 #s(literal 1/8 binary64) (*.f64 (neg.f64 (log.f64 N)) (*.f64 N N))))))","(* -1 (* N (- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(* -1 (* N (- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)))","(*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(- (* -1 (/ (- 1/2 (* 1/12 (/ 1 N))) N)) 1)","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(- (* -1 (/ (+ 1/2 (* -1 (/ (- 1/12 (* 1/24 (/ 1 N))) N))) N)) 1)","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))","(/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) N) #s(literal 1 binary64)) N)","(* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))","(/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) (neg.f64 N))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (* 1/4 (/ 1 N)) 1/3) N)) 1/2) N)) 1) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) N) #s(literal 1/3 binary64)) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64) #s(literal -1 binary64)) (neg.f64 N))","(* (pow N 2) (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 N))) N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/3 binary64) N)) N)) (*.f64 N N))","(* (pow N 2) (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))) N))))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) N)) N)) (*.f64 N N))","(* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 5))) (+ (* -2/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 1/2 (/ (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 11/12 (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4))) (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) N)) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (+.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (/.f64 (-.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))) #s(literal -2/3 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 11/12 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 5 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)))) (-.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/3 binary64))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/3 binary64))) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 N))) (neg.f64 N))","(/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))","(/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))","(+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))","(+ (* -1 (/ (- (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -2/3 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (/ 1 (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2/3 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/3 binary64))) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N)) (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))","(+ (* 2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) N) #s(literal 2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) N)) N))","(+ (* -1 (/ (+ (* -2 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (+ (* -1 (+ (log -1) (* -1 (log (/ -1 N))))) (* -1 (/ (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) N)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2 binary64) (/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) N)) (neg.f64 N))) N))","(+ (log -1) (* -1 (log (/ -1 N))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (/ 1 N)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) N) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* 1/2 (/ 1 N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))","(+ (log -1) (+ (* -1 (log (/ -1 N))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 N)) 1/2) N)) 1) N))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (/.f64 (-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal 1 binary64)) N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (* N (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))","(*.f64 (/.f64 #s(literal 4 binary64) N) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64) (/.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N) #s(literal -1 binary64) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* 2 (/ (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (/ (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* -4 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (+ (* -1/2 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) N)) (* 2 (/ (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (- (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (+ (* 2 (/ (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N))) N))","(/.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64) (fma.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64) (fma.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (-.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal 4/3 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (/.f64 (-.f64 (fma.f64 (*.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -4 binary64))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) (neg.f64 N)))) (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))))) N) #s(literal -1 binary64) (fma.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 2 binary64) (*.f64 #s(literal 4 binary64) (-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (neg.f64 (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -2 (/ (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -1 (/ (- (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (log -1) (+ (* -1 (log (/ -1 N))) (+ (* -1 (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N))))))) (+ (* -2/3 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (+ (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* 1/2 (/ (* (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))))) N)) (* 1/2 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (+ (* -1 (/ (+ (* -1 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)) (+ (* 2 (+ (log -1) (* -1 (log (/ -1 N))))) (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (* 1/2 (/ (* (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (- (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))))) N)) (* 1/2 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))))) (* -1 (/ (+ (* -2 (* (+ (log -1) (* -1 (log (/ -1 N)))) (+ (* -2 (log (/ -1 N))) (* 2 (log -1))))) (* -2 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* (+ (log -1) (* -1 (log (/ -1 N)))) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N))) N))","(/.f64 (fma.f64 (/.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) #s(literal -2 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (neg.f64 (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))))) (/.f64 (+.f64 (-.f64 (-.f64 (fma.f64 (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) #s(literal -2/3 binary64))) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (log.f64 (/.f64 #s(literal -1 binary64) N))) (log.f64 #s(literal -1 binary64))) (neg.f64 (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))))) (neg.f64 N))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))))) (*.f64 #s(literal -2 binary64) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (neg.f64 (/.f64 (-.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))))) N) #s(literal -1 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (+.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))))) (neg.f64 N))) (neg.f64 N))","(* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N))","(*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) N) #s(literal 4 binary64))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64))) N)) (neg.f64 N))) (neg.f64 N))","(* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (* 2 (* (+ 11/12 (* -1/2 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (pow (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) 2))) N)) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N))","(/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -1/2 binary64) #s(literal 11/12 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 2 binary64)))) N))) (neg.f64 N))) (neg.f64 N))) (neg.f64 N))","(pow (+ (log -1) (* -1 (log (/ -1 N)))) 4)","(pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64))","(+ (* 4 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) N) #s(literal 4 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (neg.f64 N))) N))","(+ (* -1 (/ (+ (* -4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 3)) (* -1 (/ (+ (* -1 (/ (+ (* -4 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (+ (log -1) (* -1 (log (/ -1 N)))))) (* 2 (* (+ 1 (* -2/3 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N)) (+ (* 2 (* (+ 1 (* -1 (+ (log -1) (* -1 (log (/ -1 N)))))) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2))) (* 4 (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2)))) N))) N)) (pow (+ (log -1) (* -1 (log (/ -1 N)))) 4))","(-.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 4 binary64)) (/.f64 (fma.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 3 binary64)) #s(literal -4 binary64) (/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 #s(literal 2 binary64) (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal 4 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal -2/3 binary64) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N)))) #s(literal -4 binary64))) N)) (neg.f64 N))) N))","(* -1 (/ (- (* 1/24 (/ 1 N)) 1/12) N))","(/.f64 (+.f64 (/.f64 #s(literal -1/24 binary64) N) #s(literal 1/12 binary64)) N)","(* -1 (/ (- 1/3 (* 1/4 (/ 1 N))) N))","(/.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N)) (neg.f64 N))","(+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)) N)))","(+ (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (+.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)) N))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3)))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 4)))) (* -1/3 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (* N (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))))) (+ (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 3))) (* -1/2 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2))))) N)) (* -1 (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (pow (+ (* -2 (log (/ -1 N))) (* 2 (log -1))) 2)))) N)) (/ (pow (+ (log -1) (* -1 (log (/ -1 N)))) 2) (+ (* -2 (log (/ -1 N))) (* 2 (log -1)))))","(-.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64)))) (/.f64 (fma.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) N) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 4 binary64)) N))) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64)) N))) (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 3 binary64))))) N) #s(literal -1 binary64) (/.f64 (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) N))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 (/.f64 #s(literal -1 binary64) N)) #s(literal -2 binary64) (*.f64 (log.f64 #s(literal -1 binary64)) #s(literal 2 binary64))) #s(literal 2 binary64)))) N))"]],"stop":[["iter limit",1],["node limit",1]],"time":348.244873046875,"type":"simplify"},{"count":[[30,695]],"egraph":[[0,8346,361,0.082611839],[2,4058,365,0.043160632],[1,493,377,0.016210333],[0,102,397,0.003225005],[0,63,455,0.000577223]],"inputs":[["(*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N))","(neg.f64 (neg.f64 N))","(*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(log1p.f64 N)","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1/24 binary64) N)","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(/.f64 #s(literal 1/2 binary64) N)","#s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)","(/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N))))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(pow.f64 (log.f64 N) #s(literal 4 binary64))"]],"memory":[[6946240,61501600]],"outputs":[["(*.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)) N)","(*.f64 (*.f64 (neg.f64 N) (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))) #s(literal -1 binary64))","(*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) N)","(*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (neg.f64 N))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))","(*.f64 (neg.f64 N) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(*.f64 N (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 N)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 N)) (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (neg.f64 N) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 N) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) #s(literal 2 binary64)) (*.f64 N N)) (-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) N))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) #s(literal 3 binary64)) (pow.f64 N #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) #s(literal 2 binary64)) (-.f64 (*.f64 N N) (*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) N))))","(neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))","(fma.f64 (pow.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 (*.f64 (neg.f64 N) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) #s(literal -1 binary64) N)","(fma.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 1 binary64)) N N)","(fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N) N)","(fma.f64 #s(literal 1 binary64) N (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) (neg.f64 N)) N)","(fma.f64 #s(literal -1 binary64) (*.f64 N (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) N)","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) #s(literal 1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 #s(literal -1 binary64) (neg.f64 N) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)","(fma.f64 (neg.f64 N) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N)","(fma.f64 (neg.f64 N) #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 N #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(fma.f64 N (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N)","(-.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N #s(literal 0 binary64)) (neg.f64 N))","(-.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) (neg.f64 N))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))","(+.f64 (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N) N)","(+.f64 N (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N))","(*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(pow.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) #s(literal -1 binary64)) (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) (/.f64 #s(literal -1 binary64) N) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal 2 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N)","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 N N)) (pow.f64 (-.f64 #s(literal 1/2 binary64) N) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64))) (pow.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 N (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) N) (-.f64 #s(literal 1/4 binary64) (*.f64 N N))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (+.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 N N))) (neg.f64 (-.f64 #s(literal 1/2 binary64) N)))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64)))) (neg.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 N N)) (-.f64 #s(literal 1/2 binary64) N))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N N (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) N))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64))) (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) N) (-.f64 #s(literal 1/4 binary64) (*.f64 N N))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 N (-.f64 N #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (+.f64 #s(literal 1/8 binary64) (pow.f64 N #s(literal 3 binary64)))))","(neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (neg.f64 N)))","(fma.f64 (pow.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal -1 binary64) #s(literal 1/2 binary64))","(fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)","(fma.f64 #s(literal 1 binary64) N #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 N) #s(literal 1/2 binary64))","(fma.f64 (neg.f64 N) #s(literal -1 binary64) #s(literal 1/2 binary64))","(fma.f64 N #s(literal 1 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) N)) (/.f64 (*.f64 N N) (-.f64 #s(literal 1/2 binary64) N)))","(-.f64 #s(literal 0 binary64) (-.f64 (neg.f64 N) #s(literal 1/2 binary64)))","(-.f64 #s(literal 1/2 binary64) (neg.f64 N))","(+.f64 #s(literal 1/2 binary64) N)","(+.f64 N #s(literal 1/2 binary64))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))))","(/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))) #s(literal -1 binary64)))","(*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal 1 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))","(/.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))) #s(literal -1 binary64))","(/.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N)) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 #s(literal 1/2 binary64) N))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(*.f64 N (+.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N))))","(pow.f64 (/.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))) (-.f64 (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) (neg.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","(/.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))","(/.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64))) (+.f64 (pow.f64 N #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))) (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64)))))","(fma.f64 (exp.f64 (log.f64 N)) (exp.f64 (log.f64 N)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(fma.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) #s(literal -1 binary64)) (neg.f64 N) (*.f64 N N))","(fma.f64 (neg.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N))) (neg.f64 N) (*.f64 N N))","(fma.f64 (*.f64 N N) #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N (*.f64 N N))","(fma.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(fma.f64 #s(literal 1 binary64) (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(fma.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 N)) (*.f64 N N))","(fma.f64 (neg.f64 N) (neg.f64 N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(fma.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (*.f64 N N))","(fma.f64 N N (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(-.f64 (/.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) (/.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","(-.f64 (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 N)))","(+.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) (*.f64 N N))","(+.f64 (*.f64 N N) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))","(*.f64 (pow.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) N)","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 N) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 N))","(*.f64 (neg.f64 N) #s(literal -1 binary64))","(*.f64 N #s(literal 1 binary64))","(pow.f64 N #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 N N)) (neg.f64 N))","(/.f64 (pow.f64 N #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 N N (*.f64 #s(literal 0 binary64) (neg.f64 N)))))","(neg.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)))","(neg.f64 (neg.f64 N))","(-.f64 #s(literal 0 binary64) (neg.f64 N))","(exp.f64 (*.f64 (log.f64 N) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) N)","N","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 3/2 binary64)) (pow.f64 (*.f64 (neg.f64 N) N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (neg.f64 N) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 N) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 3/2 binary64)) (pow.f64 N #s(literal 3 binary64)))","(*.f64 (*.f64 (*.f64 N N) #s(literal -1 binary64)) (neg.f64 N))","(*.f64 (pow.f64 N #s(literal 3/2 binary64)) (pow.f64 N #s(literal 3/2 binary64)))","(*.f64 (neg.f64 (*.f64 N N)) (neg.f64 N))","(*.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 (*.f64 N N) N)","(*.f64 #s(literal 1 binary64) (pow.f64 N #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 N) #s(literal 1 binary64)) #s(literal 3 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(*.f64 N (*.f64 N N))","(pow.f64 (exp.f64 (log.f64 N)) #s(literal 3 binary64))","(pow.f64 (pow.f64 N #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 N N) #s(literal 3/2 binary64))","(pow.f64 N #s(literal 3 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (*.f64 N N)) #s(literal 3 binary64)) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (pow.f64 N #s(literal 9 binary64)) (pow.f64 (+.f64 #s(literal 0 binary64) (fma.f64 N N (*.f64 #s(literal 0 binary64) (neg.f64 N)))) #s(literal 3 binary64)))","(neg.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 N) #s(literal 3 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N))) (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (-.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))) (neg.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))) (log.f64 (neg.f64 N)))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) N))) (log.f64 (neg.f64 N)))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))))","(*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(neg.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(exp.f64 (fma.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(*.f64 (log1p.f64 N) (log1p.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log1p.f64 N) #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)))","(pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (log1p.f64 N) #s(literal 1 binary64))","(log1p.f64 N)","(neg.f64 (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (fma.f64 N N #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 N #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 N N)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (-.f64 N #s(literal 1 binary64))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log1p.f64 (neg.f64 N)))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log1p.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 N #s(literal 1 binary64)) (fma.f64 N N #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) N) (-.f64 #s(literal 1 binary64) (*.f64 N N)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 N #s(literal 3 binary64)) #s(literal 1 binary64)))))","(exp.f64 (log.f64 (log1p.f64 N)))","(+.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 N #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N N (-.f64 #s(literal 1 binary64) N)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) N))","(*.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (-.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (-.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N))) (pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (pow.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (pow.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (-.f64 (log1p.f64 N) (log.f64 N)))","(pow.f64 (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64))) (-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64))) (-.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))","(/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (-.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 N) (log1p.f64 N) (-.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)) (*.f64 (log1p.f64 N) (neg.f64 (log.f64 N))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))) (neg.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 1 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N))) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64))) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log1p.f64 N) (log.f64 N)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))) (-.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (-.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(neg.f64 (-.f64 (log.f64 N) (log1p.f64 N)))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 1 binary64)) (neg.f64 (log.f64 N)))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (sqrt.f64 (log1p.f64 N)) (sqrt.f64 (log1p.f64 N)) (neg.f64 (log.f64 N)))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (neg.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (log1p.f64 N) (*.f64 (log1p.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 #s(literal -1 binary64) (log.f64 N) (log1p.f64 N))","(-.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) #s(literal -1 binary64))) (log.f64 (neg.f64 N)))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal 1 binary64) N))) (log.f64 (neg.f64 N)))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -2 binary64)) (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))) (/.f64 (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -3 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (fma.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -2 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (/.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))) (/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(-.f64 (log.f64 (fma.f64 N N #s(literal -1 binary64))) (log.f64 (fma.f64 N N (neg.f64 N))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 N) N)) (log.f64 (*.f64 N (-.f64 #s(literal 1 binary64) N))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N N (-.f64 #s(literal 1 binary64) N)))))","(-.f64 (log1p.f64 (pow.f64 N #s(literal 3 binary64))) (log.f64 (*.f64 N (fma.f64 N (-.f64 N #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (log1p.f64 N) (log.f64 N))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (log1p.f64 N) (log.f64 N)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (neg.f64 (log.f64 N)) (log1p.f64 N))","(+.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(+.f64 (log1p.f64 N) (neg.f64 (log.f64 N)))","(log.f64 (*.f64 (pow.f64 N #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(pow.f64 (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (-.f64 (pow.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (pow.f64 (log.f64 N) #s(literal 12 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 8 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 12 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))) (/.f64 (pow.f64 (log.f64 N) #s(literal 12 binary64)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 8 binary64)) (pow.f64 (log.f64 N) #s(literal 8 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 4 binary64)))))","(-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64)))","(+.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))","(+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))","(*.f64 (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log1p.f64 N)) #s(literal 4 binary64)))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N))","(*.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))","(*.f64 (log1p.f64 N) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (log1p.f64 N)))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (log1p.f64 N) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64) (log.f64 (log1p.f64 N))))","(exp.f64 (+.f64 (log.f64 (log1p.f64 N)) (*.f64 (log.f64 (log1p.f64 N)) #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64))))","(*.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal 1 binary64))","#s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))","(/.f64 (neg.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))) #s(literal -1 binary64))","(/.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))) #s(literal -1 binary64))))","(*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/24 binary64))","(*.f64 #s(literal -1/24 binary64) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/24 binary64) N))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) #s(literal 1/24 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 N #s(literal 24 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 N #s(literal 24 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/24 binary64) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 N #s(literal 24 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 N #s(literal 24 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 N #s(literal 24 binary64))))","(/.f64 #s(literal 1/24 binary64) N)","(neg.f64 (/.f64 #s(literal -1/24 binary64) N))","(exp.f64 (*.f64 (log.f64 (*.f64 N #s(literal 24 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 N (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)))","(*.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal -1 binary64))","(/.f64 (/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal -1 binary64)) N)","(/.f64 (*.f64 (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64))) (pow.f64 N #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64))) (pow.f64 N #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(/.f64 (-.f64 (*.f64 #s(literal 1/1728 binary64) (pow.f64 N #s(literal -3 binary64))) (/.f64 #s(literal 1/13824 binary64) (pow.f64 N #s(literal 6 binary64)))) (+.f64 (pow.f64 (/.f64 #s(literal 1/12 binary64) N) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))))","(/.f64 (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (neg.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) N)","(/.f64 (*.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) #s(literal 1 binary64)) N)","(/.f64 (*.f64 (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) N))","(/.f64 (*.f64 (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64)) N))","(/.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) N) (*.f64 N (/.f64 #s(literal 1/24 binary64) N))) (*.f64 N N))","(/.f64 (-.f64 #s(literal 1/144 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 2 binary64))) (*.f64 N (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/1728 binary64) (pow.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 3 binary64))) (*.f64 N (fma.f64 (/.f64 #s(literal 1/24 binary64) N) (+.f64 (/.f64 #s(literal 1/24 binary64) N) #s(literal 1/12 binary64)) #s(literal 1/144 binary64))))","(/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)))))","(/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)","(neg.f64 (/.f64 (+.f64 #s(literal -1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N))","(fma.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/4 binary64) N) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(fma.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/3 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(fma.f64 #s(literal 1/12 binary64) (pow.f64 N #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(-.f64 (/.f64 #s(literal 1/12 binary64) N) (/.f64 (/.f64 #s(literal 1/24 binary64) N) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 1/12 binary64) N) (neg.f64 (/.f64 (/.f64 #s(literal 1/24 binary64) N) N)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 N #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 N #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 N #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 N))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 N #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 N #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 N #s(literal 2 binary64))))","(/.f64 #s(literal 1/2 binary64) N)","(neg.f64 (/.f64 #s(literal -1/2 binary64) N))","(exp.f64 (*.f64 (log.f64 (*.f64 N #s(literal 2 binary64))) #s(literal -1 binary64)))","#s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)))","(*.f64 (neg.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) (pow.f64 (neg.f64 N) #s(literal -1 binary64)))","(*.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) (pow.f64 N #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 N) #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 N #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 N #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (neg.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) #s(literal -1 binary64)) N)","(/.f64 (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (neg.f64 (neg.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)))) N)","(/.f64 (*.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) #s(literal 1 binary64)) N)","(/.f64 (neg.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) (neg.f64 N))","(/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 N #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 N #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64))) N))","(exp.f64 (*.f64 (log.f64 (/.f64 N #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -2 binary64)) (pow.f64 (/.f64 N (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) (pow.f64 N #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -3 binary64)) (pow.f64 (pow.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))","(*.f64 (pow.f64 N #s(literal -1 binary64)) (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))))","(*.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) (pow.f64 (pow.f64 (neg.f64 N) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","(pow.f64 (/.f64 N (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) #s(literal -1 binary64)) (neg.f64 N))","(/.f64 (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) N) (*.f64 N N))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (pow.f64 N #s(literal -3 binary64))) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64))) (pow.f64 N #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) #s(literal 1 binary64)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (neg.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64)))) (neg.f64 N))","(/.f64 (neg.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))) (pow.f64 N #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64))))","(/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) N)","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)) (pow.f64 N #s(literal 4 binary64))) (*.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (-.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","(/.f64 (+.f64 (pow.f64 N #s(literal 6 binary64)) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 3 binary64))) (*.f64 (pow.f64 N #s(literal 3 binary64)) (+.f64 (-.f64 (pow.f64 N #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (pow.f64 N #s(literal 3 binary64)))) (pow.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) (pow.f64 (neg.f64 N) #s(literal 3 binary64)))","(/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 N (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))))","(neg.f64 (/.f64 (*.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 N #s(literal -2 binary64))) (neg.f64 N)))","(neg.f64 (/.f64 (neg.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))) (pow.f64 N #s(literal 3 binary64))))","(neg.f64 (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)) (pow.f64 (neg.f64 N) #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 N #s(literal 3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N)))) #s(literal -1 binary64)))","(*.f64 (log.f64 N) (log.f64 N))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (log.f64 N) #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (-.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (-.f64 (log.f64 N) (log1p.f64 N)))","(*.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 N) (-.f64 (log1p.f64 N) (log.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64))))","(*.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))))","(*.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)))","(*.f64 (log.f64 N) (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))))","(*.f64 (log.f64 N) (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64)) (log.f64 N)) #s(literal 2 binary64))","(pow.f64 (*.f64 (log.f64 N) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(exp.f64 (fma.f64 (log.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64) (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(exp.f64 (log.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(*.f64 (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 4 binary64)) (pow.f64 (sqrt.f64 (log.f64 N)) #s(literal 4 binary64)))","(*.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (log.f64 N))","(*.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))","(*.f64 (log.f64 N) (pow.f64 (log.f64 N) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (log.f64 N)))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (log.f64 N) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64) (log.f64 (log.f64 N))))","(exp.f64 (+.f64 (log.f64 (log.f64 N)) (*.f64 (log.f64 (log.f64 N)) #s(literal 3 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":294.636962890625,"type":"rewrite"},{"compiler":[[43271,4428]],"memory":[[778016,105186144]],"time":156.06005859375,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",48.56765007832825,"binary64"],["(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",48.9076376124796,"binary64"],["(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",49.13614639841321,"binary64"],["(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.17529080984707,"binary64"],["(fma.f64 (exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",49.33465904595532,"binary64"],["(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",48.81573806680513,"binary64"],["(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",49.94620259467407,"binary64"],["(/.f64 (/.f64 (fma.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","fresh",49.05147217137583,"binary64"],["(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","done",50.291931460711446,"binary64"],["(/.f64 (/.f64 #s(approx (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","fresh",2.186742476940144,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","fresh",50.203500892998726,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","fresh",50.30461586502218,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","done",50.29848704643233,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","fresh",50.30073264669656,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",49.71958189686192,"binary64"],["(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","fresh",50.399055365182356,"binary64"],["(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","fresh",50.08643336701424,"binary64"],["(/.f64 (*.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","fresh",49.02270144582974,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","fresh",50.20184652927573,"binary64"],["(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","done",50.303746381458225,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","done",50.302678117871025,"binary64"],["(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (log.f64 N) (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)))))","fresh",50.29154481139265,"binary64"],["(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","fresh",48.35938651659255,"binary64"],["(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","fresh",48.67407714276263,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","fresh",1.9987178007755921,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","fresh",2.455869653783334,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","fresh",1.764415990429462,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","fresh",2.470892433552361,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","done",3.8923262234949845,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","fresh",1.5464162756704867,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","done",3.5431863642128194,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","fresh",3.62560212189069,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","fresh",3.550998864212824,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","fresh",3.5880782559946796,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) N))))","fresh",1.6174456764336078,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","fresh",1.6703333016798845,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","done",8.72236888430596,"binary64"],["#s(approx (- (log (+ N 1)) (log N)) (*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","fresh",2.709611498641421,"binary64"]],"compiler":[[2625,448],[25,14],[23,12],[23,12],[22,10],[25,14],[25,13],[39,14],[40,23],[33,18],[254,81],[40,21],[32,17],[33,18],[25,13],[24,14],[15,9],[40,14],[30,17],[42,23],[27,15],[21,10],[22,10],[7,6],[6,5],[42,32],[19,15],[32,24],[21,16],[27,21],[40,30],[32,24],[35,27],[29,23],[33,25],[41,31],[58,42],[11,9],[27,21]],"count":[[1026,38]],"kept":[{"done":[4,4],"fresh":[33,20],"new":[984,11],"picked":[5,3]}],"memory":[[5828592,63895888]],"min-error":[[0.08761129310676659,"binary64"]],"time":55.0791015625,"type":"prune"},{"accuracy":[0.2653042590895186],"baseline":[1.5464162756704867],"branch":[["N",0.2653042590895186,2,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",0.2653042590895186,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[73,2]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) N))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N N) (*.f64 N N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))","(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))","(neg.f64 (log.f64 (/.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)) #s(literal 1 binary64))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (pow.f64 N #s(literal -3 binary64)) (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) (pow.f64 N #s(literal 3 binary64)))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (+.f64 (/.f64 #s(literal 1/24 binary64) (pow.f64 N #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N)))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(-.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (log.f64 N) (/.f64 (log.f64 N) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (log1p.f64 N) (/.f64 (log1p.f64 N) (+.f64 (log.f64 N) (log1p.f64 N))) (/.f64 (neg.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (pow.f64 (neg.f64 (+.f64 (log.f64 N) (log1p.f64 N))) #s(literal -1 binary64)) (/.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (pow.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 3/2 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (neg.f64 (log.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(fma.f64 (exp.f64 (*.f64 (log.f64 (log1p.f64 N)) #s(literal 2 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (+.f64 (log.f64 N) (log1p.f64 N)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) (+.f64 (log.f64 N) (log1p.f64 N)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (fma.f64 (log.f64 N) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 6 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (pow.f64 (+.f64 (log.f64 N) (log1p.f64 N)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 N) #s(literal 6 binary64))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (log1p.f64 N) #s(literal 5 binary64)) (log1p.f64 N) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (log.f64 N) (log1p.f64 N)) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (*.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal -2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (log.f64 N) (log1p.f64 N))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (log.f64 N) (log1p.f64 N))))","(fma.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (/.f64 (log1p.f64 N) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64)))))","(/.f64 (/.f64 (fma.f64 (pow.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) #s(literal 3/2 binary64)) (pow.f64 (log1p.f64 N) #s(literal 3/2 binary64)) (neg.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)))) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (pow.f64 (log.f64 N) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 N) #s(literal 9 binary64)) (pow.f64 (log.f64 N) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (log.f64 N) #s(literal 6 binary64)) (pow.f64 (log1p.f64 N) #s(literal 6 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 3 binary64))))","(fma.f64 (/.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (log1p.f64 N) #s(literal 2 binary64)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N))) (neg.f64 (/.f64 (pow.f64 (log.f64 N) #s(literal 3 binary64)) (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 N) #s(literal 3 binary64)) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (/.f64 (fma.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (log.f64 N) (pow.f64 (log1p.f64 N) #s(literal 2 binary64))) (pow.f64 (log.f64 N) #s(literal 3 binary64)))))","(/.f64 #s(approx (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (/.f64 (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64)))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) (/.f64 #s(literal -2 binary64) N) (fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) N) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)) (*.f64 (+.f64 (log.f64 N) (log1p.f64 N)) (+.f64 (+.f64 (pow.f64 (log1p.f64 N) #s(literal 4 binary64)) (pow.f64 (log.f64 N) #s(literal 4 binary64))) (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)))))","(/.f64 (/.f64 #s(approx (- (pow (log (+ 1 N)) 6) (pow (log N) 6)) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (*.f64 N N)) #s(literal -2 binary64) (fma.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64)) (/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) N)) #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 (-.f64 (fma.f64 #s(literal -4/3 binary64) (neg.f64 (log.f64 N)) (fma.f64 (log.f64 N) (fma.f64 (neg.f64 (log.f64 N)) #s(literal 1/2 binary64) #s(literal 11/12 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/4 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (log.f64 N)) #s(literal -1/2 binary64))))) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 3 binary64))) (pow.f64 N #s(literal 3 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (+.f64 (fma.f64 (log.f64 N) (fma.f64 #s(literal -2/3 binary64) (neg.f64 (log.f64 N)) #s(literal -1 binary64)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal 1/3 binary64) (*.f64 (neg.f64 (log.f64 N)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) (pow.f64 N #s(literal 3 binary64)))) #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N)))))) N) (/.f64 (*.f64 #s(literal 3 binary64) (pow.f64 (log.f64 N) #s(literal 2 binary64))) N) (+.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (log.f64 N)) (fma.f64 (pow.f64 (log.f64 N) #s(literal 2 binary64)) #s(literal -1/2 binary64) (*.f64 (log.f64 N) (-.f64 #s(literal 1 binary64) (log.f64 N))))) #s(literal 2 binary64)) (pow.f64 N #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 9 binary64) (pow.f64 (neg.f64 (log.f64 N)) #s(literal 4 binary64))) N)))))))) N)) (+.f64 (log.f64 N) (log1p.f64 N))) (+.f64 (pow.f64 (*.f64 (log.f64 N) (log1p.f64 N)) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 N) #s(literal 4 binary64)) (pow.f64 (log1p.f64 N) #s(literal 4 binary64)))))"]],"memory":[[4676016,19748704]],"oracle":[55.182320192873625],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","(neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N))))"]],"repr":["binary64"],"time":37.889892578125,"times":[[17.010986328125,"N"],[16.408935546875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[0.3173974856758365],"baseline":[1.5464162756704867],"branch":[["N",0.3173974856758365,2,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",0.3173974856758365,2,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[31,2]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) N))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N N) (*.f64 N N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))","(log.f64 (/.f64 (+.f64 N #s(literal 1 binary64)) N))"]],"memory":[[-7425648,9118496]],"oracle":[52.89658363299897],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","(log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N))"]],"repr":["binary64"],"time":14.77294921875,"times":[[6.952880859375,"N"],[5.758056640625,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[1.5464162756704867],"baseline":[1.5464162756704867],"branch":[["N",1.5464162756704867,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",1.5464162756704867,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[29,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N)) N))))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) N)))","#s(approx (- (log (+ N 1)) (log N)) (*.f64 (/.f64 #s(literal -1 binary64) N) (neg.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (*.f64 N (+.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) N N) (*.f64 N N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) N) (-.f64 (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N) N) #s(literal 1 binary64))) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (+.f64 N (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) #s(literal 1 binary64))) (*.f64 (*.f64 N (/.f64 N (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)))) N)))"]],"memory":[[-8697344,8626128]],"oracle":[9.0254351440744],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))"]],"repr":["binary64"],"time":14.897216796875,"times":[[6.31591796875,"N"],[6.076904296875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[1.6703333016798843],"baseline":[1.6703333016798845],"branch":[["N",1.6703333016798843,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",1.6703333016798845,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[18,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) (*.f64 N N)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) N)) N))","(neg.f64 #s(approx (log (/ (/ N (+ 1 N)) 1)) (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/3 binary64) (*.f64 N N))) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (neg.f64 N) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/12 binary64) N)) N) #s(literal -1 binary64) #s(literal -1 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) (/.f64 #s(literal 1/12 binary64) (*.f64 N N))) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) (/.f64 N (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) N) #s(literal -1 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) #s(approx (/ (- (/ 1/4 N) 1/3) N) (/.f64 (fma.f64 #s(literal -1/3 binary64) N #s(literal 1/4 binary64)) (*.f64 N N)))) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(approx (+ (* (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) (neg (neg N))) (* N N)) (/.f64 (fma.f64 (fma.f64 (-.f64 N #s(literal 1/2 binary64)) N #s(literal 1/3 binary64)) N #s(literal -1/4 binary64)) N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) N) #s(literal 1/3 binary64)) N)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (fma.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (/ 1/4 N) 1/3) #s(literal -1/3 binary64)) N)) (neg.f64 (neg.f64 N)) (*.f64 N N)) (*.f64 (*.f64 N N) (neg.f64 (neg.f64 N)))))"]],"memory":[[6275136,6275136]],"oracle":[8.9394976440744],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))"]],"repr":["binary64"],"time":10.64697265625,"times":[[4.85107421875,"N"],[4.643798828125,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[2.4558696537833336],"baseline":[2.455869653783334],"branch":[["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",2.4558696537833336,1,"binary64"],["N",2.4558696537833336,1,"binary64"]],"compiler":[[7,6],[1,1]],"count":[[8,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))"]],"memory":[[-4085280,4187280]],"oracle":[8.78486888430596],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))"]],"repr":["binary64"],"time":4.950927734375,"times":[[1.944091796875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"],[2.4658203125,"N"]],"type":"regimes"},{"accuracy":[3.5431863642128194],"baseline":[3.5431863642128194],"branch":[["N",3.54318636421282,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",3.5431863642128194,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[7,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (*.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) N) #s(literal 1 binary64)) N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (/.f64 (-.f64 (*.f64 N N) #s(literal 1/4 binary64)) (-.f64 N #s(literal 1/2 binary64))))))"]],"memory":[[4002096,4002096]],"oracle":[8.78486888430596],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))"]],"repr":["binary64"],"time":5.22705078125,"times":[[2.65283203125,"N"],[1.846923828125,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[3.5509988642128234],"baseline":[3.550998864212824],"branch":[["N",3.550998864212824,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",3.5509988642128234,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[4,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) N)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 #s(approx (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) (/.f64 #s(literal -1/2 binary64) N)) #s(literal -1 binary64)) N))"]],"memory":[[-4951184,3368656]],"oracle":[8.73018138430596],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))"]],"repr":["binary64"],"time":4.427978515625,"times":[[1.8740234375,"N"],[1.789794921875,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"accuracy":[8.722368884305958],"baseline":[8.72236888430596],"branch":[["N",8.722368884305961,1,"binary64"],["(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))",8.722368884305958,1,"binary64"]],"compiler":[[1,1],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"link":["."],"memory":[[2808848,2808848]],"name":["2log (problem 3.3.6)"],"oracle":[8.72236888430596],"outputs":[["#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"repr":["binary64"],"time":2.7099609375,"times":[[1.10107421875,"N"],[1.02197265625,"(-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N))"]],"type":"regimes"},{"bstep":[[0.14697265625,0.0010304442399862168,0.0031758562123389567]],"compiler":[[3,4],[7,6]],"memory":[[344832,344832]],"method":["left-value"],"time":0.87109375,"type":"bsearch"},{"bstep":[[0.31005859375,0.0010304442399862168,0.0031758562123389567]],"compiler":[[3,4],[7,6]],"memory":[[212480,212480]],"method":["left-value"],"time":0.81689453125,"type":"bsearch"},{"egraph":[[6,7923,295,0.019778381],[5,6437,295,0.038870882],[4,2486,295,0.031422532],[3,662,299,0.011065062],[2,266,299,0.003279617],[1,140,301,0.001803186],[0,79,302,0.001212463]],"inputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))))","(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))) (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))"]],"memory":[[1727072,10043952]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))))","(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64))) (neg.f64 (log.f64 (/.f64 N (+.f64 #s(literal 1 binary64) N)))))","(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)))) (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","(if (<=.f64 (-.f64 (log.f64 (+.f64 N #s(literal 1 binary64))) (log.f64 N)) #s(literal 1152921504606847/576460752303423488 binary64)) #s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64))) (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) N) N)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (/.f64 #s(literal 1/24 binary64) N)) N)) N) N N)) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N))))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) #s(approx (* (neg N) (+ (* (/ (- 1/2 (/ (- 1/12 (/ 1/24 N)) N)) N) -1) -1)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) N) N #s(literal -1/12 binary64)) N #s(literal 1/24 binary64)) (*.f64 N N)))) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) N) #s(literal 1/2 binary64)) N) #s(literal -1 binary64)) N))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (fma.f64 (/.f64 #s(literal 1/2 binary64) N) N N)) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64)))))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 #s(approx (/ N (- (/ (- -1/2 (/ (- (/ 1/4 N) 1/3) N)) N) -1)) (+.f64 N #s(literal 1/2 binary64))) #s(literal -1 binary64)))","#s(approx (- (log (+ N 1)) (log N)) (/.f64 #s(literal 1 binary64) N))","#s(approx (- (log (+ N 1)) (log N)) (pow.f64 N #s(literal -1 binary64)))"]],"stop":[["node limit",1]],"time":130.208984375,"type":"simplify"},{"compiler":[[302,85],[3,3],[32,24],[0,1],[23,18],[0,1],[23,18],[0,1],[0,1],[0,1],[23,18],[43,33],[0,1],[23,18],[19,11],[43,33],[0,1],[23,18],[16,9],[25,15],[43,33],[0,1],[23,18]],"egraph":[[0,8874,12,0.070418144],[3,2628,15,0.03548029],[2,269,15,0.006886912],[1,42,15,0.000969093],[0,10,15,0.000620899],[0,6,16,8.9566e-5],[0,8152,214,0.072853491],[6,7369,223,0.020266906],[5,6313,223,0.026330393],[4,4231,223,0.025768437],[3,1601,227,0.019183296],[2,588,233,0.005275973],[1,250,234,0.002041115],[0,88,258,0.000878749],[0,8462,161,0.075853454],[2,3030,161,0.043271035],[1,396,161,0.010878958],[0,83,168,0.00323387],[0,49,219,0.000696774],[0,8346,361,0.080835143],[2,4058,365,0.051336281],[1,493,377,0.016010527],[0,102,397,0.003273769],[0,63,455,0.000728345],[0,8950,12849,0.18631912],[1,3839,13529,0.059436763],[0,1125,14583,0.024532783],[0,8772,9022,0.127542686],[1,3305,9523,0.033019999],[0,1032,10394,0.010001122]],"memory":[[-5867296,11024736]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1]],"time":2540.470947265625,"type":"soundness"},{"compiler":[[302,85],[302,85],[27,19],[27,19],[7,6],[7,6]],"memory":[[4812112,36832784]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":129.5380859375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.009033203125,"type":"end"}]