[{"memory":[[12464,12464]],"time":0.02880859375,"type":"start"},{"compiler":[[12,7]],"memory":[[-2564656,6269552]],"method":["search"],"sampling":[[12,{"invalid":0.21951203816570342,"precondition":0.0009763240814208984,"unknown":0.04585362575016916,"valid":0.7336580120027065}],[11,{"invalid":0.20487790228798985,"precondition":0.0009763240814208984,"unknown":0.06048776162788272,"valid":0.7336580120027065}],[10,{"invalid":0.19121937546879053,"precondition":0.0009763240814208984,"unknown":0.08975603338330984,"valid":0.7180482670664787}],[9,{"invalid":0.16390232183039188,"precondition":0.0009763240814208984,"unknown":0.11707308702170849,"valid":0.7180482670664787}],[8,{"invalid":0.1404877044260502,"precondition":0.0009763240814208984,"unknown":0.17170719429850578,"valid":0.6868287771940231}],[7,{"invalid":0.09365846961736679,"precondition":0.0009763240814208984,"unknown":0.21853642910718918,"valid":0.6868287771940231}],[6,{"invalid":0.062438979744911194,"precondition":0.0009763240814208984,"unknown":0.31219489872455597,"valid":0.6243897974491119}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.37463387846946716,"valid":0.6243897974491119}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":52.010986328125,"type":"analyze"},{"bogosity":[{"invalid":0.2481605232773772,"precondition":0.0009763240814208984,"valid":0.750863152641202}],"memory":[[11593392,179969824]],"mixsample":[[102.112060546875,"ival-mult",0],[32.354736328125,"ival->",0],[10.75,"exact",0],[85.8662109375,"ival-expm1",0],[4.91845703125,"ival-assert",0]],"outcomes":[[27.39111328125,0,"invalid",315],[438.443115234375,0,"valid",8256]],"time":751.10009765625,"type":"sample"},{"compiler":[[6,6],[18,8],[18,8]],"confusion":[[133,0,1,122]],"explanations":[["-.f64","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cancellation",134,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",133,1,[-1.8581494670619155e-42,-3.757434041976046e-282],0,false],["a",0,0,false,0,false],["(exp.f64 (*.f64 a x))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,134],[0,122]],"maybe-confusion":[[133,0,0,1,0,122]],"memory":[[-9796960,31281792]],"mixsample":[[0.585693359375,"ival-true",0],[6.566650390625,"ival-exp",0],[5.462646484375,"ival-mult",0],[4.186767578125,"ival-expm1",0],[0.4140625,"exact",0],[0.246337890625,"ival-assert",0]],"outcomes":[[33.944091796875,0,"valid",512]],"time":93.748046875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[6,6]],"egraph":[[0,20,4,0.000147738],[2,20,6,0.000115165],[1,17,6,0.00018037],[0,9,6,0.000261488],[0,6,6,0.000104564],[10,253,34,0.001871957],[9,252,34,0.001970965],[8,241,34,0.001841473],[7,227,34,0.001560542],[6,205,34,0.00175925],[5,165,34,0.001112944],[4,141,34,0.000998382],[3,108,34,0.001083213],[2,73,34,0.000514442],[1,42,36,0.000362342],[0,16,36,0.000406143]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[-1959840,6014192]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[["(sort a x)"]],"time":37.70703125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.06787109375,"type":"eval"},{"alts":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","next",30.278599605528413,"binary64"]],"compiler":[[6,6]],"memory":[[310992,310992]],"time":0.55517578125,"type":"prune"},{"egraph":[[0,20,14,0.000132594],[2,20,16,0.000116001],[1,17,16,0.000116217],[0,9,16,0.000163318],[0,6,16,8.108e-5]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)","a","x","#s(literal 1 binary64)"]],"locations":[["(*.f64 a x)","cost-diff",0],["(exp.f64 (*.f64 a x))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[521936,521936]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))","(exp.f64 (*.f64 a x))","(pow.f64 (exp.f64 x) a)","(*.f64 a x)","(*.f64 x a)","a","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":5.85498046875,"type":"simplify"},{"compiler":[[18,8]],"locations":[["(*.f64 a x)","accuracy",0.0],["(exp.f64 (*.f64 a x))","accuracy",0.006191259768442017],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","accuracy",30.27240834575997]],"memory":[[-1278256,6688256]],"mixsample":[[0.17041015625,"ival-true",0],[2.1953125,"ival-exp",0],[2.635498046875,"ival-mult",0],[1.664794921875,"ival-expm1",0],[0.142578125,"exact",0],[0.083740234375,"ival-assert",0]],"outcomes":[[13.64501953125,0,"valid",256]],"time":18.54296875,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[1660560,1660560]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"series":[[0.531005859375,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","-inf"],[0.675048828125,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","inf"],[1.253173828125,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","0"],[0.43896484375,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","-inf"],[0.576904296875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","inf"],[1.330078125,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","0"]],"time":5.39794921875,"type":"series"},{"count":[[15,15]],"egraph":[[0,7408,160,0.041802919],[26,7408,185,0.030481464],[25,6849,185,0.041880901],[24,6849,185,0.015878838],[23,6511,185,0.015962269],[22,6335,185,0.014874886],[21,6335,185,0.011287486],[20,6321,185,0.011276573],[19,6279,185,0.01041979],[18,6071,185,0.016400576],[17,4190,189,0.027170791],[16,4190,189,0.010695427],[15,4062,189,0.009717192],[14,4062,189,0.009061285],[13,4061,189,0.009228087],[12,3094,189,0.011389624],[11,2619,189,0.008912262],[10,1937,193,0.010916715],[9,1937,193,0.005263369],[8,1934,193,0.005597234],[7,1920,193,0.004720736],[6,1900,193,0.005008512],[5,1873,193,0.004834986],[4,1672,193,0.004864707],[3,1045,193,0.005574793],[2,526,193,0.003936059],[1,195,201,0.002023011],[0,63,201,0.000598993]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"memory":[[3288544,18779888]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 x a #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1]],"time":426.321044921875,"type":"simplify"},{"count":[[3,111]],"egraph":[[0,1348,11,0.010792017],[2,152,13,0.003986062],[1,30,13,0.000728659],[0,9,13,0.000567161],[0,6,13,0.000143769]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[-1965840,14079040]],"outputs":[["(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 x a)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (+.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)))) (fma.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 x a)))","(*.f64 (+.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 x a)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 x a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 x a)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))) (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)))) (fma.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 x a)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 x a)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3/2 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3/2 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (/.f64 (pow.f64 (exp.f64 x) a) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) a) (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) a) (/.f64 (pow.f64 (exp.f64 x) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 x)) a))","(expm1.f64 (*.f64 x a))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))","(+.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))","(*.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(pow.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (exp.f64 x) a)","(pow.f64 (pow.f64 (exp.f64 a) #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (exp.f64 a) (fma.f64 x #s(literal 1/2 binary64) (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (exp.f64 a) x)","(exp.f64 (*.f64 (log.f64 (exp.f64 x)) a))","(exp.f64 (*.f64 x a))","(*.f64 x a)","(*.f64 a (log.f64 (exp.f64 x)))","(*.f64 a x)","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 a (log.f64 (exp.f64 x)) #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))))","(+.f64 #s(literal 0 binary64) (*.f64 x a))","(+.f64 (*.f64 x a) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":152.64697265625,"type":"rewrite"},{"compiler":[[2806,340]],"memory":[[1669104,11935632]],"time":47.9619140625,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",52.50260892242688,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","next",51.33694210709658,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","next",52.70746088536826,"binary64"],["(expm1.f64 (*.f64 x a))","next",0.014003759768442016,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","next",21.807501570671636,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","fresh",21.14494007963346,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","fresh",24.29402690529252,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","fresh",21.580463958489382,"binary64"]],"compiler":[[18,12],[11,8],[8,7],[4,4],[27,18],[22,16],[17,12],[10,8],[18,12],[11,8],[8,7],[4,4],[27,18],[22,16],[17,12],[10,8]],"count":[[122,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[121,8],"picked":[1,0]}],"memory":[[-436288,7584496]],"min-error":[[0.006191259768442017,"binary64"]],"time":10.928955078125,"type":"prune"},{"egraph":[[0,9774,219,0.120700881],[14,7859,219,0.018487541],[13,7859,219,0.010242722],[12,7583,219,0.013302282],[11,7583,219,0.010819772],[10,7583,219,0.012446304],[9,4705,219,0.017488654],[8,4705,219,0.010392746],[7,4668,219,0.007948138],[6,4219,219,0.011930874],[5,2687,219,0.010361944],[4,1138,219,0.009918235],[3,398,219,0.005630867],[2,163,219,0.001615267],[1,89,219,0.001039936],[0,51,219,0.000981114],[0,29,221,0.000541872]],"inputs":[["(expm1.f64 (*.f64 x a))","(*.f64 x a)","x","a","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","x","a","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","a","#s(literal 1/6 binary64)","(*.f64 x a)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 x a #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["(expm1.f64 (*.f64 x a))","cost-diff",0]],"memory":[[2255088,46532256]],"method":["egg-herbie"],"outputs":[["(expm1.f64 (*.f64 x a))","(expm1.f64 (*.f64 a x))","(*.f64 x a)","(*.f64 a x)","x","a","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","(fma.f64 a x #s(literal 1 binary64))","x","a","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x)","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","a","#s(literal 1/6 binary64)","(*.f64 x a)","(*.f64 a x)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":379.994140625,"type":"simplify"},{"compiler":[[181,29]],"locations":[["(*.f64 #s(literal 1/24 binary64) x)","accuracy",0.3984375],["(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","accuracy",0.9665012628463043],["(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","accuracy",1.4038715035039047],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","accuracy",21.795995724587762],["(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","accuracy",2.1287336499640075],["(*.f64 (*.f64 a a) x)","accuracy",7.697884012304231],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","accuracy",21.571140164272578],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",30.27240834575997],["(fma.f64 x a #s(literal 1 binary64))","accuracy",0.0],["#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","accuracy",21.66666453819338],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",30.27240834575997],["#s(approx (exp (* a x)) #s(literal 1 binary64))","accuracy",22.039685426184],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","accuracy",30.27240834575997],["(*.f64 x a)","accuracy",0.0],["(expm1.f64 (*.f64 x a))","accuracy",0.014003759768442016]],"memory":[[-2468288,28338784]],"mixsample":[[0.225341796875,"ival-true",0],[2.43212890625,"ival-exp",0],[9.739013671875,"ival-add",0],[69.35986328125,"ival-mult",0],[7.436279296875,"const",0],[3.77001953125,"ival-expm1",0],[0.309814453125,"exact",0],[0.115478515625,"ival-assert",0]],"outcomes":[[112.068359375,0,"valid",256]],"time":132.989990234375,"type":"localize"},{"count":[[17,77]],"inputs":[["(expm1.f64 (*.f64 x a))","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 a a) x)","(*.f64 #s(literal 1/24 binary64) x)"]],"memory":[[341072,7964880]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/2 x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(* (pow a 2) x)","(- (exp (* a x)) 1)","(exp (* a x))","(* a (+ x (/ 1 a)))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1/2 (* 1/6 (* a x))))","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(* 1/24 x)","(* x (+ a (/ 1 x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))"]],"series":[[3.34619140625,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* (* a a) x) (* 1/24 x))","x","-inf"],[2.8701171875,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* (* a a) x) (* 1/24 x))","x","inf"],[2.10498046875,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* (* a a) x) (* 1/24 x))","x","0"],[4.865966796875,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* (* a a) x) (* 1/24 x))","a","-inf"],[2.4970703125,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* (* a a) x) (* 1/24 x))","a","inf"],[2.2431640625,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (* (* a a) x) (* 1/24 x))","a","0"]],"time":19.719970703125,"type":"series"},{"count":[[77,76]],"egraph":[[0,8343,1062,0.115796475],[2,3333,1166,0.027789615],[1,1038,1221,0.00944683],[0,317,1252,0.003016968]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/2 x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(* (pow a 2) x)","(- (exp (* a x)) 1)","(exp (* a x))","(* a (+ x (/ 1 a)))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* x (+ 1/2 (* 1/6 (* a x))))","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(* 1/24 x)","(* x (+ a (/ 1 x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))"]],"memory":[[-2017232,54947952]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 a x #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","a","(* a (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(+ 1 (* 1/2 (* a x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(+ (* 1/6 (* a (pow x 2))) (* 1/2 x))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x)","(+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x)","(* (pow a 2) x)","(*.f64 (*.f64 a a) x)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 a x))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* a (+ x (/ 1 a)))","(fma.f64 a x #s(literal 1 binary64))","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x) a)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* 1/2 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(* 1/24 (* (pow a 4) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 x (/.f64 x a)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 x (/.f64 x a)) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 4 binary64)))","(* 1/24 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a))) a (*.f64 (/.f64 x a) #s(literal 1/2 binary64))) (*.f64 a a))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a))) a (*.f64 (/.f64 x a) #s(literal 1/2 binary64))) (*.f64 a a) #s(literal 1 binary64))","(* 1/24 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) a) a) #s(literal 1/24 binary64))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(* (pow a 2) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/24 binary64) x (/.f64 #s(literal 1/6 binary64) a))) a (*.f64 (/.f64 x a) #s(literal 1/2 binary64))) a)","(* -1 (* a (- (* -1 x) (/ 1 a))))","(fma.f64 a x #s(literal 1 binary64))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (/.f64 x a)))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 x #s(literal 1/6 binary64) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1/2 (/ x a)) (* -1/6 (pow x 2))) a)) (* 1/24 (pow x 3))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 x #s(literal -1/6 binary64) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) a) a)","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x #s(literal 1 binary64))","(+ a (* 1/2 (* (pow a 2) x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(* x (+ 1/2 (* 1/6 (* a x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64)) x)","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ a (/ 1 x)))","(fma.f64 a x #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x #s(literal 1 binary64))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(*.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (*.f64 a (/.f64 a x)) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (*.f64 a (/.f64 a x)) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (/.f64 a (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (+ (* 1/6 (/ a x)) (/ 1/2 (pow x 2)))))","(*.f64 (fma.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(fma.f64 a x #s(literal 1 binary64))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(*.f64 x (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x (/.f64 (fma.f64 a x #s(literal 1 binary64)) x)))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal -1/6 binary64) a (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 a) (* 1/2 (/ 1 x))) x)) (* -1/24 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/24 binary64) a) a (/.f64 (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":272.528076171875,"type":"simplify"},{"count":[[17,450]],"egraph":[[0,8370,180,0.081102753],[2,1479,180,0.030450954],[1,216,180,0.004980968],[0,51,180,0.001826405],[0,29,182,0.0003169]],"inputs":[["(expm1.f64 (*.f64 x a))","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 a a) x)","(*.f64 #s(literal 1/24 binary64) x)"]],"memory":[[2538880,61312784]],"outputs":[["(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (/.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)))))","(*.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))))) (neg.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (-.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))) (neg.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))))","(/.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))) (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 1/2 binary64))) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 #s(literal 1/2 binary64) x)) (pow.f64 (exp.f64 a) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 a x))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))","(+.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 a x))","(*.f64 (*.f64 a x) #s(literal 1 binary64))","(*.f64 a (*.f64 x #s(literal 1 binary64)))","(*.f64 a x)","(*.f64 x (*.f64 a #s(literal 1 binary64)))","(*.f64 x a)","(fma.f64 #s(literal 1 binary64) (*.f64 a x) #s(literal 0 binary64))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 1/2 binary64)))) (log.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 1/2 binary64)))))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (*.f64 #s(literal 1/2 binary64) x))) (log.f64 (pow.f64 (exp.f64 a) (*.f64 #s(literal 1/2 binary64) x))))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))))","(*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64)))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 a x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 a x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 a x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 a x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (*.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 a x #s(literal -1 binary64)) (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 a x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 a x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 a x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 a x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 a x #s(literal 1 binary64))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x a #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 a x))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 a x))))","(-.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 1 binary64))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)) x) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) x) (pow.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))","(*.f64 (-.f64 (*.f64 a a) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 a a (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (fma.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))))","(/.f64 (neg.f64 (-.f64 (*.f64 a a) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (+.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (-.f64 (pow.f64 a #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (*.f64 a a))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (-.f64 (*.f64 a a) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a))) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 a a (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))) (-.f64 (*.f64 a a) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a a (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) x a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x) a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a a) a)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 (*.f64 a a) (*.f64 #s(literal 1/2 binary64) x) a)","(fma.f64 a (*.f64 a (*.f64 #s(literal 1/2 binary64) x)) a)","(fma.f64 a (*.f64 (*.f64 a x) #s(literal 1/2 binary64)) a)","(fma.f64 x (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) a)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(+.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)","(+.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x)","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 a x))","(*.f64 (*.f64 a x) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)))","(*.f64 a (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x))","(*.f64 x (*.f64 a (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x))) (*.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))) (*.f64 (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (neg.f64 (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(/.f64 (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)))","(/.f64 (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x) (*.f64 a x))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(fma.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(fma.f64 a x (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(fma.f64 a x (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(fma.f64 x a (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(fma.f64 x a (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)) (*.f64 a x))","(+.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (*.f64 a x))","(+.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 a x)))","(+.f64 (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 a x)) (pow.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))) (*.f64 a x)) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 a (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64))) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 a (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 a (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) a) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))) x) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64)))) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))) x)) (neg.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))) x) (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64)))) (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))) (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) x) (*.f64 a #s(literal 1/2 binary64)))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 2 binary64))) (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) a) x)))","(*.f64 (*.f64 a a) x)","(*.f64 (*.f64 a x) a)","(*.f64 a (*.f64 a x))","(*.f64 x (*.f64 a a))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 x #s(literal 1/24 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":364.848876953125,"type":"rewrite"},{"compiler":[[21131,2201]],"memory":[[9698128,54970096]],"time":85.864990234375,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","fresh",51.33694210709658,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",52.50260892242688,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",51.33694210709658,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","fresh",60.83299733736434,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",52.70746088536826,"binary64"],["(expm1.f64 (*.f64 x a))","done",0.014003759768442016,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","next",24.64326063584919,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","next",21.926933706579334,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","next",21.580463958489382,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","next",21.14494007963346,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","fresh",24.29402690529252,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",25.560123095923103,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a))","fresh",21.801692902057788,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","next",53.051760808209025,"binary64"]],"compiler":[[15,10],[18,12],[11,8],[33,22],[8,7],[4,4],[22,15],[17,13],[10,8],[22,16],[17,12],[42,29],[27,19],[45,30],[15,10],[33,22],[22,15],[17,13],[10,8],[22,16],[17,12],[42,29],[27,19],[45,30]],"count":[[550,14]],"kept":[{"done":[0,0],"fresh":[3,2],"new":[542,8],"picked":[5,4]}],"memory":[[-7586992,26936816]],"min-error":[[0.006191259768442017,"binary64"]],"time":20.38818359375,"type":"prune"},{"egraph":[[0,3922,365,0.02184782],[13,3922,381,0.016699299],[12,3921,381,0.01998042],[11,3737,381,0.02665714],[10,3737,381,0.012835491],[9,3737,381,0.012667192],[8,3713,381,0.012501941],[7,3336,381,0.010184374],[6,2786,381,0.009420697],[5,2372,381,0.007169114],[4,1909,381,0.006936796],[3,927,381,0.007204991],[2,381,381,0.00299631],[1,171,381,0.0011957],[0,75,381,0.000763941],[0,47,384,0.000418718]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","a","x","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))","#s(literal 1/2 binary64)","(*.f64 a x)","a","x","#s(literal 1 binary64)","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x)","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)))","(*.f64 x x)","x","(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","(*.f64 a x)","a","#s(literal 1/2 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)))","(*.f64 x x)","x","(fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) a)","#s(literal 1/24 binary64)","a","#s(literal 1/6 binary64)","(*.f64 x a)"]],"locations":[["(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","cost-diff",0],["#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","cost-diff",0],["(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x)","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x)","cost-diff",0],["(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","cost-diff",0],["(*.f64 a x)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","cost-diff",0]],"memory":[[225808,9073872]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 a a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) x))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (fma.f64 (*.f64 a a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) x)","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(*.f64 a x)","(*.f64 x a)","a","x","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))","#s(literal 1/2 binary64)","(*.f64 a x)","(*.f64 x a)","a","x","#s(literal 1 binary64)","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 a a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","(*.f64 (fma.f64 (*.f64 a a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) x)","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x)","(fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(*.f64 x x)","x","(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","(*.f64 a x)","(*.f64 x a)","a","#s(literal 1/2 binary64)","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 a a) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x))) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 a a) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x))) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 a a) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","(*.f64 (*.f64 (*.f64 a a) x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x) x)","(*.f64 x x)","x","(fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))","(*.f64 #s(literal 1/24 binary64) a)","#s(literal 1/24 binary64)","a","#s(literal 1/6 binary64)","(*.f64 x a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":230.200927734375,"type":"simplify"},{"compiler":[[289,45]],"locations":[["(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","accuracy",2.927305414230018],["(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","accuracy",6.647050017740964],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","accuracy",21.795995724587762],["#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a))","accuracy",40.61904105916263],["(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","accuracy",0.10546875],["(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","accuracy",0.9664130161283317],["(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x)","accuracy",5.124867691635809],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","accuracy",21.123237169949473],["(*.f64 a x)","accuracy",0.0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x)","accuracy",0.03515625],["(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","accuracy",1.6706849769481742],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","accuracy",21.92100862875524],["(*.f64 a x)","accuracy",0.0],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","accuracy",21.580463958489382],["(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","accuracy",0.0859375],["(*.f64 #s(literal 1/6 binary64) x)","accuracy",0.3984375],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","accuracy",2.1370745811413743],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","accuracy",21.123237169949473]],"memory":[[-3654448,43106384]],"mixsample":[[0.857177734375,"ival-true",0],[21.2734375,"ival-add",0],[77.557861328125,"ival-mult",0],[15.058837890625,"const",0],[0.750244140625,"exact",0],[10.443115234375,"ival-expm1",0],[0.3017578125,"ival-assert",0]],"outcomes":[[184.476318359375,0,"valid",256]],"time":261.091064453125,"type":"localize"},{"count":[[22,111]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x)","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","(*.f64 #s(literal 1/6 binary64) x)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)"]],"memory":[[3258304,10711648]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* 1/2 a)","(* a (+ 1/2 (* 1/6 (* a x))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(* 1/2 (pow x 2))","(+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","1/2","(+ 1/2 (* 1/6 (* a x)))","(* 1/6 (* a (pow x 2)))","(* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/6 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a x))","(* a (+ (* 1/2 x) (/ 1 a)))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* a (pow x 3)))","(* a (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/6 (* a x))","(* a (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* a (- (* -1/2 x) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* -1 (* a (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* -1 (* a (- (* -1/6 x) (* 1/2 (/ 1 a)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(* (pow x 2) (+ 1/2 (* 1/6 (* a x))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* (pow x 2) (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))","(* 1/6 x)","(* (pow x 2) (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* x (+ (* 1/2 a) (/ 1 x)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* x (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* x (- (* -1/2 a) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* x (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))"]],"series":[[8.694091796875,"((- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* x a)) 1) (* (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) a) (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) (* (* x x) (+ (* 1/6 (* a x)) 1/2)) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (* 1/6 x) (+ (* (* 1/6 x) a) 1/2) (+ (* 1/6 (* a x)) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a))","x","-inf"],[5.52392578125,"((- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* x a)) 1) (* (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) a) (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) (* (* x x) (+ (* 1/6 (* a x)) 1/2)) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (* 1/6 x) (+ (* (* 1/6 x) a) 1/2) (+ (* 1/6 (* a x)) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a))","x","inf"],[8.080078125,"((- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* x a)) 1) (* (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) a) (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) (* (* x x) (+ (* 1/6 (* a x)) 1/2)) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (* 1/6 x) (+ (* (* 1/6 x) a) 1/2) (+ (* 1/6 (* a x)) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a))","x","0"],[6.069091796875,"((- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* x a)) 1) (* (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) a) (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) (* (* x x) (+ (* 1/6 (* a x)) 1/2)) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (* 1/6 x) (+ (* (* 1/6 x) a) 1/2) (+ (* 1/6 (* a x)) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a))","a","-inf"],[5.755859375,"((- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* x a)) 1) (* (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) a) (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) (* (* x x) (+ (* 1/6 (* a x)) 1/2)) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (* 1/6 x) (+ (* (* 1/6 x) a) 1/2) (+ (* 1/6 (* a x)) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a))","a","inf"],[8.341064453125,"((- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* x a)) 1) (* (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) a) (+ (* (* (* x x) (+ (* 1/6 (* a x)) 1/2)) a) x) (* (* x x) (+ (* 1/6 (* a x)) 1/2)) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (* 1/6 x) (+ (* (* 1/6 x) a) 1/2) (+ (* 1/6 (* a x)) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a))","a","0"]],"time":46.48095703125,"type":"series"},{"count":[[111,110]],"egraph":[[0,8173,1449,0.149548957],[2,4305,1572,0.03415559],[1,1252,1678,0.016816521],[0,351,1715,0.00506182]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* 1/2 a)","(* a (+ 1/2 (* 1/6 (* a x))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(* 1/2 (pow x 2))","(+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","1/2","(+ 1/2 (* 1/6 (* a x)))","(* 1/6 (* a (pow x 2)))","(* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/6 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a x))","(* a (+ (* 1/2 x) (/ 1 a)))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* a (pow x 3)))","(* a (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(* 1/6 (* a x))","(* a (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* a (- (* -1/2 x) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* -1 (* a (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* -1 (* a (- (* -1/6 x) (* 1/2 (/ 1 a)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(* (pow x 2) (+ 1/2 (* 1/6 (* a x))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* (pow x 2) (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))","(* 1/6 x)","(* (pow x 2) (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* x (+ (* 1/2 a) (/ 1 x)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* x (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* x (- (* -1/2 a) (/ 1 x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* x (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))"]],"memory":[[2267584,56828592]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (* a x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(* 1/2 a)","(*.f64 #s(literal 1/2 binary64) a)","(* a (+ 1/2 (* 1/6 (* a x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) x)","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(fma.f64 (*.f64 x (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* 1/6 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a) a)","(* (pow a 2) (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(*.f64 (*.f64 a a) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 (* a x)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))","(* 1/6 (* a (pow x 2)))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)","(* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(fma.f64 (*.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) a) a #s(literal 1 binary64))","(* 1/6 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) #s(literal 1/6 binary64)) x)","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a)","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x) x)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a) a)","(* 1/2 (* a (pow x 2)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x a)) x)","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* 1/2 (* a x))","(*.f64 #s(literal 1/2 binary64) (*.f64 x a))","(* a (+ (* 1/2 x) (/ 1 a)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(* 1/6 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)) a) a)","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (*.f64 a a))","(* 1/6 (* a (pow x 3)))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)) a)","(* a (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) a)","(* 1/24 (* (pow a 4) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 4 binary64)))","(* 1/24 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)) #s(literal 1 binary64))","(* 1/6 (* a x))","(*.f64 #s(literal 1/6 binary64) (*.f64 x a))","(* a (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))","(* 1/24 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) a) a) #s(literal 1/24 binary64))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (*.f64 a a))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) a) a)","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* -1 (* a (- (* -1/2 x) (/ 1 a))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) a #s(literal -1 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) x (/.f64 (neg.f64 x) a)) (neg.f64 a))) a) a)","(* -1 (* a (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) a)","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* a (- (* -1/6 x) (* 1/2 (/ 1 a)))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) a #s(literal -1/2 binary64)))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x) a)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) a)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a)","(* x (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (* 1/6 (* a x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) x)","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(fma.f64 (*.f64 x (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/24 binary64) (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))","(*.f64 (*.f64 a a) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* (pow x 2) (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 a (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x x))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x x) #s(literal 1 binary64))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) x)","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (*.f64 (fma.f64 (*.f64 a a) #s(literal 1/2 binary64) (/.f64 a x)) x) x)","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64)) x)","(* x (+ (* 1/2 a) (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)) x)","(* (pow x 3) (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64)) x) x)","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(*.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (/.f64 a (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* x (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 a a) #s(literal 1/2 binary64) (/.f64 a x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) x) x)","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) x)","(* -1 (* x (- (* -1/2 a) (/ 1 x))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) x #s(literal -1 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) a (/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(*.f64 (neg.f64 (*.f64 x x)) (fma.f64 (*.f64 #s(literal -1/6 binary64) a) x #s(literal -1/2 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 (/.f64 (*.f64 a a) x) #s(literal -1/2 binary64) (*.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 a a) #s(literal 1/2 binary64) (/.f64 a x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) x #s(literal -1/2 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":370.75,"type":"simplify"},{"count":[[22,447]],"egraph":[[0,8119,301,0.072368204],[2,1690,317,0.035869599],[1,304,325,0.00578246],[0,75,325,0.002156635],[0,47,328,0.000432638]],"inputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a)","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x)","(*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a))","(*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)","(*.f64 #s(literal 1/6 binary64) x)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)"]],"memory":[[-6022160,58165312]],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 x a) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x a)) (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x a)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 x a) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 x a) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) a) x)","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a)","(*.f64 (*.f64 x a) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(*.f64 x (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))))","(*.f64 a (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (*.f64 x a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (*.f64 x a)) (*.f64 #s(literal 1 binary64) (*.f64 x a))) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) (*.f64 #s(literal 1 binary64) (*.f64 x a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (*.f64 x a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) (*.f64 x a)) (*.f64 #s(literal 1 binary64) (*.f64 x a)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a))) (*.f64 (*.f64 #s(literal 1 binary64) (*.f64 x a)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (-.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1 binary64)) (*.f64 (*.f64 x a) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 x a) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 x a) #s(literal 1 binary64)) (*.f64 (*.f64 x a) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))) (*.f64 (*.f64 (*.f64 x a) #s(literal 1 binary64)) (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x a))) (neg.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x a))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 x a) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 x a) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x a)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x a)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 x a) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))","(/.f64 (*.f64 (*.f64 x a) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (*.f64 (*.f64 x a) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) (*.f64 (*.f64 x a) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a) (*.f64 #s(literal 1 binary64) (*.f64 x a)))","(fma.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (*.f64 x a) #s(literal 1 binary64) (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 x a) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)) (*.f64 #s(literal 1 binary64) (*.f64 x a)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 x a)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) (*.f64 x a)))","(+.f64 (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (*.f64 (*.f64 x a) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 x a) #s(literal 1 binary64)) (*.f64 (*.f64 x a) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (*.f64 x a)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (*.f64 x a)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 x a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 1 binary64))","(fma.f64 a (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) a) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) a) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a)","(*.f64 a (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) #s(literal 3 binary64)) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) (*.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) #s(literal 3 binary64)) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (*.f64 (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (*.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a)))))","(/.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) a)) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) a)) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) a) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))","(/.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) (*.f64 a (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))))","(fma.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a (*.f64 #s(literal 1/2 binary64) a))","(fma.f64 #s(literal 1/2 binary64) a (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a))","(fma.f64 #s(literal 1/2 binary64) a (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))))","(fma.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) (*.f64 #s(literal 1/2 binary64) a))","(fma.f64 a #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a))","(fma.f64 a #s(literal 1/2 binary64) (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a) (*.f64 #s(literal 1/2 binary64) a))","(+.f64 (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (*.f64 #s(literal 1/2 binary64) a))","(+.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) a))","(+.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a (*.f64 (*.f64 x a) #s(literal 1/6 binary64))))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(*.f64 x a)","(*.f64 a x)","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))))","(+.f64 #s(literal 0 binary64) (*.f64 x a))","(+.f64 (*.f64 x a) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 a) x))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (*.f64 x a)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 x a)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x)","(*.f64 (*.f64 a (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))) x)","(*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 x a) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(*.f64 x (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a))","(*.f64 a (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (*.f64 x a))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 x a))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (*.f64 x a)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 x a)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (*.f64 x a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 x a))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) (*.f64 #s(literal 1 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 #s(literal 1 binary64) x) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x)) (*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) (-.f64 (*.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) (*.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) (*.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) (*.f64 x (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x (*.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x))","(fma.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) (*.f64 x #s(literal 1 binary64)))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x) (*.f64 #s(literal 1 binary64) x))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) x))","(+.f64 (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) (*.f64 x #s(literal 1 binary64)))","(+.f64 (*.f64 x #s(literal 1 binary64)) (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) a #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) a) #s(literal 1 binary64))","(fma.f64 a (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 x a) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 x a) #s(literal 1/2 binary64)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)) a) (pow.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) a) (pow.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x))) (pow.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a)","(*.f64 a (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 x a) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) (-.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) (*.f64 x a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (*.f64 x a) #s(literal 3 binary64))) (fma.f64 (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) (-.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) (*.f64 (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) (*.f64 x a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a)) (*.f64 (*.f64 x a) (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) (pow.f64 (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))) (*.f64 (*.f64 x a) (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)) a)) (neg.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))))","(/.f64 (neg.f64 (*.f64 a (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)) a) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) a) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))))","(/.f64 (*.f64 a (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))) (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 a (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))) (*.f64 a (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a (*.f64 x a))","(fma.f64 x a (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a))","(fma.f64 x a (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))","(fma.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) (*.f64 x a))","(fma.f64 a x (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a))","(fma.f64 a x (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a) (*.f64 x a))","(+.f64 (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) (*.f64 x a))","(+.f64 (*.f64 x a) (*.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) a))","(+.f64 (*.f64 x a) (*.f64 a (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) (*.f64 x a))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 4 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) (*.f64 x a)) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 6 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) #s(literal 3 binary64))))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) (*.f64 x a))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) (*.f64 x a)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) (*.f64 x a)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 a (*.f64 x x)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a x)","(fma.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 (*.f64 x x) a) x)","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) x)","(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x x) x)","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) a) x)","(fma.f64 a (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) x)","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))) (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (neg.f64 x))))","(+.f64 (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) x)","(+.f64 x (*.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(*.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 x #s(literal 9 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))))","(*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) (*.f64 x x))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))","(*.f64 x (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 x #s(literal 9 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 x #s(literal 9 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (*.f64 x x)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (*.f64 x x)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 x #s(literal 9 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) (*.f64 (*.f64 x x) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 x #s(literal 9 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) a)) x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 x a)) #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) x)) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 (*.f64 x x) a) (*.f64 #s(literal 1/6 binary64) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) x) x (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x a) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) (*.f64 x x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))))","(fma.f64 (*.f64 x a) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 a (*.f64 x x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x a) (*.f64 x x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 x (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 x #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))))","(fma.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) (*.f64 x x)) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 x #s(literal 3 binary64))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))) (*.f64 x a)))","(*.f64 (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))) a) x)","(*.f64 (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))) x) a)","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))) (*.f64 x a))","(*.f64 (*.f64 x a) #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))))","(*.f64 x (*.f64 a #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64))))))","(*.f64 a (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))) x))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64))))","(*.f64 (*.f64 a (*.f64 x x)) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 a a) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x) x))","(*.f64 (*.f64 (*.f64 a (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x) x) (*.f64 a a))","(*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (pow.f64 (*.f64 x a) #s(literal 2 binary64)))","(*.f64 (*.f64 x x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) a) a))","(*.f64 (*.f64 x x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (*.f64 a a)))","(*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x) (*.f64 a a)))","(*.f64 a (*.f64 (*.f64 a (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 x #s(literal 1/6 binary64))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal 1/6 binary64) a) #s(literal 1/2 binary64))","(fma.f64 a (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal 1/4 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64))) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x a) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (*.f64 x a) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x a) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal 1/6 binary64) a) #s(literal 1/2 binary64))","(fma.f64 a (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (*.f64 x a) #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x a) #s(literal 1/6 binary64)))","(*.f64 (*.f64 a (*.f64 x x)) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) a) (*.f64 x x))","(*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x) x) a)","(*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) (*.f64 (*.f64 x x) a))","(*.f64 (*.f64 x x) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x))","(*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) a) x))","(*.f64 a (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64)) x) x))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) a) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) a) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) (*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a))) #s(literal 3 binary64)) (pow.f64 (*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 a (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a))) (*.f64 a (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a))) (-.f64 (*.f64 (*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64)))) (*.f64 (*.f64 a (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a))) (*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64)))))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) a (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(fma.f64 a (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) (*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64))))","(+.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(+.f64 (*.f64 a (*.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1/24 binary64) a))) (*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":332.294921875,"type":"rewrite"},{"compiler":[[19239,2458]],"memory":[[5499968,50727392]],"time":65.592041015625,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","next",51.33694210709658,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",52.50260892242688,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",51.33694210709658,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","next",60.83299733736434,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",52.70746088536826,"binary64"],["(expm1.f64 (*.f64 x a))","done",0.014003759768442016,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x x) x) a))","fresh",24.69679620148192,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","next",21.151593743997545,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","fresh",21.93065726991232,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","done",21.926933706579334,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","next",52.9690416369205,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","done",21.580463958489382,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* 1/6 x) a) 1/2) (*.f64 #s(literal 1/6 binary64) (*.f64 x a))) a) x #s(literal 1 binary64)) (*.f64 x a)))","fresh",21.84582660069806,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",25.560123095923103,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a))","fresh",21.801692902057788,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","done",53.051760808209025,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","next",52.47324312443038,"binary64"]],"compiler":[[15,10],[18,12],[11,8],[33,22],[8,7],[4,4],[22,15],[22,14],[17,13],[17,13],[24,17],[10,8],[29,20],[42,29],[27,19],[45,30],[54,34],[15,10],[33,22],[22,15],[22,14],[17,13],[24,17],[29,20],[42,29],[27,19],[54,34]],"count":[[522,17]],"kept":[{"done":[4,4],"fresh":[5,4],"new":[508,6],"picked":[5,3]}],"memory":[[-671888,27133360]],"min-error":[[0.006191259768442017,"binary64"]],"time":21.47998046875,"type":"prune"},{"egraph":[[0,8297,501,0.099699729],[13,7826,536,0.022718428],[12,7141,536,0.021932329],[11,7050,536,0.016522465],[10,6952,536,0.015865994],[9,6713,536,0.016544932],[8,5995,536,0.017185344],[7,4872,536,0.016782117],[6,2504,536,0.014179297],[5,1745,536,0.006250148],[4,1376,536,0.004706119],[3,768,541,0.004580569],[2,373,541,0.002561959],[1,188,541,0.001440018],[0,93,541,0.000914289],[0,66,545,0.000472719]],"inputs":[["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","(*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a)","(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(*.f64 x a)","x","a","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a)","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x)","#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)))","(*.f64 #s(literal 1/2 binary64) (*.f64 x a))","#s(literal 1/2 binary64)","(*.f64 x a)","x","a","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","(*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)","#s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(*.f64 x x)","x","#s(literal 1/6 binary64)","a","(*.f64 x a)","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 a x #s(literal 1 binary64))","a","x","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x))","(*.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(/.f64 a x)","x","#s(literal 1 binary64)"]],"locations":[["#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","cost-diff",0],["#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","cost-diff",2],["#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","cost-diff",4],["(*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)","cost-diff",0],["#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","cost-diff",0],["#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)))","cost-diff",0],["(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x)","cost-diff",0],["(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","cost-diff",0]],"memory":[[7427376,43505920]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x) a))","(*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a)","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x) a)","(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x)","(*.f64 x a)","(*.f64 a x)","x","a","(*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x)","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) (*.f64 a x)))","(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a)","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) (*.f64 a x))","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x)","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) x)","#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)))","#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x)))","(*.f64 #s(literal 1/2 binary64) (*.f64 x a))","(*.f64 #s(literal 1/2 binary64) (*.f64 a x))","#s(literal 1/2 binary64)","(*.f64 x a)","(*.f64 a x)","x","a","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 a x)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 a x))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","(*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)","#s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(*.f64 x x)","x","#s(literal 1/6 binary64)","a","(*.f64 x a)","(*.f64 a x)","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 a x #s(literal 1 binary64))","a","x","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a) x))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a) x)","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x))","(*.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(/.f64 a x)","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":369.031982421875,"type":"simplify"},{"compiler":[[306,57]],"locations":[["(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","accuracy",12.36987932557261],["#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","accuracy",21.571140164272578],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","accuracy",30.27240834575997],["#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","accuracy",40.659734075719456],["(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","accuracy",0.109375],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","accuracy",0.36884118953222433],["#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","accuracy",21.66666453819338],["(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",30.27240834575997],["(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)","accuracy",6.8803953447680035],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","accuracy",21.795995724587762],["#s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","accuracy",22.545924667700803],["#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","accuracy",40.61904105916263],["(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x)","accuracy",0.03515625],["(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a)","accuracy",1.6706849769481742],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","accuracy",21.92100862875524],["#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)))","accuracy",41.157730046892226],["(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","accuracy",0.05078125],["(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","accuracy",0.10546875],["(*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a)","accuracy",0.9664130161283317],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","accuracy",21.123237169949473]],"memory":[[-5093312,51104016]],"mixsample":[[5.387939453125,"ival-div",0],[12.631103515625,"ival-add",0],[2.685302734375,"ival-exp",0],[47.27880859375,"ival-mult",0],[4.28515625,"ival-expm1",0],[0.1220703125,"ival-assert",0],[0.2646484375,"ival-true",0],[7.40234375,"const",0],[0.29248046875,"exact",0]],"outcomes":[[147.98681640625,0,"valid",256]],"time":192.72998046875,"type":"localize"},{"count":[[23,114]],"inputs":[["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","(*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a)","(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(*.f64 x a)","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a)","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x)","#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","(*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","#s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)"]],"memory":[[-3299216,12144864]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(/ 1 (* a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","1/2","(+ 1/2 (* 1/6 (* a x)))","(* 1/6 (* a (pow x 2)))","(* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a x))","(* a (+ (* 1/2 x) (/ 1 a)))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(/ 1 (- (exp (* a x)) 1))","(exp (* a x))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* 1/6 (* a x))","(* a (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* a (- (* -1/2 x) (/ 1 a))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* -1 (* a (- (* -1/6 x) (* 1/2 (/ 1 a)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* (pow x 2) (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(* (pow x 2) (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* x (+ (* 1/2 a) (/ 1 x)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* x (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* -1 (* x (- (* -1/2 a) (/ 1 x))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(* -1 (* x (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))"]],"series":[[4.9619140625,"((- (exp (* x a)) 1) (* (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) a) (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) (* x a) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (/ 1 (/ 1 (- (exp (* a x)) 1))) (/ 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (exp (* a x)) (* (+ (* (* 1/2 a) a) (/ a x)) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* x a) 1/6) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (* (* (* x x) 1/6) a))","x","-inf"],[3.255859375,"((- (exp (* x a)) 1) (* (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) a) (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) (* x a) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (/ 1 (/ 1 (- (exp (* a x)) 1))) (/ 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (exp (* a x)) (* (+ (* (* 1/2 a) a) (/ a x)) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* x a) 1/6) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (* (* (* x x) 1/6) a))","x","inf"],[2.76708984375,"((- (exp (* x a)) 1) (* (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) a) (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) (* x a) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (/ 1 (/ 1 (- (exp (* a x)) 1))) (/ 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (exp (* a x)) (* (+ (* (* 1/2 a) a) (/ a x)) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* x a) 1/6) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (* (* (* x x) 1/6) a))","x","0"],[4.262939453125,"((- (exp (* x a)) 1) (* (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) a) (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) (* x a) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (/ 1 (/ 1 (- (exp (* a x)) 1))) (/ 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (exp (* a x)) (* (+ (* (* 1/2 a) a) (/ a x)) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* x a) 1/6) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (* (* (* x x) 1/6) a))","a","-inf"],[3.575927734375,"((- (exp (* x a)) 1) (* (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) a) (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) (* x a) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (/ 1 (/ 1 (- (exp (* a x)) 1))) (/ 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (exp (* a x)) (* (+ (* (* 1/2 a) a) (/ a x)) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* x a) 1/6) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (* (* (* x x) 1/6) a))","a","inf"],[13.442138671875,"((- (exp (* x a)) 1) (* (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) a) (+ (* (* x a) (* (+ (* (* x a) 1/6) 1/2) x)) x) (* x a) (- (exp (* x a)) 1) (* (* (+ (* 1/2 (* a x)) 1) x) a) (* (+ (* 1/2 (* a x)) 1) x) (+ (* 1/2 (* a x)) 1) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* x a)) (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (* (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) a) (/ 1 (/ 1 (- (exp (* a x)) 1))) (/ 1 (- (exp (* a x)) 1)) (- (exp (* a x)) 1) (exp (* a x)) (* (+ (* (* 1/2 a) a) (/ a x)) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* x a) 1/6) 1/2) (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (* (* (* x x) 1/6) a))","a","0"]],"time":35.096923828125,"type":"series"},{"count":[[114,112]],"egraph":[[0,8057,1507,0.115052855],[2,4793,1648,0.02683279],[1,1408,1760,0.017180361],[0,413,1781,0.004436402]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","x","(+ x (* 1/2 (* a (pow x 2))))","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(/ 1 (* a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","1/2","(+ 1/2 (* 1/6 (* a x)))","(* 1/6 (* a (pow x 2)))","(* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(- (exp (* a x)) 1)","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a x))","(* a (+ (* 1/2 x) (/ 1 a)))","(* 1/24 (* (pow a 4) (pow x 4)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(* 1/24 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(/ 1 (- (exp (* a x)) 1))","(exp (* a x))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* 1/6 (* a x))","(* a (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/24 (* (pow a 2) (pow x 3)))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* a (- (* -1/2 x) (/ 1 a))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* -1 (* a (- (* -1/6 x) (* 1/2 (/ 1 a)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(* x (+ 1 (* 1/2 (* a x))))","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(* (pow x 2) (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(* (pow x 2) (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* x (+ (* 1/2 a) (/ 1 x)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* x (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(* -1 (* x (- (* -1/2 a) (/ 1 x))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(* -1 (* x (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))"]],"memory":[[4909728,59048448]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (* a x)))","(fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/2 x) (* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2)))))))","(fma.f64 (*.f64 x (fma.f64 (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/24 binary64)) x (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* 1/6 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/6 binary64)) x)","(* (pow a 2) (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(*.f64 (*.f64 a a) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))))","(/ 1 (* a x))","(/.f64 #s(literal 1 binary64) (*.f64 a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x (*.f64 (neg.f64 a) (*.f64 x (fma.f64 x #s(literal -1/24 binary64) (*.f64 (*.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)))))) a #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","(+ 1 (* a x))","(fma.f64 a x #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","a","(* a (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) a)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 (* a x)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))","(* 1/6 (* a (pow x 2)))","(*.f64 (*.f64 (*.f64 x x) a) #s(literal 1/6 binary64))","(* a (+ (* 1/24 (* a (pow x 3))) (* 1/6 (pow x 2))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 a x))","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (pow.f64 a #s(literal 3 binary64)))","(* 1/6 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)) a) a)","(* (pow a 2) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (*.f64 a a))","(* (pow a 2) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 x (*.f64 a a))) (*.f64 a a))","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) a) a)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a) a)","(* 1/2 (* a (pow x 2)))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) a)","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* 1/2 (* a x))","(*.f64 (*.f64 a x) #s(literal 1/2 binary64))","(* a (+ (* 1/2 x) (/ 1 a)))","(fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64))","(* 1/24 (* (pow a 4) (pow x 4)))","(*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (* 1/6 (/ (pow x 3) a))))","(*.f64 (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (* 1/2 (/ (pow x 2) (pow a 2))))))","(*.f64 (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* 1/24 (pow x 4)) (+ (* 1/6 (/ (pow x 3) a)) (+ (* 1/2 (/ (pow x 2) (pow a 2))) (/ x (pow a 3))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 x (/.f64 x (*.f64 a a))) #s(literal 1/2 binary64) (/.f64 x (pow.f64 a #s(literal 3 binary64)))))) (pow.f64 a #s(literal 4 binary64)))","(* 1/24 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (* 1/2 (/ x (pow a 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/24 (pow x 3)) (+ (* 1/6 (/ (pow x 2) a)) (+ (* 1/2 (/ x (pow a 2))) (/ 1 (pow a 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 x a) (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a)))) (pow.f64 a #s(literal 3 binary64)) #s(literal 1 binary64))","(/ 1 (- (exp (* a x)) 1))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* 1/2 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) a)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a) a #s(literal 1 binary64))","(* 1/6 (* a x))","(*.f64 (*.f64 #s(literal 1/6 binary64) a) x)","(* a (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))","(* 1/24 (* (pow a 2) (pow x 3)))","(*.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) a) a) #s(literal 1/24 binary64))","(* (pow a 2) (+ (* 1/24 (pow x 3)) (* 1/6 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (*.f64 a a))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (+ (* -1 (/ x a)) (* -1/2 (pow x 2))) a)) (* 1/6 (pow x 3))))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 a))) a) a)","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* -1 (* a (- (* -1/2 x) (/ 1 a))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) a #s(literal -1 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal -1/6 binary64) x (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* (pow a 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3))) a)) (* 1/24 (pow x 4))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a))) (neg.f64 a))) (pow.f64 a #s(literal 4 binary64)))","(* -1 (* (pow a 3) (+ (* -1/6 (/ (pow x 2) a)) (* -1/24 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 x #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (*.f64 x (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))) a)) (* -1/24 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 (+.f64 x (/.f64 #s(literal 1 binary64) a)) a)) a) a)","(* -1 (* a (- (* -1/6 x) (* 1/2 (/ 1 a)))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) a #s(literal -1/2 binary64)))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(* x (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(+ 1 (* x (+ (* 1/2 a) (* x (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2)))))))","(fma.f64 (*.f64 x (fma.f64 (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/24 binary64)) x (*.f64 #s(literal 1/6 binary64) a)) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/24 (* (pow a 3) x)) (* 1/6 (pow a 2))))","(*.f64 (*.f64 a a) (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 a x) #s(literal 1/12 binary64) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) a (*.f64 (*.f64 a (fma.f64 #s(literal -1/24 binary64) a (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -1/12 binary64) a)))) (neg.f64 x))) x #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(+ a (* 1/2 (* (pow a 2) x)))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) a)","(* (pow x 2) (+ (* 1/24 (* (pow a 2) x)) (* 1/6 a)))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 a (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(*.f64 (fma.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(* x (+ (* 1/2 a) (/ 1 x)))","(fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (* 1/6 (/ (pow a 3) x))))","(*.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (* 1/2 (/ (pow a 2) (pow x 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64)))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* 1/24 (pow a 4)) (+ (* 1/6 (/ (pow a 3) x)) (+ (* 1/2 (/ (pow a 2) (pow x 2))) (/ a (pow x 3))))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (fma.f64 (*.f64 a (/.f64 a (*.f64 x x))) #s(literal 1/2 binary64) (/.f64 a (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (* 1/6 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (* 1/2 (/ a (pow x 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/24 (pow a 3)) (+ (* 1/6 (/ (pow a 2) x)) (+ (* 1/2 (/ a (pow x 2))) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 a x) (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x)))) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x #s(literal 1 binary64))","(* x (+ (* 1/6 a) (* 1/2 (/ 1 x))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))","(* (pow x 3) (+ (* 1/24 (pow a 2)) (* 1/6 (/ a x))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 a) (/ 1 x)) x)) (* -1/6 (pow a 2)))))","(*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) a) a (/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (- (* -1/2 a) (/ 1 x))))","(fma.f64 (neg.f64 x) (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64))","(* (pow x 4) (+ (* -1 (/ (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal -1/6 binary64) a (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3))) x)) (* 1/24 (pow a 4))))","(*.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/24 binary64) (/.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) (neg.f64 x))) (neg.f64 x))) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ (pow a 2) x)) (* -1/24 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 a (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))) x)) (* -1/24 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/24 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) a (/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal -1 binary64) x)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 (+.f64 a (/.f64 #s(literal 1 binary64) x)) x)) x) x)","(* -1 (* x (- (* -1/6 a) (* 1/2 (/ 1 x)))))","(neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) a #s(literal -1/2 binary64)))","(* -1 (* (pow x 3) (+ (* -1/6 (/ a x)) (* -1/24 (pow a 2)))))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/24 binary64) a (/.f64 #s(literal 1/6 binary64) x))) (pow.f64 x #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":327.13818359375,"type":"simplify"},{"count":[[23,382]],"egraph":[[0,8339,437,0.090695983],[2,2401,467,0.038472766],[1,385,467,0.009869762],[0,93,467,0.003389511],[0,66,471,0.000680995]],"inputs":[["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","(*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a)","(fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x)","(*.f64 x a)","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a)","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x)","#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","(*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","(fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","#s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)"]],"memory":[[-3891904,58456816]],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x) a))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x) a)","(*.f64 a (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a))) (*.f64 (*.f64 a x) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)) a)) (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 a (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 a (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)) a) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))) a) (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))))","(/.f64 (*.f64 a (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)))","(/.f64 (*.f64 a (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a (*.f64 a x))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(fma.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) (*.f64 a x))","(fma.f64 a x (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(fma.f64 a x (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(fma.f64 x a (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(fma.f64 x a (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(+.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a) (*.f64 a x))","(+.f64 (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (*.f64 a x))","(+.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) a))","(+.f64 (*.f64 a x) (*.f64 a (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x)","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))) (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 x x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a) (*.f64 x x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))) (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a x)","(fma.f64 (*.f64 (*.f64 a x) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a) x x)","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) (*.f64 a x) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 x (*.f64 a x)) x)","(fma.f64 (*.f64 a x) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x)","(fma.f64 a (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x)) x)","(fma.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) a) x)","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a))) (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a (neg.f64 x))))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a) x)","(+.f64 x (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64)) x) x) a))","(*.f64 (*.f64 a x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 a x))","(*.f64 a (*.f64 x #s(literal 1 binary64)))","(*.f64 a x)","(*.f64 x (*.f64 a #s(literal 1 binary64)))","(*.f64 x a)","(fma.f64 (*.f64 a x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) #s(literal 0 binary64))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64)))) (log.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64)))))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (/.f64 x #s(literal 2 binary64)))) (log.f64 (pow.f64 (exp.f64 a) (/.f64 x #s(literal 2 binary64)))))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) (*.f64 a x)))","(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) a) x)","(*.f64 (*.f64 a #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x)))) x)","(*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) x) a)","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) (*.f64 a x))","(*.f64 (*.f64 a x) #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))))","(*.f64 a (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) x))","(*.f64 x (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) a))","(*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))) x)","(*.f64 x #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x))))","#s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 a x)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 a x)))","(*.f64 (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) a) x)","(*.f64 (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) x) a)","(*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 a x))","(*.f64 (*.f64 a x) #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)))","(*.f64 a (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) x))","(*.f64 x (*.f64 a #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))))","#s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a))","(*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)","(*.f64 a #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (/.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))) #s(literal 1 binary64)))","(exp.f64 (neg.f64 (log.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (/.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 a x) #s(literal 2 binary64))) a) (/.f64 x (-.f64 (*.f64 #s(literal 1/2 binary64) a) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (/.f64 x a) (/.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 a x) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/2 binary64) a) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x)","(*.f64 x (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 a x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 a x) x) (*.f64 (/.f64 a x) x) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 a x) x) (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (/.f64 a x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (/.f64 a x)) (*.f64 x (/.f64 a x)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 x (/.f64 a x)) (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 (/.f64 a x) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 x x) (-.f64 (*.f64 (*.f64 (/.f64 a x) x) (*.f64 (/.f64 a x) x)) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) (*.f64 (/.f64 a x) x)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 x (/.f64 a x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 x x) (-.f64 (*.f64 (*.f64 x (/.f64 a x)) (*.f64 x (/.f64 a x))) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) (*.f64 x (/.f64 a x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 a x) #s(literal 2 binary64))) x)) (neg.f64 (-.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) (/.f64 a x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 (/.f64 a x) #s(literal 3 binary64))) x)) (neg.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 a x) (-.f64 (/.f64 a x) (*.f64 (*.f64 a a) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 a x) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) (/.f64 a x))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 a #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 (/.f64 a x) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 a x) (-.f64 (/.f64 a x) (*.f64 (*.f64 a a) #s(literal 1/2 binary64)))))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 a x) #s(literal 2 binary64))) x) (-.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) (/.f64 a x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 a #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 (/.f64 a x) #s(literal 3 binary64))) x) (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 a x) (-.f64 (/.f64 a x) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 x (-.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (/.f64 a x) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) (/.f64 a x)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 a #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 (/.f64 a x) #s(literal 3 binary64)))) (fma.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (/.f64 a x) (-.f64 (/.f64 a x) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a a) (*.f64 (/.f64 a x) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a a) (*.f64 x (/.f64 a x)))","(fma.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x (*.f64 (/.f64 a x) x))","(fma.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x (*.f64 x (/.f64 a x)))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) (*.f64 (/.f64 a x) x))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) (*.f64 x (/.f64 a x)))","(fma.f64 (*.f64 a a) (*.f64 #s(literal 1/2 binary64) x) (*.f64 (/.f64 a x) x))","(fma.f64 (*.f64 a a) (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (/.f64 a x)))","(fma.f64 (/.f64 a x) x (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x) (*.f64 (/.f64 a x) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x) (*.f64 x (/.f64 a x)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) (*.f64 (/.f64 a x) x))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) (*.f64 x (/.f64 a x)))","(fma.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) (*.f64 (/.f64 a x) x))","(fma.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) (*.f64 x (/.f64 a x)))","(fma.f64 x (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) (*.f64 (/.f64 a x) x))","(fma.f64 x (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) (*.f64 x (/.f64 a x)))","(fma.f64 x (/.f64 a x) (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (/.f64 a x) x) (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 x (/.f64 a x)) (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) (*.f64 (/.f64 a x) x))","(+.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) (*.f64 x (/.f64 a x)))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))))","(+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))","(*.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (*.f64 a x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (*.f64 a x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 a x) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64)) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))","(fma.f64 (*.f64 a x) #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(fma.f64 a (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(fma.f64 x (*.f64 #s(literal 1/6 binary64) a) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (*.f64 a x)))) (/.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (*.f64 a x)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 a x)) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) (*.f64 a x)))","#s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a))","(*.f64 (*.f64 a (*.f64 x x)) #s(literal 1/6 binary64))","(*.f64 (*.f64 #s(literal 1/6 binary64) a) (*.f64 x x))","(*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)","(*.f64 (*.f64 x x) (*.f64 #s(literal 1/6 binary64) a))","(*.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) a))","(*.f64 (*.f64 a x) (*.f64 #s(literal 1/6 binary64) x))","(*.f64 a (*.f64 (*.f64 x x) #s(literal 1/6 binary64)))","(*.f64 x (*.f64 #s(literal 1/6 binary64) (*.f64 a x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":351.179931640625,"type":"rewrite"},{"compiler":[[18074,1889]],"memory":[[7266352,44952912]],"time":69.031005859375,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","fresh",18.439877223855326,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","fresh",21.882898898021608,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",52.50260892242688,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",51.33694210709658,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 (+.f64 x (/.f64 #s(literal 1 binary64) a)) a)) a) a))) #s(literal 1 binary64))","fresh",59.825471947245596,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64))","fresh",60.94895640562676,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",52.70746088536826,"binary64"],["(expm1.f64 (*.f64 x a))","done",0.014003759768442016,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x x) x) a))","fresh",24.69679620148192,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","done",21.151593743997545,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 #s(approx (+ (* (* x a) 1/6) 1/2) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)) x) x) a))","fresh",21.858671524831518,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","fresh",21.93065726991232,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","done",21.926933706579334,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","done",52.9690416369205,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","done",21.580463958489382,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",25.560123095923103,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a))","fresh",21.801692902057788,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","done",53.051760808209025,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","done",52.47324312443038,"binary64"]],"compiler":[[645,186],[19,14],[16,12],[18,12],[11,8],[37,24],[42,27],[8,7],[4,4],[22,15],[22,14],[29,19],[17,13],[17,13],[24,17],[10,8],[42,29],[27,19],[45,30],[54,34]],"count":[[466,19]],"kept":[{"done":[7,7],"fresh":[5,4],"new":[449,5],"picked":[5,3]}],"memory":[[-749280,26596384]],"min-error":[[0.006191259768442017,"binary64"]],"time":27.992919921875,"type":"prune"},{"accuracy":[0.014003759768442016],"baseline":[0.014003759768442016],"branch":[["a",0.014003759768442016,1,"binary64"],["x",0.014003759768442016,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",0.014003759768442016,1,"binary64"],["(exp.f64 (*.f64 a x))",0.014003759768442016,1,"binary64"],["(*.f64 a x)",0.014003759768442016,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[28,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* 1/6 x) a) 1/2) (*.f64 #s(literal 1/6 binary64) (*.f64 x a))) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 #s(approx (+ (* (* x a) 1/6) 1/2) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)) x) x) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x x) x) a))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 (+.f64 x (/.f64 #s(literal 1 binary64) a)) a)) a) a))) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[-4602976,19640560]],"oracle":[63.01242369644383],"outputs":[["(expm1.f64 (*.f64 x a))"]],"repr":["binary64"],"time":42.029052734375,"times":[[7.612060546875,"a"],[10.807861328125,"x"],[7.06103515625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[6.1728515625,"(exp.f64 (*.f64 a x))"],[7.89404296875,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[18.439877223855323],"baseline":[18.439877223855326],"branch":[["a",18.439877223855323,1,"binary64"],["x",18.439877223855323,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",18.439877223855326,1,"binary64"],["(exp.f64 (*.f64 a x))",18.439877223855326,1,"binary64"],["(*.f64 a x)",18.439877223855323,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[26,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* 1/6 x) a) 1/2) (*.f64 #s(literal 1/6 binary64) (*.f64 x a))) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 #s(approx (+ (* (* x a) 1/6) 1/2) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)) x) x) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x x) x) a))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 #s(approx (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) (*.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/24 binary64) a) x #s(literal 1/6 binary64))) a)) a #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 a x) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 (+.f64 x (/.f64 #s(literal 1 binary64) a)) a)) a) a))) #s(literal 1 binary64))"]],"memory":[[-3628800,18676240]],"oracle":[63.01242369644383],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))"]],"repr":["binary64"],"time":81.287109375,"times":[[6.529052734375,"a"],[7.045166015625,"x"],[53.4560546875,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[5.68701171875,"(exp.f64 (*.f64 a x))"],[6.30615234375,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[21.144940079633457],"baseline":[21.14494007963346],"branch":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",21.144940079633464,1,"binary64"],["(exp.f64 (*.f64 a x))",21.144940079633464,1,"binary64"],["a",21.144940079633464,1,"binary64"],["x",21.144940079633457,1,"binary64"],["(*.f64 a x)",21.144940079633468,1,"binary64"]],"compiler":[[6,6],[4,4],[1,2],[1,2],[3,3]],"count":[[20,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* 1/6 x) a) 1/2) (*.f64 #s(literal 1/6 binary64) (*.f64 x a))) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 #s(approx (+ (* (* x a) 1/6) 1/2) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)) x) x) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) x) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) (*.f64 a x) #s(literal 1/2 binary64))) a x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/6 binary64) #s(literal 1/2 binary64)) a) (*.f64 x x) x) a))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) x))) #s(literal 1 binary64))"]],"memory":[[-498368,15813984]],"oracle":[62.75863684395563],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))"]],"repr":["binary64"],"time":28.122802734375,"times":[[4.420166015625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[4.3408203125,"(exp.f64 (*.f64 a x))"],[5.77197265625,"a"],[6.211181640625,"x"],[4.93896484375,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[20.45056657824278],"baseline":[21.580463958489382],"branch":[["(*.f64 a x)",20.45056657824278,2,"binary64"],["a",21.58046395848938,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",20.450566578916334,2,"binary64"],["(exp.f64 (*.f64 a x))",20.450566578916334,2,"binary64"],["x",21.580463958489382,1,"binary64"]],"compiler":[[3,3],[1,2],[6,6],[4,4],[1,2]],"count":[[15,2]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (+ (* (* 1/24 x) a) 1/6) (* x a)) 1/2) x) a) 1) (*.f64 #s(approx (* (* (* x x) (+ (* (* 1/24 a) x) 1/6)) a) (*.f64 (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) a)) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 #s(approx (+ (* (* 1/6 x) a) 1/2) (*.f64 #s(literal 1/6 binary64) (*.f64 x a))) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 x a) (*.f64 #s(approx (+ (* (* x a) 1/6) 1/2) (*.f64 (*.f64 #s(literal 1/6 binary64) a) x)) x) x) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))"]],"memory":[[4253248,13494816]],"oracle":[62.704655284743446],"outputs":[["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))"]],"repr":["binary64"],"time":28.941162109375,"times":[[6.026123046875,"(*.f64 a x)"],[7.128173828125,"a"],[5.716064453125,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[4.3369140625,"(exp.f64 (*.f64 a x))"],[3.97705078125,"x"]],"type":"regimes"},{"accuracy":[21.58046395848938],"baseline":[21.580463958489382],"branch":[["a",21.58046395848938,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",21.58046395848938,1,"binary64"],["(exp.f64 (*.f64 a x))",21.58046395848938,1,"binary64"],["(*.f64 a x)",21.580463958489382,1,"binary64"]],"compiler":[[1,2],[6,6],[4,4],[3,3]],"count":[[8,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 #s(approx (+ (* 1/2 (* a x)) 1) (*.f64 #s(literal 1/2 binary64) (*.f64 x a))) x) a))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 x a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x))"]],"memory":[[-312928,7899872]],"oracle":[53.33908370713261],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 x a))"]],"repr":["binary64"],"time":11.654052734375,"times":[[2.5810546875,"a"],[2.296142578125,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[2.8359375,"(exp.f64 (*.f64 a x))"],[2.919921875,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[52.70746088536823],"baseline":[52.70746088536826],"branch":[["x",52.70746088536823,1,"binary64"],["(*.f64 a x)",52.707460885368356,1,"binary64"],["a",52.707460885368334,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",52.70746088536836,1,"binary64"],["(exp.f64 (*.f64 a x))",52.70746088536836,1,"binary64"]],"compiler":[[1,2],[3,3],[1,2],[6,6],[4,4]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"link":["."],"memory":[[-1609584,6742096]],"name":["expax (section 3.5)"],"oracle":[52.70746088536826],"outputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":7.4208984375,"times":[[1.539794921875,"x"],[1.4560546875,"(*.f64 a x)"],[1.192138671875,"a"],[1.112060546875,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[1.00390625,"(exp.f64 (*.f64 a x))"]],"type":"regimes"},{"bstep":[[0.18896484375,-191216216.18353206,-8306.677875737098]],"compiler":[[6,6],[3,3]],"memory":[[187920,187920]],"method":["left-value"],"time":0.653076171875,"type":"bsearch"},{"egraph":[[9,6166,126,0.026403815],[8,2849,126,0.025029539],[7,1029,126,0.016353765],[6,398,126,0.005803393],[5,300,126,0.002187046],[4,244,126,0.002601006],[3,176,128,0.001859221],[2,118,128,0.001701275],[1,85,128,0.001237319],[0,56,128,0.001210439]],"inputs":[["(expm1.f64 (*.f64 x a))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(if (<=.f64 (*.f64 a x) #s(literal -100000000 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64)) #s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"memory":[[-4155744,12334336]],"method":["egg-herbie"],"outputs":[["(expm1.f64 (*.f64 x a))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","(pow.f64 #s(approx (/ 1 (- (exp (* a x)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(if (<=.f64 (*.f64 a x) #s(literal -100000000 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64)) #s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)))","(if (<=.f64 (*.f64 a x) #s(literal -100000000 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 #s(approx (* (+ (* (* 1/2 a) a) (/ a x)) x) (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)) x))) #s(literal 1 binary64)) #s(approx (- (exp (* a x)) 1) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a)))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"stop":[["node limit",1]],"time":114.19091796875,"type":"simplify"},{"compiler":[[128,56],[3,4],[3,3],[10,8],[14,9],[0,2],[0,2],[0,2],[10,8],[26,10],[6,5],[14,9]],"egraph":[[0,8057,1507,0.132259362],[2,4793,1648,0.033213755],[1,1408,1760,0.015570247],[0,413,1781,0.00396503],[0,1348,11,0.010203639],[2,152,13,0.005436131],[1,30,13,0.001025073],[0,9,13,0.000795478],[0,6,13,8.7668e-5],[0,8370,180,0.094340498],[2,1479,180,0.040585706],[1,216,180,0.006478592],[0,51,180,0.001730826],[0,29,182,0.000305142],[0,8343,1062,0.13289829],[2,3333,1166,0.02598251],[1,1038,1221,0.012202172],[0,317,1252,0.003817109],[0,7408,160,0.037879667],[26,7408,185,0.02930017],[25,6849,185,0.042913669],[24,6849,185,0.015456924],[23,6511,185,0.015945781],[22,6335,185,0.014169689],[21,6335,185,0.010202601],[20,6321,185,0.010345296],[19,6279,185,0.010579797],[18,6071,185,0.013676913],[17,4190,189,0.025171988],[16,4190,189,0.009854118],[15,4062,189,0.010609459],[14,4062,189,0.009189134],[13,4061,189,0.01055628],[12,3094,189,0.011927727],[11,2619,189,0.0085812],[10,1937,193,0.01117924],[9,1937,193,0.00497631],[8,1934,193,0.004628996],[7,1920,193,0.004719871],[6,1900,193,0.004961184],[5,1873,193,0.004947903],[4,1672,193,0.005713268],[3,1045,193,0.006372602],[2,526,193,0.00329186],[1,195,201,0.001390311],[0,63,201,0.000668195]],"memory":[[6699808,6699808]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["saturated",1]],"time":2722.760009765625,"type":"soundness"},{"compiler":[[128,56],[128,56],[4,4],[4,4],[6,6],[6,6],[4,4],[4,4],[4,4],[4,4]],"memory":[[-3317200,29203888]],"remove-preprocessing":[["(sort a x)"],[],[],[],[],["(sort a x)"],[]],"time":332.159912109375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]