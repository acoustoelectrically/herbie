[{"memory":[[14144,14144]],"time":0.031005859375,"type":"start"},{"compiler":[[14,9]],"memory":[[1149136,1149136]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0007317066192626953,"valid":0.4987800121307373}],[11,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0014634132385253906,"valid":0.4980483055114746}],[10,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0029268264770507813,"valid":0.4965848922729492}],[9,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0058536529541015625,"valid":0.49365806579589844}],[8,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.011707305908203125,"valid":0.4878044128417969}],[7,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.02341461181640625,"valid":0.47609710693359375}],[6,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0468292236328125,"valid":0.4526824951171875}],[5,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.093658447265625,"valid":0.405853271484375}],[4,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.18731689453125,"valid":0.31219482421875}],[3,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.3746337890625,"valid":0.1248779296875}],[2,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":6.095947265625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[13021616,350075584]],"mixsample":[[188.228515625,"ival-div",0],[177.66162109375,"adjust",800],[66.9609375,"ival-fabs",0],[0.050048828125,"ival-log",400],[0.007080078125,"ival-div",400],[20.4716796875,"ival-sub",1600],[4.933837890625,"ival-assert",0],[65.51513671875,"ival-sub",0],[1488.3203125,"ival-log",0],[88.486572265625,"ival-log1p",0],[68.462158203125,"ival-sub",400],[0.0458984375,"ival-log1p",400],[7.305908203125,"exact",0],[33.062255859375,"ival-<=",0],[62.010986328125,"adjust",2000]],"outcomes":[[1089.557373046875,1,"valid",4830],[1466.14404296875,2,"valid",3087],[37.8681640625,0,"valid",339]],"time":2969.725830078125,"type":"sample"},{"compiler":[[9,7],[27,9],[27,9]],"confusion":[[249,1,5,1]],"explanations":[["log.f64","(log.f64 (+.f64 #s(literal 1 binary64) x))","sensitivity",254,1,[],[[2]]],["log.f64","(log.f64 (-.f64 #s(literal 1 binary64) x))","sensitivity",254,1,[],[[1]]]],"fperrors":[["(log.f64 (+.f64 #s(literal 1 binary64) x))",254,0,false,0,false],["(log.f64 (-.f64 #s(literal 1 binary64) x))",255,0,false,1,[-0.028635566105452422]],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0,0,false,0,false],["(+.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["(-.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,254],[0,2]],"maybe-confusion":[[249,1,0,5,0,1]],"memory":[[-8524336,58274992]],"mixsample":[[11.209228515625,"ival-div",0],[11.8984375,"adjust",800],[3.51953125,"ival-add",0],[1.10107421875,"ival-sub",1600],[0.2470703125,"ival-assert",0],[3.6748046875,"ival-sub",0],[0.506103515625,"ival-true",0],[79.172607421875,"ival-log",0],[5.082275390625,"ival-log1p",0],[3.10009765625,"ival-sub",400],[0.354736328125,"exact",0],[4.289794921875,"adjust",2000]],"outcomes":[[63.204833984375,1,"valid",298],[86.577880859375,2,"valid",196],[1.74072265625,0,"valid",18]],"time":217.068115234375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,7]],"egraph":[[0,69,6,0.000328559],[8,69,9,0.000373429],[7,65,9,0.000488747],[6,51,9,0.000363984],[5,41,9,0.000297144],[4,33,9,0.000220753],[3,26,9,0.000190064],[2,21,9,0.00015668],[1,17,9,0.000130969],[0,12,9,0.000164882],[0,7,9,0.000105417],[9,193,19,0.00153545],[8,192,19,0.001523198],[7,189,19,0.001095569],[6,178,19,0.001027619],[5,153,19,0.001080732],[4,116,19,0.000880066],[3,79,19,0.000581988],[2,43,19,0.000549374],[1,24,19,0.000210246],[0,9,21,0.00015415]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"memory":[[5380816,5380816]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":28.360107421875,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43648,43648]],"time":0.06982421875,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","next",61.78379352143416,"binary64"]],"compiler":[[9,7]],"memory":[[270416,270416]],"time":0.364990234375,"type":"prune"},{"egraph":[[0,69,19,0.000338318],[8,69,25,0.000334219],[7,65,25,0.000429271],[6,51,25,0.000339187],[5,41,25,0.000291756],[4,33,25,0.000220338],[3,26,25,0.000189907],[2,21,25,0.000158046],[1,17,25,0.000131091],[0,12,25,0.000157604],[0,7,25,0.000107466]],"inputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)"]],"locations":[["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(log.f64 (+.f64 #s(literal 1 binary64) x))","cost-diff",2]],"memory":[[656592,656592]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(log.f64 (+.f64 #s(literal 1 binary64) x))","(log1p.f64 x)","(+.f64 #s(literal 1 binary64) x)","(-.f64 x #s(literal -1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":8.18212890625,"type":"simplify"},{"compiler":[[27,9]],"locations":[["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","accuracy",0.02734375],["(log.f64 (+.f64 #s(literal 1 binary64) x))","accuracy",58.879219073116595],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.927547803169574]],"memory":[[-4171184,12880512]],"mixsample":[[4.45849609375,"ival-div",0],[6.810302734375,"adjust",800],[1.580078125,"ival-add",0],[0.480224609375,"ival-sub",1600],[0.1201171875,"ival-assert",0],[1.669189453125,"ival-sub",0],[0.1923828125,"ival-true",0],[37.7744140625,"ival-log",0],[2.159912109375,"ival-log1p",0],[4.050048828125,"ival-sub",400],[0.258544921875,"exact",0],[1.982177734375,"adjust",2000]],"outcomes":[[32.157958984375,1,"valid",149],[41.259521484375,2,"valid",98],[0.760009765625,0,"valid",9]],"time":83.909912109375,"type":"localize"},{"count":[[5,42]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[2060112,2060112]],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[2.52001953125,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","-inf"],[2.344970703125,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","inf"],[0.7939453125,"((log (+ 1 x)) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (+ 1 x))","x","0"]],"time":6.591064453125,"type":"series"},{"count":[[42,41]],"egraph":[[0,8379,854,0.105381489],[2,2012,881,0.028695831],[1,658,954,0.006053239],[0,217,1070,0.001833493]],"inputs":[["x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","1","(+ 1 (* -1 x))","(+ 1 x)","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* x (- (/ 1 x) 1))","(* x (+ 1 (/ 1 x)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[6919344,51101600]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x) (log.f64 x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (*.f64 x x)) (log.f64 x)) (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x)) (log.f64 x)))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) x) x) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 x)) (log.f64 x)) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":254.14306640625,"type":"simplify"},{"count":[[5,842]],"egraph":[[0,10506,15,0.046644478],[3,2170,23,0.028038053],[2,245,23,0.007056017],[1,41,23,0.001026849],[0,12,23,0.000609587],[0,7,23,0.000105657]],"inputs":[["(log.f64 (+.f64 #s(literal 1 binary64) x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 #s(literal 1 binary64) x)"]],"memory":[[-10175216,53646576]],"outputs":[["(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 (neg.f64 (neg.f64 x)))","(log1p.f64 (neg.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (log1p.f64 (fma.f64 x x x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (fma.f64 x x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))) (log.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x)))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(-.f64 (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 (neg.f64 x) #s(literal 1 binary64))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log1p.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (neg.f64 (log1p.f64 x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (fma.f64 x x x)) (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 x))","(pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (log1p.f64 x) #s(literal 1 binary64))","(log1p.f64 (neg.f64 (neg.f64 x)))","(log1p.f64 (neg.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (log1p.f64 (fma.f64 x x x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 2 binary64)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (fma.f64 x x x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 x) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal -1 binary64) (log1p.f64 (*.f64 (neg.f64 x) x)))","(fma.f64 (log1p.f64 x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log1p.f64 x) #s(literal 0 binary64))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (*.f64 x x)))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (log1p.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (log1p.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)))) (log.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x)))) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64))))) (log.f64 (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(-.f64 (log.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))))","(-.f64 (log.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(-.f64 (+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 (neg.f64 x) #s(literal 1 binary64))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(-.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(-.f64 (log1p.f64 (neg.f64 (pow.f64 x #s(literal 4 binary64)))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 9 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 6 binary64))) (log.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (log1p.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x)))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (+.f64 (log.f64 #s(literal -1 binary64)) (log1p.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (log1p.f64 (neg.f64 (fma.f64 x x x))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(+.f64 (log.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))) (neg.f64 (log1p.f64 x)))","(+.f64 (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (neg.f64 (log1p.f64 (fma.f64 x x x))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (log.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (log.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (log.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 (log1p.f64 (fma.f64 x x x)) (-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (pow.f64 x #s(literal 3 binary64)))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) (log1p.f64 x))","(*.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (pow.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (neg.f64 (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 x))","(*.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (log1p.f64 x) (pow.f64 (/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 x) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 x) (/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (log1p.f64 x) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(pow.f64 (exp.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (log1p.f64 x)) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 (log1p.f64 x) #s(literal -1 binary64)))) (*.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 x)) (*.f64 (log1p.f64 x) (log1p.f64 (fma.f64 x x x)))) (pow.f64 (log1p.f64 x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (log1p.f64 x)) (pow.f64 (log1p.f64 x) #s(literal 2 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x))) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))) (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (log1p.f64 x)) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))))","(/.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)) (neg.f64 (log1p.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))) (neg.f64 (log1p.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (log1p.f64 x)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(/.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(/.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(/.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (log1p.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x))))","(/.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))","(/.f64 (log1p.f64 x) (log1p.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(fma.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (neg.f64 x) x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 x) x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -3 binary64)))) (+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (*.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (fma.f64 x x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 9 binary64)))) (-.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(fma.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 x) x #s(literal 1 binary64))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 (neg.f64 x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (fma.f64 x x x) (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) x))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 #s(literal -1 binary64) (*.f64 x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x x x)))","(+.f64 (pow.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal 1 binary64)))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 x (/.f64 x (-.f64 #s(literal 1 binary64) x)))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(+.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":288.791015625,"type":"rewrite"},{"compiler":[[13984,2124]],"memory":[[8255312,37721408]],"time":57.829833984375,"type":"eval"},{"alts":[["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))))))","fresh",61.726006969391534,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","next",61.76097578596237,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","fresh",60.360988072189784,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","next",60.60792238670173,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","fresh",61.43466050563488,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","next",0.2679102855831563,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","next",0.3364786621668704,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","fresh",0.5555079249976853,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","next",1.1400557671323823,"binary64"]],"compiler":[[17,13],[15,11],[7,6],[22,16],[22,17],[20,14],[17,12],[13,10],[11,9],[17,13],[15,11],[7,6],[22,16],[22,17],[20,14],[17,12],[13,10],[11,9]],"count":[[487,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[486,9],"picked":[1,0]}],"memory":[[-6636896,21229392]],"min-error":[[0.0,"binary64"]],"time":13.150146484375,"type":"prune"},{"egraph":[[0,8157,189,0.080269496],[6,4860,212,0.030688228],[5,2134,212,0.025187405],[4,892,216,0.010075329],[3,372,219,0.002760683],[2,163,231,0.001275809],[1,95,231,0.000655679],[0,61,231,0.000535895],[0,34,231,0.000363616]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)"]],"locations":[["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","cost-diff",2],["(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","cost-diff",3],["(log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","cost-diff",3],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","cost-diff",0],["(log.f64 (-.f64 #s(literal 1 binary64) x))","cost-diff",1],["(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","cost-diff",0],["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","cost-diff",0]],"memory":[[-12607136,32558032]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","#s(literal -1/2 binary64)","x","#s(literal -1 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (log1p.f64 (neg.f64 x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(log1p.f64 (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(log1p.f64 x)","(log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(neg.f64 (log1p.f64 x))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 x #s(literal 1 binary64))","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":270.306884765625,"type":"simplify"},{"compiler":[[209,37]],"locations":[["(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","accuracy",0.0078125],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","accuracy",0.02734375],["(log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","accuracy",58.92316622716164],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.927547803169574],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","accuracy",0.02734375],["(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","accuracy",0.03125],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.2657594702980528],["(log.f64 (-.f64 #s(literal 1 binary64) x))","accuracy",58.927547803169574],["(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","accuracy",0.3364786621668704],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","accuracy",1.1400557671323823],["(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.0],["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","accuracy",0.2679102855831563]],"memory":[[6146352,53763024]],"mixsample":[[11.46240234375,"ival-div",0],[24.91064453125,"adjust",800],[1.375732421875,"ival-sub",1600],[2.259765625,"ival-div",400],[0.166259765625,"ival-assert",0],[1.03955078125,"ival-div",1600],[0.00390625,"ival-neg",800],[4.115966796875,"ival-sub",0],[13.4736328125,"const",0],[3.515869140625,"ival-sub",400],[10.92431640625,"adjust",2000],[16.350341796875,"ival-add",0],[0.00390625,"ival-sub",800],[24.45654296875,"ival-mult",0],[0.48974609375,"ival-add",1600],[0.0078125,"ival-div",800],[1.2861328125,"ival-add",400],[87.930908203125,"ival-log",0],[0.30712890625,"ival-true",0],[0.172119140625,"ival-log",800],[2.61474609375,"ival-log1p",0],[0.005126953125,"ival-add",800],[0.729736328125,"exact",0],[3.576904296875,"ival-neg",0]],"outcomes":[[119.130126953125,1,"valid",149],[140.30810546875,2,"valid",98],[3.477294921875,0,"valid",9]],"time":301.218994140625,"type":"localize"},{"count":[[17,99]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(-.f64 #s(literal 1 binary64) x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))"]],"memory":[[-2367024,5223056]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","-1/2","(- (* -5/12 x) 1/2)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","1","(+ 1 (* -1 x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/3 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/4 x) 1/3)))) 1))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","1/3","(+ 1/3 (* -1/4 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1/2 (pow x 2))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(* -1/2 x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* x (- (/ 1 x) 1))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(log (/ 1 x))","(- (log (/ 1 x)) (/ 1 x))","(- (+ (log (/ 1 x)) (/ 1/2 (pow x 2))) (/ 1 x))","(- (+ (log (/ 1 x)) (/ 1/2 (pow x 2))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3)))))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(- (/ 1 x) (log (/ 1 x)))","(- (/ 1 x) (+ (log (/ 1 x)) (/ 1/2 (pow x 2))))","(- (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3)))) (+ (log (/ 1 x)) (/ 1/2 (pow x 2))))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (/ 1 (* x (log (/ 1 x))))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 3)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (/ 1 (* x (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2)))))))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 3)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 4)))) (+ (* -1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (/ 1 (log (/ 1 x)))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 3)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (/ 1/2 (* (pow x 3) (pow (log (/ 1 x)) 2))) (+ (/ 1 (* x (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (+ (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 3) (pow (log (/ 1 x)) 3))))))))))))))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (* x (- 1 (/ 1 x))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(+ (log -1) (log (/ -1 x)))","(- (+ (log -1) (log (/ -1 x))) (/ 1 x))","(+ (log -1) (+ (log (/ -1 x)) (* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))))","(+ (log -1) (+ (log (/ -1 x)) (* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (+ (log -1) (log (/ -1 x))))","(- (/ 1 x) (+ (log -1) (log (/ -1 x))))","(- (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x)) (+ (log -1) (log (/ -1 x))))","(- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x)) (+ (log -1) (log (/ -1 x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x))))","(- (+ (/ 1 (* x (+ (log -1) (log (/ -1 x))))) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x))))) (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))))","(+ (* -1 (/ (- (+ (* -1 (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))))) (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 3))))) (+ (* -1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (log (/ -1 x))))) (/ 1 (* x (pow (+ (log -1) (log (/ -1 x))) 2)))))) x)) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x)))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))))) (* -1 (/ (- (+ (* -1 (- (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 3))) (+ (* -1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))) (+ (* 1/2 (/ 1 (+ (log -1) (log (/ -1 x))))) (/ 1 (pow (+ (log -1) (log (/ -1 x))) 2)))))) (+ (* -1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 3)))) (+ (/ 1/3 (* x (+ (log -1) (log (/ -1 x))))) (+ (/ 1/2 (* x (pow (+ (log -1) (log (/ -1 x))) 2))) (/ 1 (* x (pow (+ (log -1) (log (/ -1 x))) 3))))))) (+ (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 4)))) (+ (* -1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))) (* 1/2 (/ (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2)))) (* x (+ (log -1) (log (/ -1 x))))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x)))))"]],"series":[[5.4091796875,"((/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (log (/ (- x 1) (+ (* x x) -1))) (/ (- x 1) (+ (* x x) -1)) (neg (log (/ (- x 1) (+ (* x x) -1)))) (+ (* -1/4 x) 1/3) (/ (log (- 1 x)) (neg (log (/ (- x 1) (+ (* x x) -1))))))","x","-inf"],[6.885986328125,"((/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (log (/ (- x 1) (+ (* x x) -1))) (/ (- x 1) (+ (* x x) -1)) (neg (log (/ (- x 1) (+ (* x x) -1)))) (+ (* -1/4 x) 1/3) (/ (log (- 1 x)) (neg (log (/ (- x 1) (+ (* x x) -1))))))","x","inf"],[2.652099609375,"((/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (+ (* (+ (* -5/12 x) -1/2) x) -1) (+ (* -5/12 x) -1/2) (/ (log (- 1 x)) (log (+ 1 x))) (/ (log (- 1 x)) (log (+ 1 x))) (+ (* (+ (* -1/2 x) -1) x) -1) (+ (* -1/2 x) -1) (log (- 1 x)) (/ (log (- 1 x)) (log (+ 1 x))) (- 1 x) (log (+ 1 x)) (log (/ (- x 1) (+ (* x x) -1))) (/ (- x 1) (+ (* x x) -1)) (neg (log (/ (- x 1) (+ (* x x) -1)))) (+ (* -1/4 x) 1/3) (/ (log (- 1 x)) (neg (log (/ (- x 1) (+ (* x x) -1))))))","x","0"]],"time":19.571044921875,"type":"series"},{"count":[[99,98]],"egraph":[[0,8218,1954,0.107737828],[2,4540,2007,0.031870849],[1,1343,2119,0.016364238],[0,428,2336,0.004560333]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","-1/2","(- (* -5/12 x) 1/2)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","1","(+ 1 (* -1 x))","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/3 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/4 x) 1/3)))) 1))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","1/3","(+ 1/3 (* -1/4 x))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1/2 (pow x 2))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(* -1/2 x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* x (- (/ 1 x) 1))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(log (/ 1 x))","(- (log (/ 1 x)) (/ 1 x))","(- (+ (log (/ 1 x)) (/ 1/2 (pow x 2))) (/ 1 x))","(- (+ (log (/ 1 x)) (/ 1/2 (pow x 2))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3)))))","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(- (/ 1 x) (log (/ 1 x)))","(- (/ 1 x) (+ (log (/ 1 x)) (/ 1/2 (pow x 2))))","(- (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3)))) (+ (log (/ 1 x)) (/ 1/2 (pow x 2))))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (/ 1 (* x (log (/ 1 x))))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 3)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (/ 1 (* x (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2)))))))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 3)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 4)))) (+ (* -1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (/ 1 (log (/ 1 x)))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 3)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (/ 1/2 (* (pow x 3) (pow (log (/ 1 x)) 2))) (+ (/ 1 (* x (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (+ (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 3) (pow (log (/ 1 x)) 3))))))))))))))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* -1 (* x (- 1 (/ 1 x))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(+ (log -1) (log (/ -1 x)))","(- (+ (log -1) (log (/ -1 x))) (/ 1 x))","(+ (log -1) (+ (log (/ -1 x)) (* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))))","(+ (log -1) (+ (log (/ -1 x)) (* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (+ (log -1) (log (/ -1 x))))","(- (/ 1 x) (+ (log -1) (log (/ -1 x))))","(- (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x)) (+ (log -1) (log (/ -1 x))))","(- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x)) (+ (log -1) (log (/ -1 x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x))))","(- (+ (/ 1 (* x (+ (log -1) (log (/ -1 x))))) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x))))) (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))))","(+ (* -1 (/ (- (+ (* -1 (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))))) (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 3))))) (+ (* -1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (log (/ -1 x))))) (/ 1 (* x (pow (+ (log -1) (log (/ -1 x))) 2)))))) x)) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x)))))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))))) (* -1 (/ (- (+ (* -1 (- (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 3))) (+ (* -1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))) (+ (* 1/2 (/ 1 (+ (log -1) (log (/ -1 x))))) (/ 1 (pow (+ (log -1) (log (/ -1 x))) 2)))))) (+ (* -1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 3)))) (+ (/ 1/3 (* x (+ (log -1) (log (/ -1 x))))) (+ (/ 1/2 (* x (pow (+ (log -1) (log (/ -1 x))) 2))) (/ 1 (* x (pow (+ (log -1) (log (/ -1 x))) 3))))))) (+ (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 4)))) (+ (* -1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))) (* 1/2 (/ (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2)))) (* x (+ (log -1) (log (/ -1 x))))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x)))))"]],"memory":[[5029776,46778416]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -5/12 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -5/12 x) 1/2)","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/3 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/4 x) 1/3)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(fma.f64 (fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64)) x #s(literal 1 binary64))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/4 x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(+.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) (neg.f64 (log.f64 x))) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x))))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 x x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) (neg.f64 (log.f64 x))) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (+.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x))))) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (*.f64 x x))) (/.f64 (-.f64 (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) #s(literal 1/2 binary64) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 #s(literal -1 binary64)) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)))))) (/.f64 #s(literal 1/2 binary64) (log.f64 x))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (log.f64 x)))))","(* -5/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -5/12 binary64))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x x))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 5/12 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -5/12 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -5/12 binary64))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) x)","(* -5/12 x)","(*.f64 #s(literal -5/12 binary64) x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(* -1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/2 binary64))","(* -1 (* (pow x 2) (+ 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2))","(*.f64 (*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) x)","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(* -1 (* x (+ 1/2 (/ 1 x))))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)))","(log (/ 1 x))","(neg.f64 (log.f64 x))","(- (log (/ 1 x)) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 x))","(- (+ (log (/ 1 x)) (/ 1/2 (pow x 2))) (/ 1 x))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x) (log.f64 x))","(- (+ (log (/ 1 x)) (/ 1/2 (pow x 2))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3)))))","(-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x) (log.f64 x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (+.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(- (/ 1 x) (log (/ 1 x)))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (/ 1 x) (+ (log (/ 1 x)) (/ 1/2 (pow x 2))))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3)))) (+ (log (/ 1 x)) (/ 1/2 (pow x 2))))","(+.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)))","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/4 binary64)) x)","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (/ 1 (* x (log (/ 1 x))))))","(+.f64 (/.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 1 binary64) (log.f64 x))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 3)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (/ 1 (* x (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2)))))))))","(+.f64 (-.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) x) (*.f64 (log.f64 x) (log.f64 x)))) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) x) x) (+.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64))))) (-.f64 (+.f64 (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) (neg.f64 (log.f64 x)))) (/.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x)))))","(+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* x (pow (log (/ 1 x)) 2)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 3)))) (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 4)))) (+ (* -1/2 (/ (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))) (/ 1 (log (/ 1 x)))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 3)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (/ 1/2 (* (pow x 3) (pow (log (/ 1 x)) 2))) (+ (/ 1 (* x (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (+ (/ 1 (* (pow x 2) (pow (log (/ 1 x)) 2))) (/ 1 (* (pow x 3) (pow (log (/ 1 x)) 3))))))))))))))))","(+.f64 (+.f64 (-.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) x) (*.f64 (log.f64 x) (log.f64 x)))) (-.f64 (/.f64 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) x) x) (pow.f64 (log.f64 x) #s(literal 3 binary64))) (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (neg.f64 (log.f64 x)) #s(literal 4 binary64))))) (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 (neg.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 #s(literal 1 binary64) (log.f64 x))) (neg.f64 (log.f64 x))) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (+.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x)) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (-.f64 (+.f64 (-.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (pow.f64 (log.f64 x) #s(literal 3 binary64)))) (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x) (neg.f64 (log.f64 x)))) (/.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x)))))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 #s(literal 1/3 binary64) (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (+.f64 #s(literal 5/12 binary64) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x #s(literal 1/2 binary64)))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(*.f64 (neg.f64 (-.f64 #s(literal 5/12 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(+ (log -1) (log (/ -1 x)))","(+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (log (/ -1 x))) (/ 1 x))","(-.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (log (/ -1 x)) (* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x))","(+ (log -1) (+ (log (/ -1 x)) (* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 1/3 (/ 1 x))) x))) x))))","(-.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal -1 binary64) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x)) (neg.f64 x))","(* -1 (+ (log -1) (log (/ -1 x))))","(neg.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))))","(- (/ 1 x) (+ (log -1) (log (/ -1 x))))","(-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(- (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x)) (+ (log -1) (log (/ -1 x))))","(-.f64 (-.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(- (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x)) (+ (log -1) (log (/ -1 x))))","(-.f64 (-.f64 (/.f64 (+.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) #s(literal 1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) x) #s(literal -1 binary64) #s(literal -1/4 binary64)) x)","(/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x))))","(/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))))","(- (+ (/ 1 (* x (+ (log -1) (log (/ -1 x))))) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x))))) (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))))","(+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))) (/.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))))) x))","(+ (* -1 (/ (- (+ (* -1 (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))))) (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 3))))) (+ (* -1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (log (/ -1 x))))) (/ 1 (* x (pow (+ (log -1) (log (/ -1 x))) 2)))))) x)) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x)))))","(-.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))) (/.f64 (-.f64 (fma.f64 (/.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))) #s(literal -1/2 binary64)) (neg.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) x) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))))))) (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))))) x))","(+ (* -1 (/ (+ (* -1 (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))))) (* -1 (/ (- (+ (* -1 (- (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 3))) (+ (* -1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2))) (+ (* 1/2 (/ 1 (+ (log -1) (log (/ -1 x))))) (/ 1 (pow (+ (log -1) (log (/ -1 x))) 2)))))) (+ (* -1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 3)))) (+ (/ 1/3 (* x (+ (log -1) (log (/ -1 x))))) (+ (/ 1/2 (* x (pow (+ (log -1) (log (/ -1 x))) 2))) (/ 1 (* x (pow (+ (log -1) (log (/ -1 x))) 3))))))) (+ (* -1 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 4)))) (+ (* -1/3 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (log (/ -1 x))) 2)))) (* 1/2 (/ (- (/ 1 (+ (log -1) (log (/ -1 x)))) (* -1 (/ (log (/ -1 x)) (pow (+ (log -1) (log (/ -1 x))) 2)))) (* x (+ (log -1) (log (/ -1 x))))))))) x))) x)) (/ (log (/ -1 x)) (+ (log -1) (log (/ -1 x)))))","(+.f64 (/.f64 (+.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (fma.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))) (+.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))) #s(literal 1/3 binary64)) (/.f64 (/.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 3 binary64))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))) #s(literal 1/2 binary64)) (neg.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) x) (+.f64 (/.f64 #s(literal -1/3 binary64) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 4 binary64)))) (*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 3 binary64)))) x) #s(literal 1/2 binary64)))) x) (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (+.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (log.f64 #s(literal -1 binary64)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":300.73095703125,"type":"simplify"},{"count":[[17,560]],"egraph":[[0,8514,131,0.080475014],[2,1846,153,0.032513049],[1,251,153,0.007477729],[0,61,172,0.001874648],[0,34,172,0.000357269]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(-.f64 #s(literal 1 binary64) x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))"]],"memory":[[-5770288,63409600]],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x))","(*.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 25/144 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 25/144 binary64) (*.f64 x x))) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)))","(/.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (*.f64 x #s(literal 5/24 binary64)))))","(/.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))) (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 25/144 binary64) (*.f64 x x)) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal -5/12 binary64) x #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal -5/12 binary64) x) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -5/12 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64) #s(literal -1 binary64))))","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal -1/2 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 #s(literal -1/2 binary64) x))","(log1p.f64 (neg.f64 x))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)) (*.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(neg.f64 (log.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(-.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log.f64 (-.f64 #s(literal 1 binary64) (neg.f64 x))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 (log.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (log.f64 (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(+.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (log1p.f64 (neg.f64 x)))","(+.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (log1p.f64 (neg.f64 x)))","(*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (pow.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (log1p.f64 (neg.f64 x)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(pow.f64 (/.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (log1p.f64 (neg.f64 x))))) (neg.f64 (neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))))","(/.f64 (*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (neg.f64 (log1p.f64 (neg.f64 x)))) (neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (log1p.f64 (neg.f64 x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x))))","(neg.f64 (/.f64 (neg.f64 (log1p.f64 (neg.f64 x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(-.f64 (/.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (log1p.f64 x) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (log1p.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x))) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))) (*.f64 x x))) (*.f64 (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 x x))) (*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 x x))) (*.f64 (neg.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x x))) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(neg.f64 (-.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (neg.f64 x))) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (neg.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (neg.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 x x) (neg.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 #s(literal -1 binary64) (log1p.f64 x))","(*.f64 #s(literal 1 binary64) (neg.f64 (log1p.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (*.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (log1p.f64 x) (log1p.f64 x)) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))))))","(/.f64 (+.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))))))","(neg.f64 (log.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(neg.f64 (log1p.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))) (/.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))))) (/.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))))))","(-.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))) (log1p.f64 x))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))) (log.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (log.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)))) (log.f64 (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -3 binary64)))) (log.f64 (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (log.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))) (log.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))))","(-.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (log1p.f64 x))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(+.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (log.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64)))))","(+.f64 (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (log1p.f64 (neg.f64 x)) (log.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))))","(log.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 (neg.f64 x) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64))) (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 x (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 x x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(+.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(log1p.f64 x)","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 (neg.f64 x)) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))))","(/.f64 (+.f64 (pow.f64 (-.f64 #s(literal 0 binary64) (log.f64 (-.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal 0 binary64) (log.f64 (-.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 0 binary64) (log.f64 (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (-.f64 #s(literal 0 binary64) (log.f64 (-.f64 x #s(literal 1 binary64)))) (log.f64 (fma.f64 x x #s(literal -1 binary64)))))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (log1p.f64 x) (log1p.f64 x)) (*.f64 #s(literal 0 binary64) (log1p.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 (log1p.f64 x) (log1p.f64 x)))) (log1p.f64 x))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (log1p.f64 x) (log1p.f64 x))) (neg.f64 (log1p.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))))))","(neg.f64 (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(neg.f64 (log.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(neg.f64 (neg.f64 (log1p.f64 x)))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (log1p.f64 (neg.f64 x)) (log1p.f64 (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))))) (/.f64 (pow.f64 (neg.f64 (log1p.f64 x)) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (*.f64 (log1p.f64 x) (log1p.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (log.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))))","(-.f64 (log.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (log.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 x x) #s(literal -1 binary64))))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (neg.f64 x)))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 (log.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(+.f64 (log.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (log1p.f64 x))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))","(+.f64 (-.f64 #s(literal 0 binary64) (log.f64 (-.f64 x #s(literal 1 binary64)))) (log.f64 (fma.f64 x x #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 (neg.f64 x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (log1p.f64 (*.f64 (neg.f64 x) x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(+.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 x) (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(+.f64 (log1p.f64 x) #s(literal 0 binary64))","(log.f64 (+.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal -1/12 binary64)))))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(fma.f64 x #s(literal -1/4 binary64) #s(literal 1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(+.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))","(*.f64 (/.f64 (log1p.f64 (neg.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 (neg.f64 x)))","(*.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (log1p.f64 (neg.f64 x)) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))","(pow.f64 (/.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))) (*.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) #s(literal -1 binary64))) (log1p.f64 x))","(/.f64 (neg.f64 (*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64))) (neg.f64 (log1p.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (log1p.f64 (neg.f64 x))))) (neg.f64 (log1p.f64 x)))","(/.f64 (/.f64 (log1p.f64 (neg.f64 x)) #s(literal -1 binary64)) (neg.f64 (log1p.f64 x)))","(/.f64 (*.f64 (log1p.f64 (neg.f64 x)) #s(literal 1 binary64)) (log1p.f64 x))","(/.f64 (neg.f64 (neg.f64 (log1p.f64 (neg.f64 x)))) (log1p.f64 x))","(/.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (neg.f64 (log1p.f64 x)))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))))","(neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (log1p.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x)))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":254.10400390625,"type":"rewrite"},{"compiler":[[24564,3247]],"memory":[[7931280,69569328]],"time":108.080078125,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","next",0.0234375,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","next",0.2487553413340238,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.2679102855831563,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.3364786621668704,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","next",0.5555079249976853,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","next",0.2679102855798826,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.1400557671323823,"binary64"]],"compiler":[[6,5],[35,23],[20,14],[17,12],[13,10],[21,15],[11,9]],"count":[[790,7]],"kept":[{"done":[0,0],"fresh":[4,1],"new":[781,3],"picked":[5,3]}],"memory":[[-8886464,30117056]],"min-error":[[0.0,"binary64"]],"time":53.64599609375,"type":"prune"},{"egraph":[[0,8032,216,0.075662599],[9,7772,218,0.010303736],[8,7163,218,0.017391725],[7,5942,218,0.021552406],[6,4823,218,0.021957617],[5,2648,218,0.017369139],[4,1100,218,0.011988258],[3,412,218,0.003309399],[2,154,218,0.001271948],[1,89,218,0.000667084],[0,62,218,0.000543414],[0,35,222,0.000587988]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","#s(literal 1 binary64)","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(log1p.f64 x)"]],"locations":[["(log1p.f64 x)","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(log1p.f64 (neg.f64 x))","cost-diff",0],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","cost-diff",0],["(-.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","cost-diff",0],["(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","cost-diff",1]],"memory":[[6747040,28295152]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(literal -5/12 binary64)","x","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal -1/3 binary64)","#s(literal -1/2 binary64)","#s(literal -1 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal 1/3 binary64)","#s(literal 1 binary64)","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","x","(log1p.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":261.02197265625,"type":"simplify"},{"compiler":[[197,37]],"locations":[["(neg.f64 x)","accuracy",0.0],["(log1p.f64 (neg.f64 x))","accuracy",0.0],["(log1p.f64 x)","accuracy",0.00390625],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","accuracy",0.02734375],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","accuracy",0.02734375],["(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","accuracy",0.03125],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.2657594702980528],["#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",0.2665754894356406],["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","accuracy",0.5555079249976853],["(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","accuracy",0.0],["(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","accuracy",0.00390625],["(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","accuracy",0.00390625],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","accuracy",0.2679102855831563]],"memory":[[673424,52172080]],"mixsample":[[6.701416015625,"ival-div",0],[52.451904296875,"adjust",800],[19.170166015625,"ival-add",0],[27.985595703125,"ival-mult",0],[0.71044921875,"ival-sub",1600],[0.14306640625,"ival-assert",0],[3.2958984375,"ival-sub",0],[0.234130859375,"ival-true",0],[42.063232421875,"ival-log",0],[4.29541015625,"ival-log1p",0],[16.789794921875,"const",0],[1.982421875,"ival-sub",400],[0.58203125,"exact",0],[8.628173828125,"adjust",2000],[1.273681640625,"ival-neg",0]],"outcomes":[[125.67919921875,1,"valid",149],[96.12939453125,2,"valid",98],[2.894775390625,0,"valid",9]],"time":255.14404296875,"type":"localize"},{"count":[[17,71]],"inputs":[["(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(log1p.f64 x)","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))"]],"memory":[[-4470736,3170064]],"outputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* x (- (* -1/3 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","-1/2","(- (* -5/12 x) 1/2)","1/3","(+ 1/3 (* -1/4 x))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -1 (* x (+ 1 (/ 1 x))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 (pow x 3))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))"]],"series":[[2.071044921875,"((+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) (+ (* (+ (* -5/12 x) -1/2) x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (/ (log (+ 1 (neg x))) (log (+ 1 x))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)) (+ (* -5/12 x) -1/2) (log (+ 1 x)) (+ (* -1/4 x) 1/3))","x","-inf"],[2.053955078125,"((+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) (+ (* (+ (* -5/12 x) -1/2) x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (/ (log (+ 1 (neg x))) (log (+ 1 x))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)) (+ (* -5/12 x) -1/2) (log (+ 1 x)) (+ (* -1/4 x) 1/3))","x","inf"],[1.032958984375,"((+ (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (* (+ (* (+ (* -5/12 x) -1/2) x) -1) x) (+ (* (+ (* -5/12 x) -1/2) x) -1) (/ (log (- 1 x)) (log (+ 1 x))) (- -1 x) (/ (log (- 1 x)) (log (+ 1 x))) (log (- 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x) (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) (/ (log (+ 1 (neg x))) (log (+ 1 x))) (log (+ 1 (neg x))) (neg x) (log (+ 1 x)) (+ (* -5/12 x) -1/2) (log (+ 1 x)) (+ (* -1/4 x) 1/3))","x","0"]],"time":8.448974609375,"type":"series"},{"count":[[71,70]],"egraph":[[0,8255,1155,0.11034375],[2,3055,1198,0.030452487],[1,892,1273,0.012053415],[0,285,1408,0.00309398]],"inputs":[["-1","(- (* -1 x) 1)","(- (* x (- (* -1/2 x) 1)) 1)","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(- (* -1/2 x) 1)","(- (* x (- (* -5/12 x) 1/2)) 1)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(- (* x (- (* -1/3 x) 1/2)) 1)","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","-1/2","(- (* -5/12 x) 1/2)","1/3","(+ 1/3 (* -1/4 x))","(* -5/12 (pow x 3))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(* -5/12 (pow x 2))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(* -1 (* x (+ 1 (/ 1 x))))","(+ (log -1) (* -1 (log (/ 1 x))))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(* -1/4 (pow x 4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1/4 (pow x 3))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -5/12 x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(* -1 (log (/ -1 x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))"]],"memory":[[2057296,53200176]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1/2 x) 1)) 1)","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -5/12 x) 1/2)) 1)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -5/12 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(- (* -1/2 x) 1)","(fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64))","(- (* x (- (* -5/12 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(- (* x (- (* -1/3 x) 1/2)) 1)","(fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","-1/2","#s(literal -1/2 binary64)","(- (* -5/12 x) 1/2)","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/4 x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* -5/12 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -5/12 binary64))","(* -1 (* (pow x 3) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x x))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 5/12 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x))))","(/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (/ 2 (* x (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))","(+.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) x) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x)))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (/ (log -1) (* x (pow (log (/ 1 x)) 2))))))","(-.f64 (+.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (-.f64 (-.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (fma.f64 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 x x)) (log.f64 x)) (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x)) (log.f64 x))))) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x))))","(- (+ (* -1 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (log (/ 1 x)))) (+ (/ 1/3 (* (pow x 3) (log (/ 1 x)))) (+ (* 1/2 (/ 1 (* (pow x 2) (log (/ 1 x))))) (/ 2 (* x (log (/ 1 x))))))) (+ (* -1 (/ (- (* 1/2 (/ 1 (log (/ 1 x)))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (log (/ 1 x)))) (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (pow (log (/ 1 x)) 2))))) (* (pow x 3) (log (/ 1 x))))) (+ (* -1 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 2) (log (/ 1 x))))) (+ (* -1/2 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 2) (pow (log (/ 1 x)) 2)))) (+ (* 1/3 (/ (+ (log -1) (* -1 (log (/ 1 x)))) (* (pow x 3) (pow (log (/ 1 x)) 2)))) (+ (* 1/2 (/ (- (* 2 (/ 1 (log (/ 1 x)))) (/ (log -1) (pow (log (/ 1 x)) 2))) (* (pow x 3) (log (/ 1 x))))) (/ (log -1) (* x (pow (log (/ 1 x)) 2)))))))))","(-.f64 (-.f64 (+.f64 (-.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 x x)) (/.f64 (/.f64 #s(literal 2 binary64) x) (log.f64 x))) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x))) (/.f64 (/.f64 #s(literal 1/3 binary64) (pow.f64 x #s(literal 3 binary64))) (log.f64 x))) (fma.f64 (/.f64 #s(literal 1 binary64) (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (fma.f64 (/.f64 #s(literal -1/2 binary64) (log.f64 x)) (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (log.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (-.f64 (/.f64 #s(literal -2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x))) (fma.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (log.f64 x)) (/.f64 (log.f64 #s(literal -1 binary64)) (*.f64 (log.f64 x) (log.f64 x)))) (log.f64 x)) (fma.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x) (/.f64 (/.f64 (log.f64 #s(literal -1 binary64)) x) (*.f64 (log.f64 x) (log.f64 x)))))))","(* -5/12 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -5/12 binary64))","(* -1 (* (pow x 2) (+ 5/12 (* 1/2 (/ 1 x)))))","(*.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x)","(* (pow x 2) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 5/12))","(*.f64 (*.f64 (-.f64 #s(literal -5/12 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) x)","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(+ (log -1) (* -1 (log (/ 1 x))))","(+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64)))","(- (+ (log -1) (* -1 (log (/ 1 x)))) (/ 1 x))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x))))","(-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (log -1) (+ (* -1 (log (/ 1 x))) (* -1 (/ (+ 1/2 (* 1/3 (/ 1 x))) (pow x 2))))) (/ 1 x))","(-.f64 (-.f64 (+.f64 (log.f64 x) (log.f64 #s(literal -1 binary64))) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x)) (/.f64 #s(literal 1 binary64) x))","(* -1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1/4 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/4 binary64))","(* -1 (* (pow x 3) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 #s(literal 1/3 binary64) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(+.f64 (+.f64 (log.f64 x) (/.f64 #s(literal 1 binary64) x)) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x) x))","(* -5/12 x)","(*.f64 #s(literal -5/12 binary64) x)","(* -1 (* x (+ 5/12 (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/4 binary64)) x)","(* -1 (* (pow x 3) (+ 5/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2))))))","(*.f64 (*.f64 (neg.f64 x) x) (fma.f64 (+.f64 #s(literal 5/12 binary64) (/.f64 (/.f64 #s(literal 1 binary64) x) x)) x #s(literal 1/2 binary64)))","(* -1 (* (pow x 3) (+ 5/12 (* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1/2) x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 5/12 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x))))))","(/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x))) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) x))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* x (+ (log -1) (* -1 (log (/ -1 x))))))) (+ (* 1/2 (/ (log (/ -1 x)) (* x (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))) (+ (/ 1/2 (* x (+ (log -1) (* -1 (log (/ -1 x)))))) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (-.f64 (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) x)) (neg.f64 x)) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(+ (* -1 (/ (log (/ -1 x)) (+ (log -1) (* -1 (log (/ -1 x)))))) (* -1 (/ (- (+ (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* -1/2 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/3 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (* 1/2 (/ 1 (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 3)))))))) x)) (+ (* -1 (/ (- (/ 1 (+ (log -1) (* -1 (log (/ -1 x))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) (+ (log -1) (* -1 (log (/ -1 x)))))) (+ (* 1/2 (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (* 1/2 (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2)))))) x)) (/ 1 (+ (log -1) (* -1 (log (/ -1 x)))))) (/ (log (/ -1 x)) (pow (+ (log -1) (* -1 (log (/ -1 x)))) 2))) x)))","(-.f64 (/.f64 (-.f64 (/.f64 (-.f64 (fma.f64 (+.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) #s(literal -1/2 binary64) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))))) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))))) (fma.f64 (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64)))))) x)) x) (-.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) #s(literal 2 binary64))))) x) (/.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))))","(* -1 (log (/ -1 x)))","(neg.f64 (log.f64 (/.f64 #s(literal -1 binary64) x)))","(- (* -1 (log (/ -1 x))) (/ 1 x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (* 1/2 (/ 1 x))) x)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) x) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (* -1 (log (/ -1 x))) (* -1 (/ (+ 1 (+ (/ 1/3 (pow x 2)) (* 1/2 (/ 1 x)))) x)))","(-.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (neg.f64 x)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1/3 binary64)) (/.f64 #s(literal 1/2 binary64) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (+ 1/4 (+ (/ 1/2 (pow x 2)) (* 1/3 (/ 1 x))))))","(*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) #s(literal 1/4 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ 1/4 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/3) x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(+ (log -1) (* -1 (log (/ -1 x))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) (log.f64 (/.f64 #s(literal -1 binary64) x))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) x))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/3 binary64) x) #s(literal -1 binary64) #s(literal -1/4 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":319.659912109375,"type":"simplify"},{"count":[[17,469]],"egraph":[[0,8994,156,0.075467123],[2,1730,158,0.034491807],[1,242,165,0.006415727],[0,62,165,0.00181565],[0,35,168,0.000366754]],"inputs":[["(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(log1p.f64 (neg.f64 x))","(neg.f64 x)","(log1p.f64 x)","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))"]],"memory":[[7621440,54731552]],"outputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x (neg.f64 x))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (pow.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(fma.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x))))","(fma.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(-.f64 (neg.f64 x) #s(literal 1 binary64))","(-.f64 #s(literal -1 binary64) (neg.f64 x))","(-.f64 #s(literal -1 binary64) x)","(-.f64 x #s(literal 1 binary64))","(+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal -1 binary64) x))))","(+.f64 (/.f64 #s(literal -1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 x))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(*.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x (neg.f64 x))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x))) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) x) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (*.f64 x #s(literal -1/2 binary64)))) (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (pow.f64 (+.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) (*.f64 x #s(literal -1/2 binary64)))) (pow.f64 (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (log1p.f64 x) #s(literal -1 binary64)) (log1p.f64 x))","(*.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(*.f64 (neg.f64 (log1p.f64 x)) (/.f64 #s(literal -1 binary64) (log1p.f64 x)))","(*.f64 (log1p.f64 x) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (log1p.f64 x)) (neg.f64 (log1p.f64 x)))","(/.f64 (log1p.f64 x) (log1p.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))","(neg.f64 (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x))) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 x)) (/.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)) (/.f64 (log1p.f64 x) (log1p.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (log1p.f64 x)) (log1p.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (neg.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 #s(literal -1 binary64) x)","(*.f64 x #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 x) x) x)","(/.f64 (*.f64 x x) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (*.f64 x x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 x x)) (neg.f64 x))","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(*.f64 (log1p.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (log1p.f64 x)))","(log1p.f64 (neg.f64 x))","(log1p.f64 x)","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 x x x)) (log1p.f64 (fma.f64 x x x)) (*.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 x) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 (*.f64 (neg.f64 x) x)) (fma.f64 (log1p.f64 x) (log1p.f64 x) (*.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x)))))","(/.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64))","(/.f64 (log1p.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 (log1p.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (log1p.f64 x)))","(-.f64 (/.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) #s(literal 1 binary64)) (log1p.f64 x))","(-.f64 (/.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (log1p.f64 (fma.f64 x x x)) #s(literal 1 binary64)))","(-.f64 (log.f64 (fma.f64 x x #s(literal -1 binary64))) (log.f64 (-.f64 #s(literal -1 binary64) x)))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log.f64 (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))))","(-.f64 (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (log.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(-.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log1p.f64 (fma.f64 x x x)))","(-.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (log1p.f64 x))","(-.f64 #s(literal 0 binary64) (neg.f64 (log1p.f64 x)))","(+.f64 (log.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (log1p.f64 (fma.f64 x x x)))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 x x x))))","(+.f64 (log1p.f64 (pow.f64 x #s(literal 3 binary64))) (log.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (*.f64 (neg.f64 x) x)) (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (log1p.f64 x))","(log.f64 (-.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))))","(*.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (*.f64 x #s(literal 5/24 binary64))))))","(*.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64))))))","(/.f64 (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (*.f64 x #s(literal 5/24 binary64)))))","(/.f64 (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 25/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 5/24 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64))) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (*.f64 x #s(literal 5/24 binary64)))) (fma.f64 #s(literal -125/1728 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64)))))","(fma.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)))))","(fma.f64 x #s(literal -5/12 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))) (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 x #s(literal -5/12 binary64) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 x #s(literal -5/12 binary64)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 x #s(literal -5/12 binary64)))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (+.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal -1/12 binary64))))))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (+.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (+.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal -1/12 binary64)))))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (+.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (*.f64 x #s(literal -1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal -1/4 binary64) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) x) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 x (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal -1/4 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 x (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) x) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(fma.f64 x #s(literal -1/4 binary64) #s(literal 1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (+.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))) (/.f64 #s(literal -1/27 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (+.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":233.47509765625,"type":"rewrite"},{"compiler":[[18702,2350]],"memory":[[408256,57192160]],"time":83.175048828125,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.0234375,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","done",0.2487553413340238,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","next",0.2542828313148852,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.2679102855831563,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.3364786621668704,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.5555079249976853,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","done",0.2679102855798826,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.1400557671323823,"binary64"]],"compiler":[[6,5],[35,23],[37,22],[20,14],[17,12],[13,10],[21,15],[11,9]],"count":[[517,8]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[510,1],"picked":[4,4]}],"memory":[[-11154592,20694048]],"min-error":[[0.0,"binary64"]],"time":42.1240234375,"type":"prune"},{"egraph":[[0,8498,165,0.115077365],[18,7188,177,0.026926706],[17,7188,177,0.048593231],[16,7168,177,0.042956949],[15,7165,177,0.045474429],[14,6922,177,0.034935313],[13,6906,177,0.016447422],[12,6863,177,0.014991032],[11,6691,177,0.015865548],[10,5969,177,0.019567171],[9,5081,177,0.020426385],[8,4206,177,0.019840839],[7,2611,177,0.014292983],[6,1934,177,0.009818377],[5,1567,177,0.008112061],[4,738,177,0.005356408],[3,279,177,0.002333918],[2,101,177,0.000811303],[1,54,179,0.000422293],[0,36,179,0.000367194],[0,21,179,0.000251488]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(literal 1 binary64)","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/3 binary64)","#s(literal -1 binary64)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","cost-diff",2]],"memory":[[4282688,44782352]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(literal 1 binary64)","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","#s(literal -1/4 binary64)","x","#s(literal 1/3 binary64)","#s(literal -1/2 binary64)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))","#s(literal -1/3 binary64)","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":672.794921875,"type":"simplify"},{"compiler":[[121,25]],"locations":[["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","accuracy",0.015625],["(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","accuracy",0.03125],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.2657594702980528],["#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",61.554245811691]],"memory":[[-4668304,21478608]],"mixsample":[[3.544921875,"ival-div",0],[0.174072265625,"ival-true",0],[6.94482421875,"ival-add",0],[3.02001953125,"ival-log1p",0],[12.01904296875,"ival-mult",0],[6.28271484375,"const",0],[0.495361328125,"exact",0],[0.116455078125,"ival-assert",0]],"outcomes":[[44.295166015625,0,"valid",256]],"time":60.947998046875,"type":"localize"},{"count":[[7,32]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)"]],"memory":[[1218992,1218992]],"outputs":[["1","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","1/3","(+ 1/3 (* -1/4 x))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1/4 (pow x 4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) 1/4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) (+ 1/4 (/ 1/2 (pow x 2)))))","(* (pow x 4) (- (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 3))) (+ 1/4 (/ 1/2 (pow x 2)))))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* (pow x 4) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/3) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/3) x)) 1/4))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))"]],"series":[[0.72021484375,"((/ 1 (/ (log (+ 1 x)) (log (+ 1 x)))) (/ (log (+ 1 x)) (log (+ 1 x))) (log (+ 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (log (+ 1 x)) (+ (* -1/4 x) 1/3) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x))","x","-inf"],[0.70703125,"((/ 1 (/ (log (+ 1 x)) (log (+ 1 x)))) (/ (log (+ 1 x)) (log (+ 1 x))) (log (+ 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (log (+ 1 x)) (+ (* -1/4 x) 1/3) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x))","x","inf"],[0.6279296875,"((/ 1 (/ (log (+ 1 x)) (log (+ 1 x)))) (/ (log (+ 1 x)) (log (+ 1 x))) (log (+ 1 x)) (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (log (+ 1 x)) (+ (* -1/4 x) 1/3) (* (+ (* (+ (* (+ (* -1/4 x) -1/3) x) -1/2) x) -1) x))","x","0"]],"time":2.5830078125,"type":"series"},{"count":[[32,31]],"egraph":[[0,8247,284,0.082910539],[5,7899,299,0.019349594],[4,5537,299,0.03727181],[3,2311,307,0.035162182],[2,817,313,0.008659137],[1,331,328,0.004169897],[0,123,344,0.002028565]],"inputs":[["1","x","(* x (+ 1 (* -1/2 x)))","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","1/3","(+ 1/3 (* -1/4 x))","(* -1 x)","(* x (- (* -1/2 x) 1))","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(* -1 (log (/ 1 x)))","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(* -1/4 (pow x 4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) 1/4))","(* (pow x 4) (- (* 1/3 (/ 1 x)) (+ 1/4 (/ 1/2 (pow x 2)))))","(* (pow x 4) (- (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 3))) (+ 1/4 (/ 1/2 (pow x 2)))))","(* -1/4 x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(+ (log -1) (* -1 (log (/ -1 x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(* (pow x 4) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/3) x)) 1/4))","(* (pow x 4) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/3) x)) 1/4))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))"]],"memory":[[7448816,28596992]],"method":["egg-herbie"],"outputs":[["1","#s(literal 1 binary64)","x","(* x (+ 1 (* -1/2 x)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* 1/3 x) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (- (* x (+ 1/3 (* -1/4 x))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* -1/4 x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (* -1/2 x) 1))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* -1/3 x) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/3 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (- (* -1/4 x) 1/3)) 1/2)) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(* -1 (log (/ 1 x)))","(log.f64 x)","(+ (* -1 (log (/ 1 x))) (/ 1 x))","(-.f64 (log.f64 x) (/.f64 #s(literal -1 binary64) x))","(- (+ (* -1 (log (/ 1 x))) (/ 1 x)) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(- (+ (* -1 (log (/ 1 x))) (+ (/ 1 x) (* 1/3 (/ 1 (pow x 3))))) (/ 1/2 (pow x 2)))","(-.f64 (log.f64 x) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* -1/4 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/4 binary64))","(* (pow x 4) (- (* 1/3 (/ 1 x)) 1/4))","(*.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* 1/3 (/ 1 x)) (+ 1/4 (/ 1/2 (pow x 2)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ (* 1/3 (/ 1 x)) (/ 1 (pow x 3))) (+ 1/4 (/ 1/2 (pow x 2)))))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1/4 x)","(*.f64 #s(literal -1/4 binary64) x)","(* x (- (* 1/3 (/ 1 x)) 1/4))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* -1 (* (pow x 4) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 #s(literal -1/3 binary64) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (* 1/2 (/ 1 x))) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal -1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 2))) (+ 1/4 (* 1/3 (/ 1 x)))))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))","(+ (log -1) (* -1 (log (/ -1 x))))","(+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (/ 1 x)))","(-.f64 (+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))))","(-.f64 (+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x))","(+ (log -1) (+ (* -1 (log (/ -1 x))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 x)) 1/2) x)) 1) x))))","(-.f64 (+.f64 (log.f64 (neg.f64 x)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) x) #s(literal 1/2 binary64)) x)) x))","(* (pow x 4) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/3) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/3 binary64)) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/3) x)) 1/4))","(*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* x (- 1/4 (* 1/3 (/ 1 x)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(* (pow x 4) (- (* -1 (/ (+ 1/3 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/4))","(*.f64 (-.f64 (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) x)) x) #s(literal 1/4 binary64)) (pow.f64 x #s(literal 4 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":315.550048828125,"type":"simplify"},{"count":[[7,201]],"egraph":[[0,8350,120,0.12855714],[2,1056,132,0.043946383],[1,151,132,0.006939565],[0,36,134,0.002339417],[0,21,134,0.000519417]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)"]],"memory":[[-3650272,48241968]],"outputs":[["(*.f64 (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (pow.f64 (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64)) (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(*.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1 binary64))","(*.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(pow.f64 (exp.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1 binary64))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))) #s(literal -1 binary64))","(/.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1 binary64))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal -1 binary64) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(-.f64 #s(literal 0 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (pow.f64 (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(*.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 #s(literal -1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(*.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 1 binary64))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) x x) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) x))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x))) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)))) (-.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) x x)) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) x x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) x x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x x)","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x) x)","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(+.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(*.f64 (pow.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 #s(literal 1 binary64) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)))","(pow.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","#s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))) (*.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (fma.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/81 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal 1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/256 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/81 binary64) (*.f64 (*.f64 x x) #s(literal 1/144 binary64)))) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/729 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/262144 binary64) (pow.f64 x #s(literal 9 binary64)) #s(literal 1/19683 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4096 binary64) (pow.f64 x #s(literal 6 binary64)) (-.f64 #s(literal 1/729 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/1728 binary64)))) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal 1/9 binary64))) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x))) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (neg.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(/.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x)) (-.f64 #s(literal 1/9 binary64) (*.f64 #s(literal 1/16 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (*.f64 x #s(literal 1/12 binary64)))) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/27 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (*.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/4 binary64)) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 x (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal -1/4 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) x) x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal -1/4 binary64) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal 1/16 binary64) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) x) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) x) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 x (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 #s(literal -1/4 binary64) (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 x (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 x (fma.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/27 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 #s(literal -1/4 binary64) x)) (pow.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/4 binary64) x) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal -1/9 binary64))) (/.f64 (*.f64 #s(literal -1/4 binary64) x) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) #s(literal -1 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64))","(fma.f64 x #s(literal -1/4 binary64) #s(literal 1/3 binary64))","(-.f64 (/.f64 #s(literal 1/9 binary64) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (-.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))) (/.f64 #s(literal -1/27 binary64) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) (-.f64 #s(literal 1/9 binary64) (*.f64 x #s(literal -1/12 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))))","(-.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal -1/3 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64))) (neg.f64 (/.f64 #s(literal 1/9 binary64) (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)))))","(+.f64 (*.f64 #s(literal -1/4 binary64) x) #s(literal 1/3 binary64))","(+.f64 #s(literal 1/3 binary64) (*.f64 #s(literal -1/4 binary64) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)))) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))) (-.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (-.f64 (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x)))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":424.619873046875,"type":"rewrite"},{"compiler":[[11167,1269]],"memory":[[2931536,27499408]],"time":57.276123046875,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.0234375,"binary64"],["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","done",0.2487553413340238,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","done",0.2542828313148852,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) #s(approx (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","fresh",47.57389722521552,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.2679102855831563,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","done",0.3364786621668704,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","done",0.5555079249976853,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","done",0.2679102855798826,"binary64"],["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","done",1.1400557671323823,"binary64"]],"compiler":[[310,89],[6,5],[35,23],[37,22],[58,38],[20,14],[17,12],[13,10],[21,15],[11,9]],"count":[[234,9]],"kept":[{"done":[7,7],"fresh":[0,0],"new":[226,1],"picked":[1,1]}],"memory":[[-3913232,12167584]],"min-error":[[0.0,"binary64"]],"time":10.2548828125,"type":"prune"},{"accuracy":[0.0234375],"baseline":[0.0234375],"branch":[["x",0.0234375,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.0234375,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[15,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) #s(approx (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log1p.f64 x))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (log.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (-.f64 (log.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (log.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))))))"]],"memory":[[5953872,5953872]],"oracle":[62.91347099601945],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"repr":["binary64"],"time":8.469970703125,"times":[[3.654052734375,"x"],[3.737060546875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.2487553413340238],"baseline":[0.2487553413340238],"branch":[["x",0.24875534133402383,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.2487553413340238,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[10,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (log (+ 1 x)) #s(approx (* (+ (* (+ (* (+ (* -1/4 x) 1/3) x) -1/2) x) 1) x) (*.f64 (-.f64 #s(literal -1/4 binary64) (/.f64 (-.f64 #s(literal -1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64)) x)) x)) (pow.f64 x #s(literal 4 binary64))))) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x))))"]],"memory":[[-3466000,4753136]],"oracle":[62.609148894809394],"outputs":[["(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))"]],"repr":["binary64"],"time":6.632080078125,"times":[[3.032958984375,"x"],[2.498046875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.2679102855798826],"baseline":[0.2679102855798826],"branch":[["x",0.2679102855798826,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.2679102855798826,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[5,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))"]],"memory":[[3472176,3472176]],"oracle":[1.1400557671323823],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))"]],"repr":["binary64"],"time":5.73095703125,"times":[[2.471923828125,"x"],[2.421875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.2679102855831563],"baseline":[0.2679102855831563],"branch":[["x",0.2679102855831563,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.2679102855831563,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[4,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"memory":[[-6263376,3304944]],"oracle":[1.1400557671323823],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":6.886962890625,"times":[[3.4169921875,"x"],[2.570068359375,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.3364786621668704],"baseline":[0.3364786621668704],"branch":[["x",0.3364786621668704,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.3364786621668704,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[3,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"memory":[[3089632,3089632]],"oracle":[1.1400557671323823],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":5.18017578125,"times":[[2.424072265625,"x"],[2.1748046875,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[0.5555079249976852],"baseline":[0.5555079249976853],"branch":[["x",0.5555079249976852,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",0.5555079249976852,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[2,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"]],"memory":[[2845552,2845552]],"oracle":[1.1400557671323823],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))"]],"repr":["binary64"],"time":2.841796875,"times":[[1.30615234375,"x"],[1.139892578125,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"accuracy":[1.140055767132382],"baseline":[1.1400557671323823],"branch":[["x",1.140055767132382,1,"binary64"],["(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))",1.140055767132382,1,"binary64"]],"compiler":[[1,1],[9,7]],"count":[[1,1]],"inputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"link":["."],"memory":[[-5664160,2657616]],"name":["qlog (example 3.10)"],"oracle":[1.1400557671323823],"outputs":[["#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"repr":["binary64"],"time":3.13720703125,"times":[[1.546142578125,"x"],[1.18994140625,"(/.f64 (log.f64 (-.f64 #s(literal 1 binary64) x)) (log.f64 (+.f64 #s(literal 1 binary64) x)))"]],"type":"regimes"},{"egraph":[[9,6802,123,0.023232315],[8,3614,123,0.053747477],[7,257,123,0.011773472],[6,133,123,0.001415137],[5,82,123,0.001118143],[4,70,123,0.000790206],[3,59,123,0.0007506],[2,53,123,0.000734709],[1,49,123,0.000767742],[0,41,123,0.000664533]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"memory":[[1765840,9562768]],"method":["egg-herbie"],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 #s(approx (log (- 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal -1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x)) #s(approx (log (+ 1 x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) x #s(literal 1/3 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64)) x)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x) #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 (fma.f64 #s(literal -5/12 binary64) x #s(literal -1/2 binary64)) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal -1 binary64)) x #s(literal -1 binary64)))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) (-.f64 #s(literal -1 binary64) x))","#s(approx (/ (log (- 1 x)) (log (+ 1 x))) #s(literal -1 binary64))"]],"stop":[["node limit",1]],"time":112.8359375,"type":"simplify"},{"compiler":[[123,42],[1,2],[3,3],[7,5],[10,7],[20,14],[10,7],[30,20],[17,12],[35,16],[24,14]],"egraph":[[0,8218,1954,0.105639052],[2,4540,2007,0.036697038],[1,1343,2119,0.017021864],[0,428,2336,0.005405235],[0,10506,15,0.049235002],[3,2170,23,0.030460661],[2,245,23,0.006210665],[1,41,23,0.001284914],[0,12,23,0.000726003],[0,7,23,0.000121767],[0,8514,131,0.079737145],[2,1846,153,0.030039876],[1,251,153,0.006549251],[0,61,172,0.00179651],[0,34,172,0.000338111],[0,8379,854,0.127448627],[2,2012,881,0.028439112],[1,658,954,0.006693405],[0,217,1070,0.001947889]],"memory":[[-1930880,6246336]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1]],"time":1273.501953125,"type":"soundness"},{"compiler":[[123,42],[123,42],[6,5],[6,5],[9,7],[9,7]],"memory":[[6387808,31003616]],"remove-preprocessing":[[],[],[],[],[],[],[],[]],"time":213.430908203125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.011962890625,"type":"end"}]