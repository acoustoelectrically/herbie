[{"memory":[[11104,11104]],"time":0.024169921875,"type":"start"},{"compiler":[[11,8]],"memory":[[669504,669504]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0009760856628417969,"valid":0.9985356330871582}],[11,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0019521713256835938,"valid":0.9975595474243164}],[10,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0039043426513671875,"valid":0.9956073760986328}],[9,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.007808685302734375,"valid":0.9917030334472656}],[8,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.01561737060546875,"valid":0.9838943481445313}],[7,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.0312347412109375,"valid":0.9682769775390625}],[6,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.062469482421875,"valid":0.937042236328125}],[5,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.12493896484375,"valid":0.87457275390625}],[4,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[3,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.2498779296875,"valid":0.7496337890625}],[2,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.499755859375,"valid":0.499755859375}],[1,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.00048828125,"unknown":0.99951171875,"valid":0.0}]],"time":2.0830078125,"type":"analyze"},{"bogosity":[{"infinite":0.00012106488841448643,"invalid":0.0,"precondition":0.00048828125,"valid":0.9993906538615855}],"memory":[[7108784,247963536]],"mixsample":[[96.160888671875,"adjust",800],[162.437744140625,"ival-div",0],[66.983154296875,"ival-add",0],[89.5810546875,"ival-div",400],[4.70947265625,"ival-assert",0],[76.250732421875,"ival-sub",0],[31.01220703125,"ival-add",400],[7.668701171875,"ival-true",0],[0.04638671875,"ival-sub",400],[6.183837890625,"exact",0]],"outcomes":[[513.9951171875,1,"valid",3898],[258.62255859375,0,"valid",4358]],"time":1128.3349609375,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[60,0,0,196]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cancellation",60,0,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",60,0,false,0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) x)",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,60],[0,196]],"maybe-confusion":[[60,0,0,0,0,196]],"memory":[[1689808,43897024]],"mixsample":[[7.46240234375,"ival-div",0],[4.2529296875,"adjust",800],[2.87109375,"ival-add",0],[3.6357421875,"ival-div",400],[0.198486328125,"ival-assert",0],[3.24072265625,"ival-sub",0],[1.11083984375,"ival-add",400],[0.411376953125,"ival-true",0],[0.34130859375,"exact",0]],"outcomes":[[24.843994140625,1,"valid",234],[13.326416015625,0,"valid",278]],"time":83.56591796875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"egraph":[[0,275,9,0.001115104],[10,275,9,0.001478761],[9,266,9,0.00167039],[8,228,9,0.002007845],[7,150,9,0.001224116],[6,105,9,0.000974704],[5,64,9,0.00050346],[4,44,9,0.00029372],[3,32,9,0.000248164],[2,23,9,0.000177368],[1,15,9,0.000146262],[0,10,9,0.000150739],[0,6,9,9.0686e-5],[6,236,18,0.001338635],[5,218,18,0.001544104],[4,171,18,0.001545521],[3,108,18,0.001058222],[2,53,18,0.000492052],[1,20,19,0.000228047],[0,8,23,0.000140041]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-1941904,5853792]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":35.791015625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06689453125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","next",12.75117014585507,"binary64"]],"compiler":[[9,6]],"memory":[[308016,308016]],"time":0.438232421875,"type":"prune"},{"egraph":[[0,275,22,0.001124719],[10,275,22,0.001408119],[9,266,22,0.001768596],[8,228,22,0.001739857],[7,150,22,0.001264733],[6,105,22,0.001042395],[5,64,22,0.000501178],[4,44,22,0.000288376],[3,32,22,0.000239334],[2,23,22,0.000169386],[1,15,22,0.000143961],[0,10,22,0.000149759],[0,6,22,8.4492e-5]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"locations":[["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","cost-diff",0]],"memory":[[1089760,1089760]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":16.69677734375,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.01171875],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","accuracy",12.75117014585507]],"memory":[[905296,8927008]],"mixsample":[[3.392333984375,"ival-div",0],[1.966552734375,"adjust",800],[1.621826171875,"ival-add",0],[1.5888671875,"ival-div",400],[0.093505859375,"ival-assert",0],[2.233154296875,"ival-sub",0],[0.61083984375,"ival-add",400],[0.15673828125,"ival-true",0],[0.13525390625,"exact",0]],"outcomes":[[12.20556640625,1,"valid",117],[9.88818359375,0,"valid",139]],"time":27.966064453125,"type":"localize"},{"count":[[4,24]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[875440,875440]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"series":[[0.659912109375,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","-inf"],[0.407958984375,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","inf"],[0.56591796875,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (+ x 1) (/ 1 x))","x","0"]],"time":1.9560546875,"type":"series"},{"count":[[24,23]],"egraph":[[0,8018,186,0.058105831],[7,7554,188,0.016734028],[6,6748,188,0.021113726],[5,5373,188,0.024806026],[4,3307,189,0.024913793],[3,1026,194,0.015190954],[2,353,198,0.003284238],[1,150,210,0.001124917],[0,53,229,0.000468032]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","(/ 1 x)","(/ -1 (pow x 2))","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))"]],"memory":[[5121232,27823936]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)) x) #s(literal -1 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":243.18798828125,"type":"simplify"},{"count":[[4,325]],"egraph":[[0,9444,18,0.043156132],[3,6035,20,0.052551525],[2,551,20,0.02057884],[1,59,20,0.002035596],[0,10,20,0.000711803],[0,6,20,0.000102142]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)"]],"memory":[[-4766624,32367872]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)))) (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64))))","(*.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (-.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (fma.f64 x x x))","(*.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(*.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(pow.f64 (/.f64 x (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) x) (-.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (pow.f64 x #s(literal -4 binary64))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -9 binary64)) (pow.f64 x #s(literal -9 binary64))) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -3 binary64))))","(/.f64 (*.f64 (fma.f64 x x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (-.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (fma.f64 x x (fma.f64 (-.f64 #s(literal -1 binary64) x) x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))) (+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))) (*.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))) (+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(/.f64 (-.f64 (*.f64 (/.f64 x (fma.f64 x x x)) (/.f64 x (fma.f64 x x x))) (*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)))) (+.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (fma.f64 x x x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) #s(literal 3 binary64))) (fma.f64 (/.f64 x (fma.f64 x x x)) (/.f64 x (fma.f64 x x x)) (fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)) (*.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (*.f64 (fma.f64 x x x) (-.f64 #s(literal -1 binary64) x))) (*.f64 (fma.f64 x x x) (fma.f64 x x x)))","(/.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 (fma.f64 x x (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (pow.f64 x #s(literal -4 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -9 binary64)) (pow.f64 x #s(literal -9 binary64))) (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (+.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 x x (fma.f64 (-.f64 #s(literal -1 binary64) x) x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)) (pow.f64 x #s(literal -6 binary64))) (*.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))))","(neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(fma.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (-.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (/.f64 x (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64)) (-.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -2 binary64))))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (+.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -6 binary64)))) (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (-.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -4 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (fma.f64 x x x) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3/2 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3/2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 x x) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 x x x)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 0 binary64)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x)))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 x x x) (-.f64 (-.f64 x x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 0 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(+.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))))))","(+.f64 (/.f64 x (fma.f64 x x x)) (neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x x))))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) x))","(*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(-.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log1p.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal 1 binary64)))","(exp.f64 (neg.f64 (log1p.f64 x)))","(+.f64 (*.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(+.f64 (*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) x) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))) (fma.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)) (-.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 (-.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x)))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64))) (fma.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 x (fma.f64 x x x)) (-.f64 #s(literal -1 binary64) x)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (-.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (*.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(expm1.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal -1 binary64)))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (pow.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(-.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))))","(-.f64 x #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) x)","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log1p.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 (-.f64 #s(literal 0 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x)))) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (*.f64 x (/.f64 x (-.f64 #s(literal -1 binary64) x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1/2 binary64)))","(exp.f64 (neg.f64 (log.f64 x)))","(+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":231.243896484375,"type":"rewrite"},{"compiler":[[7043,949]],"memory":[[-2712496,29832400]],"time":62.39013671875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","fresh",0.6412154062963615,"binary64"],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","next",0.078125,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","next",31.408130473877982,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","fresh",31.383927056293675,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","next",31.48410994168619,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","next",36.366525984671576,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","next",30.563321997604206,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","fresh",31.626940723986216,"binary64"]],"compiler":[[10,6],[12,9],[13,9],[11,8],[15,10],[17,12],[13,9],[19,13],[10,6],[12,9],[13,9],[11,8],[15,10],[17,12],[13,9],[19,13]],"count":[[343,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[342,8],"picked":[1,0]}],"memory":[[-4210256,15514208]],"min-error":[[0.0234375,"binary64"]],"time":10.139892578125,"type":"prune"},{"egraph":[[0,8002,130,0.048709124],[13,7868,131,0.014000031],[12,6877,131,0.028196256],[11,6079,131,0.029914337],[10,5197,131,0.03596263],[9,4568,131,0.021724029],[8,3825,131,0.018801282],[7,3198,131,0.017829874],[6,2512,131,0.021576078],[5,1393,131,0.018363123],[4,560,131,0.00985025],[3,251,131,0.002628727],[2,129,131,0.001440797],[1,76,131,0.000647274],[0,38,131,0.000790603],[0,25,151,0.000464928]],"inputs":[["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","x","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"locations":[["(pow.f64 x #s(literal 3 binary64))","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal -1 binary64) x) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","cost-diff",1],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","cost-diff",1],["(-.f64 x x)","cost-diff",2],["(-.f64 (-.f64 x x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[6675984,20960464]],"method":["egg-herbie"],"outputs":[["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","#s(literal -1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":352.696044921875,"type":"simplify"},{"compiler":[[127,21]],"locations":[["(pow.f64 x #s(literal 3 binary64))","accuracy",0.0],["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","accuracy",4.356749213700134],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","accuracy",32.05665172379266],["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(/.f64 (/.f64 #s(literal -1 binary64) x) x)","accuracy",0.13671875],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","accuracy",31.421609941667782],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","accuracy",12.75117014585507],["#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","accuracy",31.760769065204165],["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","accuracy",30.563321997604206],["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","accuracy",0.0],["(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","accuracy",0.01171875],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","accuracy",0.07421875]],"memory":[[-2020928,24614384]],"mixsample":[[7.117919921875,"adjust",800],[15.45703125,"ival-div",0],[1.4814453125,"ival-add",0],[2.58251953125,"ival-div",400],[0.13720703125,"ival-assert",0],[0.96728515625,"ival-add",400],[7.898193359375,"ival-sub",0],[0.26904296875,"ival-true",0],[0.471923828125,"exact",0],[7.89111328125,"ival-pow",0],[1.6474609375,"ival-neg",0]],"outcomes":[[43.115966796875,1,"valid",117],[27.3740234375,0,"valid",139]],"time":117.330078125,"type":"localize"},{"count":[[17,40]],"inputs":[["(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)"]],"memory":[[3400592,3400592]],"outputs":[["-1","0","(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","(/ -1 (pow x 2))","(/ 1 (pow x 3))","(/ (+ 1 (* -1 x)) (pow x 3))","(pow x 3)","(- (* -1 x) 1)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* -1 x)","(* x (- (/ 1 x) 1))","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[3.31591796875,"((- (- x x) 1) (- x x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) (pow x 3)) (pow x 3) (/ (- (- x x) 1) (- -1 x)) (- -1 x))","x","-inf"],[2.6220703125,"((- (- x x) 1) (- x x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) (pow x 3)) (pow x 3) (/ (- (- x x) 1) (- -1 x)) (- -1 x))","x","inf"],[3.61181640625,"((- (- x x) 1) (- x x) (/ (neg (/ (- (- x x) 1) (- -1 x))) x) (neg (/ (- (- x x) 1) (- -1 x))) (- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (- 1 x) (/ 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (/ -1 x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) (pow x 3)) (pow x 3) (/ (- (- x x) 1) (- -1 x)) (- -1 x))","x","0"]],"time":11.175048828125,"type":"series"},{"count":[[40,40]],"egraph":[[0,8009,277,0.115170762],[7,7923,285,0.014441475],[6,7408,285,0.027953378],[5,6415,285,0.071908964],[4,4488,285,0.030890681],[3,1319,303,0.029176249],[2,485,307,0.007654796],[1,188,321,0.001929104],[0,68,357,0.000635111]],"inputs":[["-1","0","(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","(/ -1 (pow x 2))","(/ 1 (pow x 3))","(/ (+ 1 (* -1 x)) (pow x 3))","(pow x 3)","(- (* -1 x) 1)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* -1 x)","(* x (- (/ 1 x) 1))","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[-3360736,28204320]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","0","#s(literal 0 binary64)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64))","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* -1 x))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- x 1)))) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/ 1 (pow x 3))","(pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))","(/ (+ 1 (* -1 x)) (pow x 3))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(/ (- (/ 1 x) 1) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))))","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(* -1 x)","(neg.f64 x)","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (/ (- 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":432.304931640625,"type":"simplify"},{"count":[[17,245]],"egraph":[[0,1359,101,0.010435808],[1,196,105,0.007414117],[0,38,113,0.002453911],[0,25,133,0.000265015]],"inputs":[["(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(-.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)"]],"memory":[[2110816,10160832]],"outputs":[["#s(literal -1 binary64)","#s(literal 0 binary64)","(*.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(pow.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) (-.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (neg.f64 x))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 (neg.f64 x)))","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) x))","(/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 #s(literal -1 binary64) x)))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(+.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))))))","(/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(+.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))))","(*.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) (*.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))) (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)))","#s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (neg.f64 x))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 #s(literal 1 binary64) x)))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x)) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -3 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -3 binary64))) (+.f64 (fma.f64 x x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (*.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (pow.f64 x #s(literal 3 binary64))))) (+.f64 (pow.f64 x #s(literal -3 binary64)) (/.f64 x (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)) (fma.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64))) (/.f64 x (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) (/.f64 x (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (fma.f64 x x x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)) (neg.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)) (neg.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (pow.f64 x #s(literal -3 binary64)) (/.f64 x (pow.f64 x #s(literal 3 binary64))))","(+.f64 (pow.f64 x #s(literal -3 binary64)) (neg.f64 (/.f64 x (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 3 binary64))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 3 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)) #s(literal 1 binary64))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))","(pow.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) #s(literal 0 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) x))) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)) (*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) x))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal -1 binary64) x)))","(neg.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 #s(literal -1 binary64) (neg.f64 x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(neg.f64 (+.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal -1 binary64) x)","(-.f64 #s(literal 0 binary64) (+.f64 #s(literal 1 binary64) x))","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 x))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":189.5478515625,"type":"rewrite"},{"compiler":[[5493,877]],"memory":[[2288752,27307904]],"time":60.72705078125,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","next",0.078125,"binary64"],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","fresh",0.6552191660648036,"binary64"],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","next",0.6412154062963615,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","next",31.383927056293675,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","next",32.681791048699395,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",31.48410994168619,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","fresh",36.37388740179102,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","fresh",32.04720034796411,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.563321997604206,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","next",31.421609941667782,"binary64"]],"compiler":[[7,6],[20,12],[6,4],[11,8],[19,12],[15,10],[19,12],[15,10],[13,9],[14,10],[7,6],[20,12],[6,4],[11,8],[19,12],[19,12],[15,10],[14,10]],"count":[[313,10]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[305,7],"picked":[5,2]}],"memory":[[-625040,14946848]],"min-error":[[0.0,"binary64"]],"time":14.18408203125,"type":"prune"},{"egraph":[[0,8336,112,0.044027532],[11,7521,112,0.024329883],[10,6517,112,0.032580931],[9,5404,112,0.031941171],[8,4267,112,0.031810774],[7,3052,112,0.023718829],[6,1208,112,0.021620143],[5,472,112,0.00882525],[4,245,112,0.00267743],[3,154,112,0.000976089],[2,99,114,0.000710488],[1,58,118,0.000554178],[0,37,118,0.000394343],[0,24,117,0.000355233]],"inputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) x)","x","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(literal -1 binary64)","(fma.f64 x x x)","x","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 x x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)"]],"locations":[["(pow.f64 x #s(literal -2 binary64))","cost-diff",0],["(neg.f64 (pow.f64 x #s(literal -2 binary64)))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","cost-diff",0],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) x) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","cost-diff",0],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","cost-diff",2],["(fma.f64 x x x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(literal -1 binary64) x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","cost-diff",0],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","cost-diff",1]],"memory":[[-3315472,21401856]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(-.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) x)","x","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(literal -1 binary64)","(fma.f64 x x x)","x","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 x x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","x","#s(literal -2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":293.0,"type":"simplify"},{"compiler":[[102,21]],"locations":[["(pow.f64 x #s(literal -2 binary64))","accuracy",0.0],["(neg.f64 (pow.f64 x #s(literal -2 binary64)))","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","accuracy",31.421609941667782],["(*.f64 x x)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 1 binary64) x) x)","accuracy",0.00390625],["(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","accuracy",0.6880904062963615],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","accuracy",32.05665172379266],["(fma.f64 x x x)","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","accuracy",0.6412154062963615],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","accuracy",12.75117014585507],["#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","accuracy",31.35322115807703],["(-.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","accuracy",0.01171875],["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","accuracy",0.07421875]],"memory":[[4916048,23851504]],"mixsample":[[6.16796875,"adjust",800],[15.00732421875,"ival-div",0],[3.46728515625,"ival-add",0],[3.11083984375,"ival-mult",0],[2.076904296875,"ival-div",400],[0.12939453125,"ival-assert",0],[0.9140625,"ival-add",400],[5.707275390625,"ival-sub",0],[0.246826171875,"ival-true",0],[0.439453125,"exact",0],[1.423583984375,"ival-neg",0],[7.247314453125,"ival-pow",0]],"outcomes":[[40.61181640625,1,"valid",117],[56.0908203125,0,"valid",139]],"time":112.8740234375,"type":"localize"},{"count":[[16,45]],"inputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(fma.f64 x x x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","(*.f64 x x)"]],"memory":[[-5023088,2863824]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","-1","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(- (* -1 x) 1)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","x","(* x (+ 1 x))","(/ 1 (pow x 3))","(/ (+ 1 (* -1 x)) (pow x 3))","(/ (+ 1 (* -1 x)) x)","(/ -1 (pow x 2))","(/ 1 (pow x 2))","(pow x 2)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* -1 x)","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* (pow x 2) (+ 1 (/ 1 x)))","(- (/ 1 x) 1)","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))"]],"series":[[1.47705078125,"((/ (/ 1 (- -1 x)) x) (/ 1 (- -1 x)) (- -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (/ 1 x) (/ -1 (+ (* x x) x)) (+ (* x x) x) (/ (/ (- 1 x) x) (* x x)) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) x) (- 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (neg (pow x -2)) (pow x -2) (* x x))","x","-inf"],[1.76416015625,"((/ (/ 1 (- -1 x)) x) (/ 1 (- -1 x)) (- -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (/ 1 x) (/ -1 (+ (* x x) x)) (+ (* x x) x) (/ (/ (- 1 x) x) (* x x)) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) x) (- 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (neg (pow x -2)) (pow x -2) (* x x))","x","inf"],[2.251953125,"((/ (/ 1 (- -1 x)) x) (/ 1 (- -1 x)) (- -1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ 1 (+ x 1)) (/ 1 x) (/ -1 (+ (* x x) x)) (+ (* x x) x) (/ (/ (- 1 x) x) (* x x)) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) x) (- 1 x) (- (/ 1 (+ x 1)) (/ 1 x)) (neg (pow x -2)) (pow x -2) (* x x))","x","0"]],"time":6.294921875,"type":"series"},{"count":[[45,44]],"egraph":[[0,8291,303,0.075394394],[4,6559,316,0.029803101],[3,1773,328,0.027679415],[2,503,332,0.010768225],[1,203,346,0.002744043],[0,71,384,0.001040781]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","-1","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(- (* -1 x) 1)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(/ 1 x)","x","(* x (+ 1 x))","(/ 1 (pow x 3))","(/ (+ 1 (* -1 x)) (pow x 3))","(/ (+ 1 (* -1 x)) x)","(/ -1 (pow x 2))","(/ 1 (pow x 2))","(pow x 2)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(* -1 x)","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(* (pow x 2) (+ 1 (/ 1 x)))","(- (/ 1 x) 1)","(* x (- (/ 1 x) 1))","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- 1 (/ 1 x))))"]],"memory":[[-11953136,32660016]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) x)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* -1 x))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- x 1)))) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","x","(* x (+ 1 x))","(fma.f64 x x x)","(/ 1 (pow x 3))","(pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))","(/ (+ 1 (* -1 x)) (pow x 3))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 1 (* -1 x)) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ 1 (pow x 2))","(/.f64 (/.f64 #s(literal 1 binary64) x) x)","(pow x 2)","(*.f64 x x)","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64))) x)","(/ (- (/ 1 x) 1) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(* -1 x)","(neg.f64 x)","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 x (/.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x))","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(- (/ 1 x) 1)","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64))) x)","(* -1 (/ (- 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 x (/.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 x x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":253.31298828125,"type":"simplify"},{"count":[[16,985]],"egraph":[[0,9237,95,0.073620671],[2,1396,101,0.02842069],[1,174,101,0.004782012],[0,37,107,0.001364269],[0,24,106,0.000234815]],"inputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(fma.f64 x x x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) x)","(-.f64 #s(literal 1 binary64) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(pow.f64 x #s(literal -2 binary64))","(*.f64 x x)"]],"memory":[[5312960,53927008]],"outputs":[["(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))) x)","(/.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x))","(/.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 x x x))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(exp.f64 (*.f64 (log.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal -1 binary64) x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(*.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (fma.f64 x x x))","(/.f64 x (fma.f64 x x x))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) x))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(neg.f64 (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(-.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(exp.f64 (neg.f64 (log1p.f64 x)))","(+.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(*.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) x (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))) (+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal -1 binary64)) (fma.f64 x x (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64)))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(neg.f64 (-.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 x x x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (/.f64 #s(literal -1 binary64) x)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 x x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 x) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) x (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 (neg.f64 x) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 x #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) #s(literal 1 binary64)))","(-.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal -1 binary64) x)","(-.f64 #s(literal 1 binary64) (neg.f64 x))","(exp.f64 (log1p.f64 x))","(+.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x))))))","(+.f64 (neg.f64 x) #s(literal -1 binary64))","(+.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (neg.f64 x))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))))","(*.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (pow.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))) (+.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))))) (+.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (*.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -3 binary64)) (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))) (neg.f64 (neg.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (*.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -2 binary64)))) (*.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -3 binary64)))) (*.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (neg.f64 x)))) (-.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(fma.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))))","(fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(+.f64 (/.f64 (pow.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (fma.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))))))","(+.f64 (/.f64 #s(literal -1 binary64) x) #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)))","(+.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (/ 1 (+ x 1)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (neg.f64 (log.f64 x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) x)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))) x)","(/.f64 (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x))","(/.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 x))","(/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (fma.f64 x x x))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (neg.f64 (log1p.f64 x))))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(exp.f64 (*.f64 (log.f64 (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(*.f64 (/.f64 x (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal -1 binary64) (fma.f64 x x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 x x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (/.f64 x (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x x) x) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) x) (neg.f64 x))","(*.f64 (-.f64 #s(literal -1 binary64) x) x)","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 x) (-.f64 #s(literal -1 binary64) x))","(*.f64 (fma.f64 x x x) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(*.f64 (fma.f64 x x x) #s(literal -1 binary64))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 x (-.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (fma.f64 x x x))","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 x x x) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64))))) (+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) (*.f64 x x)) (-.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 x x x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (neg.f64 x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x x))) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (neg.f64 x) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (fma.f64 x x x) #s(literal -1 binary64))","(/.f64 (fma.f64 x x x) #s(literal 1 binary64))","(/.f64 x (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 x (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(neg.f64 (fma.f64 x x x))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) x) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) x) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64))) x)","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 x (pow.f64 x #s(literal -1/2 binary64))) x)","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (fma.f64 x x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 x (fma.f64 x x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 x x x) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 x (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (*.f64 x x) (fma.f64 x x (-.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 (*.f64 x x) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 x) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) x (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (/.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 x (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64)) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 x (/.f64 #s(literal -1 binary64) x)) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x x) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (neg.f64 x) (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 (neg.f64 x) x (neg.f64 x))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) (*.f64 x x))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (*.f64 x x) (/.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 x (/.f64 x (expm1.f64 (neg.f64 (log.f64 x)))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 x (neg.f64 x) (neg.f64 x))","(fma.f64 x x x)","(fma.f64 x #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) x)) x)","(fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 x x))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x) x)","(fma.f64 #s(literal -1 binary64) (*.f64 x x) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (neg.f64 x) x))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))) (/.f64 (*.f64 x x) (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 x x x))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(-.f64 (neg.f64 x) (*.f64 x x))","(-.f64 (*.f64 (neg.f64 x) x) x)","(-.f64 #s(literal 0 binary64) (fma.f64 x x x))","(-.f64 (*.f64 x x) (neg.f64 x))","(+.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(+.f64 (neg.f64 x) (*.f64 (neg.f64 x) x))","(+.f64 (*.f64 (neg.f64 x) x) (neg.f64 x))","(+.f64 #s(literal 0 binary64) (fma.f64 x x x))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 x x)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 x x)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (*.f64 x x)))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (neg.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal -1 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (pow.f64 x #s(literal -3 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (/.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 x #s(literal -6 binary64)) (pow.f64 x #s(literal -4 binary64))) (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -9 binary64)) (pow.f64 x #s(literal -6 binary64))) (+.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x))) x)","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (*.f64 x x) (/.f64 #s(literal -1 binary64) x))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) #s(literal -1 binary64))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) x)) (*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)) x)","(/.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x) (neg.f64 x))","(/.f64 (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x) x)","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal -1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (expm1.f64 (neg.f64 (log.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (expm1.f64 (neg.f64 (log.f64 x))) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (/.f64 (expm1.f64 (neg.f64 (log.f64 x))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal -1 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64))))","(neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal -1 binary64) x))) (/.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal -1 binary64) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(-.f64 (/.f64 x (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 (pow.f64 x #s(literal -3 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal 3 binary64))) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -3 binary64)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -3 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (neg.f64 x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 x))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(*.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(pow.f64 (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (expm1.f64 (neg.f64 (log.f64 x))) (expm1.f64 (neg.f64 (log.f64 x))))) (expm1.f64 (neg.f64 (log.f64 x))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 (log.f64 x))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (expm1.f64 (neg.f64 (log.f64 x))) (expm1.f64 (neg.f64 (log.f64 x))) (*.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 (log.f64 x)))))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x) (-.f64 #s(literal -1 binary64) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) x)","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))) (fma.f64 x x x))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 x))))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 x x x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))) (*.f64 x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x x))","(/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) x))","(/.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))) (-.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) x) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 x #s(literal 1 binary64))))","(neg.f64 (expm1.f64 (neg.f64 (log.f64 x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(expm1.f64 (neg.f64 (log.f64 x)))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 x)) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (neg.f64 x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))))","(-.f64 (/.f64 x (*.f64 x x)) (/.f64 (*.f64 x x) (*.f64 x x)))","(-.f64 (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x)))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x)))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (/.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)))","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (expm1.f64 (neg.f64 (log.f64 x))))","(-.f64 (/.f64 x (neg.f64 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) x) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) x))","(-.f64 (/.f64 #s(literal 0 binary64) x) (expm1.f64 (neg.f64 (log.f64 x))))","(-.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 x (neg.f64 x)))","(-.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) (neg.f64 x)))","(-.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (fma.f64 x x x)))","(-.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (/.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) x))","(-.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 (log.f64 x))))","(+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) (-.f64 #s(literal -1 binary64) x)) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal -1 binary64) x))))","(*.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 #s(literal -1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))) (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))))","(/.f64 (-.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -3 binary64)) (pow.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -2 binary64)) (fma.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal -1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 (-.f64 #s(literal -1 binary64) x) (*.f64 x x))) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal -1 binary64) x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (neg.f64 x) #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal -1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x))) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 x #s(literal 1 binary64)))","(fma.f64 (/.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (/.f64 x (pow.f64 (*.f64 x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 x (pow.f64 (fma.f64 x (*.f64 x (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (fma.f64 x x (-.f64 x #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (neg.f64 x) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (neg.f64 x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (-.f64 #s(literal -1 binary64) x)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 x #s(literal -1 binary64) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(fma.f64 #s(literal 1 binary64) (neg.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal -1 binary64) x))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal -1 binary64) x))))","(-.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(-.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x))","(-.f64 x #s(literal 1 binary64))","(-.f64 #s(literal -1 binary64) (neg.f64 x))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) (fma.f64 x x x)))))","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (*.f64 (/.f64 x (-.f64 #s(literal -1 binary64) x)) x)))","(+.f64 x #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) x)","(+.f64 #s(literal 1 binary64) (neg.f64 x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (neg.f64 (pow.f64 x #s(literal -4 binary64))) (*.f64 x x))","(*.f64 (neg.f64 (pow.f64 x #s(literal -6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))) (-.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64)))) (*.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal -4 binary64)))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal -6 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -4 binary64))) (pow.f64 x #s(literal -2 binary64)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -6 binary64))) (+.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 x #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64)) (neg.f64 (pow.f64 x #s(literal -6 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 (pow.f64 x #s(literal -4 binary64)) (pow.f64 x #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64))) (/.f64 (pow.f64 x #s(literal -6 binary64)) (+.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64))))","(-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 x (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 x (pow.f64 x #s(literal 3/2 binary64))))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) x))","(*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 x (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 x (*.f64 x x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 x (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (exp.f64 #s(literal -2 binary64)) (log.f64 x))","(pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(pow.f64 x #s(literal -2 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))) x)","(/.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 x #s(literal -4 binary64))) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 x))","(/.f64 (neg.f64 x) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) x)","(/.f64 x (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 x) (*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) x))","(/.f64 #s(literal 1 binary64) (*.f64 x x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(exp.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (log.f64 x))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (neg.f64 (log.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -2 binary64)))","(+.f64 #s(literal 0 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 x (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 x (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) x)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) x))","(/.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (*.f64 x x) #s(literal 1 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -2 binary64)))","(neg.f64 (*.f64 (neg.f64 x) x))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) x))","(exp.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":239.5361328125,"type":"rewrite"},{"compiler":[[20126,2931]],"memory":[[3151088,82103600]],"time":189.73095703125,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","done",0.078125,"binary64"],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","next",0.6552191660648036,"binary64"],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","done",0.6412154062963615,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","done",31.383927056293675,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","done",32.681791048699395,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",31.48410994168619,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","next",36.37388740179102,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","next",32.04720034796411,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.563321997604206,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","done",31.421609941667782,"binary64"]],"compiler":[[7,6],[20,12],[6,4],[11,8],[19,12],[15,10],[19,12],[15,10],[13,9],[14,10]],"count":[[929,10]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[919,0],"picked":[5,5]}],"memory":[[-140320,35878704]],"min-error":[[0.0,"binary64"]],"time":20.429931640625,"type":"prune"},{"egraph":[[0,8263,100,0.051286317],[7,5915,100,0.02859193],[6,4863,100,0.024935428],[5,3652,101,0.023469089],[4,1462,116,0.018607066],[3,486,117,0.005348011],[2,188,118,0.001664181],[1,85,124,0.000619492],[0,37,138,0.00047528],[0,23,158,0.000253135]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","#s(literal -1 binary64)","(*.f64 x x)","x","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (*.f64 x x) x)","(*.f64 x x)","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","x","#s(literal 1 binary64)","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"locations":[["(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))))","cost-diff",1],["(-.f64 x x)","cost-diff",2],["(-.f64 (-.f64 x x) #s(literal 1 binary64))","cost-diff",2],["(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",8],["(-.f64 #s(literal 1 binary64) x)","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","cost-diff",0],["(*.f64 (*.f64 x x) x)","cost-diff",2],["(*.f64 x x)","cost-diff",0],["(/.f64 #s(literal -1 binary64) (*.f64 x x))","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","cost-diff",0]],"memory":[[-3576128,28522560]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","#s(literal -1 binary64)","(*.f64 x x)","x","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(-.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(*.f64 (*.f64 x x) x)","(pow.f64 x #s(literal 3 binary64))","(*.f64 x x)","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) x))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","#s(literal -1 binary64)","(-.f64 x x)","#s(literal 0 binary64)","x","#s(literal 1 binary64)","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal -1 binary64) x)","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":231.89892578125,"type":"simplify"},{"compiler":[[144,23]],"locations":[["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","accuracy",0.0078125],["(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","accuracy",0.01171875],["(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","accuracy",0.07421875],["(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",17.00894034759581],["(*.f64 x x)","accuracy",0.0],["(*.f64 (*.f64 x x) x)","accuracy",0.09375],["(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))","accuracy",4.356749213700134],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","accuracy",32.05665172379266],["(*.f64 x x)","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (*.f64 x x))","accuracy",0.6880904062963615],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","accuracy",31.421609941667782]],"memory":[[-520112,24902016]],"mixsample":[[7.798095703125,"adjust",800],[15.150146484375,"ival-div",0],[2.078125,"ival-add",0],[6.462158203125,"ival-mult",0],[2.39599609375,"ival-div",400],[0.20068359375,"ival-assert",0],[1.085693359375,"ival-add",400],[9.226806640625,"ival-sub",0],[0.268310546875,"ival-true",0],[0.363037109375,"exact",0],[1.572021484375,"ival-neg",0]],"outcomes":[[41.4541015625,1,"valid",117],[27.686767578125,0,"valid",139]],"time":91.608154296875,"type":"localize"},{"count":[[14,48]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 x x)","(*.f64 (*.f64 x x) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))","(-.f64 #s(literal 1 binary64) x)","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))"]],"memory":[[3497648,3497648]],"outputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/ -1 (pow x 2))","(pow x 2)","(pow x 3)","(/ 1 (pow x 3))","(/ (+ 1 (* -1 x)) (pow x 3))","1","(+ 1 (* -1 x))","-1","(- (* -1 x) 1)","0","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(* -1 x)","(* x (- (/ 1 x) 1))","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))"]],"series":[[2.390869140625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 (* x x)) (* x x) (* (* x x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) (* (* x x) x)) (- 1 x) (* (- 1 (* x x)) (/ 1 (- x 1))) (- (- x x) 1) (- x x) (neg (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1))))) (/ (neg (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1))))) x) (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1)))) (/ 1 (- x 1)))","x","-inf"],[2.093017578125,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 (* x x)) (* x x) (* (* x x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) (* (* x x) x)) (- 1 x) (* (- 1 (* x x)) (/ 1 (- x 1))) (- (- x x) 1) (- x x) (neg (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1))))) (/ (neg (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1))))) x) (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1)))) (/ 1 (- x 1)))","x","inf"],[1.635009765625,"((- (/ 1 (+ x 1)) (/ 1 x)) (/ -1 (* x x)) (* x x) (* (* x x) x) (- (/ 1 (+ x 1)) (/ 1 x)) (/ (- 1 x) (* (* x x) x)) (- 1 x) (* (- 1 (* x x)) (/ 1 (- x 1))) (- (- x x) 1) (- x x) (neg (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1))))) (/ (neg (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1))))) x) (/ (- (- x x) 1) (* (- 1 (* x x)) (/ 1 (- x 1)))) (/ 1 (- x 1)))","x","0"]],"time":7.20703125,"type":"series"},{"count":[[48,48]],"egraph":[[0,8196,355,0.060690673],[5,7619,363,0.015236942],[4,5273,363,0.036585581],[3,1764,385,0.033732392],[2,618,399,0.007325155],[1,242,415,0.002056693],[0,88,451,0.001207816]],"inputs":[["(/ -1 x)","(/ (- x 1) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(/ -1 (pow x 2))","(pow x 2)","(pow x 3)","(/ 1 (pow x 3))","(/ (+ 1 (* -1 x)) (pow x 3))","1","(+ 1 (* -1 x))","-1","(- (* -1 x) 1)","0","(- x 1)","(- (* x (+ 1 (* -1 x))) 1)","(- (* x (+ 1 (* x (- x 1)))) 1)","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(/ (- (/ 1 x) 1) (pow x 2))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(* -1 x)","(* x (- (/ 1 x) 1))","(* -1 (* x (+ 1 (/ 1 x))))","(/ (- (/ 1 x) 1) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(* -1 (* x (- 1 (/ 1 x))))","(* -1 (/ (- 1 (/ 1 x)) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))"]],"memory":[[-7990512,30050464]],"method":["egg-herbie"],"outputs":[["(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- x 1) x)","(/.f64 (-.f64 x #s(literal 1 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 1) x)","(-.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal -1 binary64))","(/ (- (* x (+ 1 (* x (- x 1)))) 1) x)","(*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 #s(literal -1 binary64) x) x))","(/ -1 (pow x 2))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(pow x 2)","(*.f64 x x)","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(/ 1 (pow x 3))","(pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))","(/ (+ 1 (* -1 x)) (pow x 3))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","0","#s(literal 0 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(- (* x (+ 1 (* -1 x))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) x) x #s(literal -1 binary64))","(- (* x (+ 1 (* x (- x 1)))) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(- (* x (- (* -1 x) 1)) 1)","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","(/ (- (/ 1 x) 1) (pow x 2))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 x)","(neg.f64 x)","(* x (- (/ 1 x) 1))","(-.f64 #s(literal 1 binary64) x)","(* -1 (* x (+ 1 (/ 1 x))))","(-.f64 #s(literal -1 binary64) x)","(/ (- (/ 1 x) 1) x)","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(/ (- (/ 1 x) (+ 1 (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(/ (- (+ (/ 1 x) (/ 1 (pow x 3))) (+ 1 (/ 1 (pow x 2)))) x)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (neg.f64 x) x #s(literal -1 binary64)))","(/ (+ 1 (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x)) x)","(/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) x)","(/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) (pow x 2))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (/.f64 #s(literal -1 binary64) x)))","(* -1 (* x (- 1 (/ 1 x))))","(-.f64 #s(literal 1 binary64) x)","(* -1 (/ (- 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1 (* -1 (/ (- 1 (/ 1 x)) x))) x))) x))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))))","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (neg.f64 x) x #s(literal -1 binary64)))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":243.530029296875,"type":"simplify"},{"count":[[14,248]],"egraph":[[0,1431,75,0.00775719],[1,198,78,0.004687094],[0,37,104,0.00141712],[0,23,138,0.000397419]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(*.f64 x x)","(*.f64 (*.f64 x x) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x))","(-.f64 #s(literal 1 binary64) x)","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 x x) #s(literal 1 binary64))","(-.f64 x x)","(neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))"]],"memory":[[2510608,10671712]],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(pow.f64 (*.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x))","(neg.f64 (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 x x)","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(*.f64 (*.f64 x x) x)","(*.f64 x (*.f64 x x))","(pow.f64 x #s(literal 3 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) (-.f64 #s(literal 1 binary64) x)))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -3 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -3 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (*.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64))) (*.f64 x (pow.f64 x #s(literal -3 binary64))))) (+.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 x (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)) (fma.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64))) (*.f64 x (pow.f64 x #s(literal -3 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 x (pow.f64 x #s(literal -3 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal 4 binary64))) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -2 binary64))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (neg.f64 (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal 3 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 3/2 binary64)) (neg.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -3 binary64)) (neg.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64)))))","(-.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 x (pow.f64 x #s(literal -3 binary64))))","(+.f64 (pow.f64 x #s(literal -3 binary64)) (neg.f64 (*.f64 x (pow.f64 x #s(literal -3 binary64)))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 #s(literal 1 binary64) (neg.f64 x)))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(neg.f64 (-.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) x)","(+.f64 (neg.f64 x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (neg.f64 x))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","(-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 x) x)))","#s(literal -1 binary64)","#s(literal 0 binary64)","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(pow.f64 (/.f64 x (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (fma.f64 x x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x x)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) x))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 x #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 #s(literal 0 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 x x)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) #s(literal 0 binary64))))","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (log.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":192.822998046875,"type":"rewrite"},{"compiler":[[5901,1025]],"memory":[[3903968,27468336]],"time":33.5478515625,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","done",0.078125,"binary64"],["(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","fresh",0.6552191660648036,"binary64"],["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","done",0.6412154062963615,"binary64"],["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","done",31.383927056293675,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","done",32.681791048699395,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (*.f64 x x) x)))","fresh",54.0421344658905,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","done",31.48410994168619,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(approx (- 1 x) (neg.f64 x)) (*.f64 (*.f64 x x) x)))","fresh",35.75178676917032,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","done",32.04720034796411,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","done",30.563321997604206,"binary64"],["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","done",31.421609941667782,"binary64"]],"compiler":[[284,71],[7,6],[16,11],[6,4],[11,8],[19,12],[27,15],[15,10],[22,13],[15,10],[13,9],[14,10]],"count":[[307,11]],"kept":[{"done":[7,7],"fresh":[0,0],"new":[297,3],"picked":[3,1]}],"memory":[[-332720,15450912]],"min-error":[[0.0,"binary64"]],"time":10.674072265625,"type":"prune"},{"accuracy":[0.078125],"baseline":[0.078125],"branch":[["x",0.078125,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.078125,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[19,1]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(approx (- 1 x) (neg.f64 x)) (*.f64 (*.f64 x x) x)))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))","(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) x) (*.f64 x x)))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))) x)","(/.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (*.f64 x x) x)))","(/.f64 (neg.f64 (/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))) x)","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64))))"]],"memory":[[-1029856,6961824]],"oracle":[63.650133833226],"outputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)"]],"repr":["binary64"],"time":11.599853515625,"times":[[5.494873046875,"x"],[4.75390625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[0.6412154062963615],"baseline":[0.6412154062963615],"branch":[["x",0.6412154062963615,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",0.6412154062963615,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[10,1]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) x) (-.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(approx (- 1 x) (neg.f64 x)) (*.f64 (*.f64 x x) x)))","(/.f64 (-.f64 (-.f64 x x) #s(literal 1 binary64)) (fma.f64 x x x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) x)))"]],"memory":[[4974576,4974576]],"oracle":[63.364776662029904],"outputs":[["(/.f64 #s(literal -1 binary64) (fma.f64 x x x))"]],"repr":["binary64"],"time":7.80810546875,"times":[[3.094970703125,"x"],[3.48388671875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[1.4154386269434207],"baseline":[30.563321997604206],"branch":[["x",1.4154386269434207,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",1.4154386269434207,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[4,3]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))"]],"memory":[[-6531616,3678848]],"oracle":[62.20282502386323],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":4.632080078125,"times":[[1.716064453125,"x"],[2.223876953125,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[1.4898398617564064],"baseline":[30.563321997604206],"branch":[["x",1.4898398617564061,3,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",1.4898398617564064,3,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[3,3]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))"]],"memory":[[3449440,3449440]],"oracle":[61.94128754250128],"outputs":[["(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x)))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":3.739013671875,"times":[[1.6220703125,"x"],[1.47998046875,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"accuracy":[30.563321997604195],"baseline":[30.563321997604206],"branch":[["x",30.563321997604195,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))",30.563321997604195,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[2,1]],"inputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))"]],"link":["."],"memory":[[-5054976,3262624]],"name":["2frac (problem 3.3.1)"],"oracle":[31.673173315177927],"outputs":[["#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]],"repr":["binary64"],"time":3.8740234375,"times":[[2.028076171875,"x"],[1.383056640625,"(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x))"]],"type":"regimes"},{"bstep":[[0.033935546875,0.0,36.21732925178539],[0.23388671875,-15388.665683281039,-6.251579246306226e-10]],"compiler":[[3,4],[9,6]],"memory":[[258672,258672]],"method":["left-value","left-value"],"time":0.851806640625,"type":"bsearch"},{"bstep":[[0.02685546875,0.0,36.21732925178539],[0.123046875,-15388.665683281039,-6.251579246306226e-10]],"compiler":[[3,4],[9,6]],"memory":[[255584,255584]],"method":["left-value","left-value"],"time":0.546142578125,"type":"bsearch"},{"egraph":[[16,787,130,0.00217836],[15,785,130,0.002185415],[14,782,130,0.002126837],[13,780,130,0.002097433],[12,779,130,0.002067403],[11,778,130,0.002040442],[10,777,130,0.002234925],[9,728,130,0.003156516],[8,476,130,0.003861039],[7,343,130,0.002271665],[6,185,130,0.001974134],[5,129,130,0.001175053],[4,106,130,0.001097806],[3,81,130,0.001010142],[2,66,130,0.000965237],[1,52,130,0.000807888],[0,34,130,0.000749303]],"inputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]],"memory":[[5904496,5904496]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) x)) x)","(/.f64 (pow.f64 (-.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)) x)","(/.f64 #s(literal -1 binary64) (fma.f64 x x x))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64)))))","(if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)) (if (<=.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) x)) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x))))","(if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal -10000 binary64)) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (if (<=.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) #s(literal 0 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) (*.f64 x x))) (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))))","#s(approx (- (/ 1 (+ x 1)) (/ 1 x)) (/.f64 #s(literal -1 binary64) x))"]],"stop":[["saturated",1]],"time":44.222900390625,"type":"simplify"},{"compiler":[[152,35],[3,3],[15,10],[5,4],[5,4],[15,10],[5,4],[7,5],[12,9],[19,11]],"egraph":[[0,1359,101,0.006824233],[1,196,105,0.005002962],[0,38,113,0.001575815],[0,25,133,0.000297609],[0,9444,18,0.039968321],[3,6035,20,0.036237934],[2,551,20,0.01894551],[1,59,20,0.002005044],[0,10,20,0.000707626],[0,6,20,8.4831e-5],[0,8018,186,0.054942898],[7,7554,188,0.018975176],[6,6748,188,0.022530415],[5,5373,188,0.024468632],[4,3307,189,0.024156956],[3,1026,194,0.01583503],[2,353,198,0.003444431],[1,150,210,0.001126397],[0,53,229,0.000456259]],"memory":[[-3601600,4537072]],"stop":[["fuel",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1]],"time":1512.630126953125,"type":"soundness"},{"compiler":[[152,35],[152,35],[7,6],[7,6],[9,6],[9,6]],"memory":[[87712,24231376]],"remove-preprocessing":[[],[],[],[],[],[]],"time":46.511962890625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.009033203125,"type":"end"}]