[{"memory":[[11152,11152]],"time":0.027099609375,"type":"start"},{"compiler":[[11,7]],"memory":[[423056,423056]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.00036709150299429893,"valid":0.7514363066293299}],[11,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0007341830059885979,"valid":0.7510692151263356}],[10,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0014683660119771957,"valid":0.750335032120347}],[9,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.0029367320239543915,"valid":0.7488666661083698}],[8,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.005873464047908783,"valid":0.7459299340844154}],[7,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.011746928095817566,"valid":0.7400564700365067}],[6,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.023493856191635132,"valid":0.7283095419406891}],[5,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.046987712383270264,"valid":0.704815685749054}],[4,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.09397542476654053,"valid":0.6578279733657837}],[3,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.18795084953308105,"valid":0.5638525485992432}],[2,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.3759016990661621,"valid":0.3759016990661621}],[1,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.24819660186767578,"unknown":0.7518033981323242,"valid":0.0}]],"time":1.517822265625,"type":"analyze"},{"bogosity":[{"infinite":9.106145810711291e-5,"invalid":0.0,"precondition":0.24819660186767578,"valid":0.7517123366742171}],"memory":[[3613120,182005520]],"mixsample":[[61.758544921875,"ival-div",0],[83.44921875,"ival-exp",0],[28.3017578125,"ival->",0],[7.12939453125,"exact",0],[62.0634765625,"ival-expm1",0],[3.65234375,"ival-assert",0]],"outcomes":[[376.915283203125,0,"valid",8256]],"time":583.813232421875,"type":"sample"},{"compiler":[[7,5],[17,7],[17,7]],"confusion":[[156,0,0,100]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",156,0,[],[[2]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",156,0,false,0,false],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,156],[0,100]],"maybe-confusion":[[156,0,0,0,0,100]],"memory":[[-4792544,31558336]],"mixsample":[[5.859619140625,"ival-div",0],[0.671142578125,"ival-true",0],[8.393310546875,"ival-exp",0],[5.751708984375,"ival-expm1",0],[0.49853515625,"exact",0],[0.333251953125,"ival-assert",0]],"outcomes":[[39.17041015625,0,"valid",512]],"time":103.06298828125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,5]],"egraph":[[0,14,5,0.000107302],[2,14,7,0.000126869],[1,13,7,0.000109207],[0,8,7,0.000208266],[0,5,7,0.000102246],[11,710,12,0.005036986],[10,660,12,0.005278695],[9,632,12,0.004629429],[8,590,12,0.005975617],[7,458,12,0.004438683],[6,355,12,0.002824738],[5,253,12,0.002509518],[4,132,12,0.001964938],[3,78,18,0.001035329],[2,42,18,0.000721859],[1,22,19,0.000333955],[0,7,19,0.000314543]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[5298752,5298752]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":58.31494140625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06591796875,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","next",37.10539756501055,"binary64"]],"compiler":[[7,5]],"memory":[[304160,304160]],"time":0.47802734375,"type":"prune"},{"egraph":[[0,14,11,9.7405e-5],[2,14,15,8.4184e-5],[1,13,15,8.9777e-5],[0,8,15,0.000154035],[0,5,15,7.2046e-5]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[491664,491664]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp.f64 x)","x","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":5.489990234375,"type":"simplify"},{"compiler":[[17,7]],"locations":[["(exp.f64 x)","accuracy",0.0],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","accuracy",0.00390625],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",36.083752578440006]],"memory":[[-7726208,6361536]],"mixsample":[[4.435546875,"ival-div",0],[0.182861328125,"ival-true",0],[2.683349609375,"ival-exp",0],[1.844970703125,"ival-expm1",0],[0.162109375,"exact",0],[0.0986328125,"ival-assert",0]],"outcomes":[[16.5234375,0,"valid",256]],"time":21.972900390625,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[713344,713344]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"series":[[0.552001953125,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","-inf"],[0.64794921875,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","inf"],[0.633056640625,"((- (exp x) 1) (/ (exp x) (- (exp x) 1)) (exp x))","x","0"]],"time":2.123046875,"type":"series"},{"count":[[15,14]],"egraph":[[0,10260,87,0.069241142],[15,6870,105,0.024922707],[14,6130,105,0.016559636],[13,5581,105,0.013054828],[12,5216,105,0.012109111],[11,4930,105,0.010928734],[10,3369,105,0.015485759],[9,1981,105,0.012839132],[8,1506,105,0.008929635],[7,1088,105,0.006300745],[6,994,111,0.004681742],[5,972,111,0.004473917],[4,829,111,0.004498669],[3,574,111,0.003982695],[2,258,111,0.001887625],[1,122,111,0.001084168],[0,44,111,0.000675019]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(/ (exp x) (- (exp x) 1))","(exp x)"]],"memory":[[228256,32534944]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (exp x) 1)","(expm1.f64 x)","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(exp x)","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1]],"time":335.384033203125,"type":"simplify"},{"count":[[3,351]],"egraph":[[0,8818,9,0.086685714],[3,1809,13,0.036572393],[2,188,13,0.007238907],[1,33,13,0.000769551],[0,8,13,0.000573011],[0,5,13,0.000102192]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))","(exp.f64 x)"]],"memory":[[908912,55835536]],"outputs":[["(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (expm1.f64 (*.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 x))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 x)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (expm1.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (expm1.f64 x) (expm1.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64))) (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64)))) (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (exp.f64 x))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))) (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 4 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 x #s(literal 9 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (exp.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (expm1.f64 (*.f64 x #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (expm1.f64 (*.f64 x #s(literal 9 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 x)))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)))","(expm1.f64 (*.f64 x #s(literal 1 binary64)))","(expm1.f64 x)","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(-.f64 (/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)) (/.f64 (pow.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (exp.f64 x))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (neg.f64 (exp.f64 x))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (expm1.f64 x)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 (neg.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (exp.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (fma.f64 #s(literal -1 binary64) (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64))))","(*.f64 (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (pow.f64 (/.f64 #s(literal -1 binary64) (exp.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (exp.f64 x)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (exp.f64 x))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 x) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(*.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(*.f64 (neg.f64 (exp.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (expm1.f64 x)))","(*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log1p.f64 (neg.f64 (exp.f64 (neg.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (expm1.f64 (neg.f64 x))) (neg.f64 (expm1.f64 (neg.f64 x)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (fma.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 3 binary64))) (fma.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (-.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (-.f64 (*.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (-.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (-.f64 (*.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 3 binary64)) (pow.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 (*.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))))))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (expm1.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (expm1.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))) (neg.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))) (neg.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))) (*.f64 (neg.f64 (expm1.f64 x)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (/.f64 (neg.f64 (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))) (*.f64 (neg.f64 (expm1.f64 x)) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (expm1.f64 x)) (*.f64 (neg.f64 (expm1.f64 x)) (neg.f64 (exp.f64 x)))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (expm1.f64 (neg.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (expm1.f64 x)) (expm1.f64 (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (*.f64 (neg.f64 (expm1.f64 x)) (exp.f64 x))) (pow.f64 (expm1.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (neg.f64 (expm1.f64 x)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 x))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x))) (neg.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x))) (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 (*.f64 (exp.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x))))","(/.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)))","(/.f64 (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))))","(/.f64 (*.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))","(/.f64 (*.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) (exp.f64 x)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(/.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 x)) (neg.f64 (exp.f64 (neg.f64 x))))","(/.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (exp.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))","(/.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (expm1.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 x) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (neg.f64 (expm1.f64 x))) (*.f64 (exp.f64 x) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) (expm1.f64 x)) (*.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (*.f64 (exp.f64 x) (expm1.f64 x)) #s(literal 1 binary64))) (*.f64 (exp.f64 x) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64)))) (*.f64 (exp.f64 x) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (exp.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(/.f64 (exp.f64 x) (expm1.f64 x))","(neg.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 4 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (exp.f64 x) (pow.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (expm1.f64 x)) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(exp.f64 (-.f64 (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64)) (neg.f64 x)))","(exp.f64 (fma.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64) x))","(exp.f64 (+.f64 x (*.f64 (log.f64 (expm1.f64 x)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log1p.f64 (neg.f64 (exp.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))))","(+.f64 (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x))) (*.f64 (exp.f64 x) (/.f64 (exp.f64 x) (expm1.f64 (*.f64 #s(literal 2 binary64) x)))))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 x)))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (exp.f64 x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (exp.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (*.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x))))))","(/.f64 (neg.f64 (exp.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)))","(/.f64 (exp.f64 x) #s(literal 1 binary64))","(neg.f64 (neg.f64 (exp.f64 x)))","(-.f64 #s(literal 0 binary64) (neg.f64 (exp.f64 x)))","(exp.f64 (*.f64 (neg.f64 x) #s(literal -1 binary64)))","(exp.f64 (*.f64 x #s(literal 1 binary64)))","(exp.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":270.840087890625,"type":"rewrite"},{"compiler":[[9463,1223]],"memory":[[3335600,37228912]],"time":44.322998046875,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","next",0.00390625,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","next",24.3510610220429,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","next",24.26570097364405,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","next",24.07122790403044,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","next",24.364327933273188,"binary64"]],"compiler":[[5,5],[21,15],[16,12],[11,8],[13,10],[5,5],[21,15],[16,12],[11,8],[13,10]],"count":[[386,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[385,5],"picked":[1,0]}],"memory":[[-3306624,15976224]],"min-error":[[0.0,"binary64"]],"time":33.1640625,"type":"prune"},{"egraph":[[0,300,136,0.001390769],[9,300,144,0.001300713],[8,294,144,0.001553351],[7,264,144,0.001706772],[6,204,144,0.001309313],[5,171,144,0.000945053],[4,165,144,0.000804635],[3,136,144,0.000758734],[2,85,144,0.000566956],[1,56,144,0.000422046],[0,35,144,0.000376191],[0,22,144,0.000421138]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal -1 binary64)","(expm1.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/12 binary64)","x","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"locations":[["(*.f64 x x)","cost-diff",0],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(neg.f64 x)","cost-diff",0],["(expm1.f64 (neg.f64 x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","cost-diff",0]],"memory":[[1800912,1800912]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","#s(literal -1 binary64)","(expm1.f64 (neg.f64 x))","(neg.f64 x)","x","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(literal 1/12 binary64)","x","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(*.f64 x x)","x","#s(literal -1/720 binary64)","#s(literal 1/12 binary64)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":20.1748046875,"type":"simplify"},{"compiler":[[121,23]],"locations":[["(*.f64 x x)","accuracy",0.0],["(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.03515625],["(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","accuracy",0.049160009768442016],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","accuracy",24.3471547720429],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.0],["(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",0.140625],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","accuracy",24.26570097364405],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","accuracy",0.0],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","accuracy",24.364327933273188],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","accuracy",24.07122790403044],["(neg.f64 x)","accuracy",0.0],["(expm1.f64 (neg.f64 x))","accuracy",0.0],["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","accuracy",0.00390625]],"memory":[[-1639200,23186384]],"mixsample":[[8.489013671875,"ival-div",0],[4.8271484375,"ival-add",0],[2.3798828125,"ival-exp",0],[6.218505859375,"ival-mult",0],[3.532470703125,"ival-expm1",0],[0.09326171875,"ival-assert",0],[0.194091796875,"ival-true",0],[6.238525390625,"const",0],[0.38818359375,"exact",0],[1.283203125,"ival-neg",0]],"outcomes":[[48.67724609375,0,"valid",256]],"time":64.942138671875,"type":"localize"},{"count":[[13,31]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(expm1.f64 (neg.f64 x))","(neg.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[3091040,3091040]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(pow x 2)","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(/ (exp x) (- (exp x) 1))","1/2","(+ 1/2 (/ 1 x))","(* 1/12 x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"series":[[2.385986328125,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","-inf"],[2.909912109375,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","inf"],[1.55712890625,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (neg x) (/ (exp x) (- (exp x) 1)) (/ 1 x) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ (exp x) (- (exp x) 1)) (+ (* (+ (* (* x x) -1/720) 1/12) x) (+ 1/2 (/ 1 x))) (+ (* (* x x) -1/720) 1/12) (* x x))","x","0"]],"time":7.56884765625,"type":"series"},{"count":[[31,31]],"egraph":[[0,8297,202,0.055756605],[4,6452,237,0.024128542],[3,2120,254,0.024516658],[2,705,267,0.006962503],[1,250,277,0.002602753],[0,98,278,0.000949986]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","1/12","(+ 1/12 (* -1/720 (pow x 2)))","(pow x 2)","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(/ (exp x) (- (exp x) 1))","1/2","(+ 1/2 (/ 1 x))","(* 1/12 x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* -1/720 (pow x 3))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))"]],"memory":[[3599296,25151200]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/720 binary64) (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","1/12","#s(literal 1/12 binary64)","(+ 1/12 (* -1/720 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(pow x 2)","(*.f64 x x)","(/ -1 (- (exp (neg x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (neg x)) 1)","(expm1.f64 (neg.f64 x))","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (/ 1 x))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","(* 1/12 x)","(*.f64 #s(literal 1/12 binary64) x)","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(* -1/720 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/720 binary64))","(* (pow x 3) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (* 1/12 (/ 1 (pow x 2)))) 1/720))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* (pow x 3) (- (+ (/ 1/2 (pow x 3)) (+ (* 1/12 (/ 1 (pow x 2))) (/ 1 (pow x 4)))) 1/720))","(fma.f64 (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/720 binary64)) (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(* -1/720 (pow x 2))","(*.f64 (*.f64 x x) #s(literal -1/720 binary64))","(* (pow x 2) (- (* 1/12 (/ 1 (pow x 2))) 1/720))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(/ -1 (- (exp (* -1 x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (* -1 x)) 1)","(expm1.f64 (neg.f64 x))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(* -1 (* (pow x 3) (- 1/720 (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x)","(* -1 (* (pow x 3) (+ 1/720 (* -1 (/ (+ 1/12 (* 1/2 (/ 1 x))) (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))","(* -1 (* (pow x 3) (- (+ 1/720 (* -1 (/ (+ 1/2 (/ 1 x)) (pow x 3)))) (* 1/12 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (+.f64 (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) (fma.f64 (*.f64 #s(literal 1/720 binary64) x) x #s(literal -1/12 binary64)))) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":183.4150390625,"type":"simplify"},{"count":[[13,437]],"egraph":[[0,8297,101,0.092440007],[2,1132,101,0.032513276],[1,150,109,0.005150129],[0,35,109,0.001350845],[0,22,109,0.000244961]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(expm1.f64 (neg.f64 x))","(neg.f64 x)","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(*.f64 x x)"]],"memory":[[-5564352,60974368]],"outputs":[["(*.f64 (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (exp.f64 x) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 x) #s(literal -1 binary64)) (exp.f64 x))","(*.f64 (neg.f64 (exp.f64 x)) (/.f64 #s(literal -1 binary64) (expm1.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (exp.f64 x) (expm1.f64 x)))","(*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(pow.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(neg.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (exp.f64 (neg.f64 x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log1p.f64 (neg.f64 (exp.f64 (neg.f64 x)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (exp.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (exp.f64 x)))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(+.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (exp.f64 (neg.f64 x))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (expm1.f64 (neg.f64 x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))))","(*.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (neg.f64 x)))","(*.f64 (expm1.f64 (neg.f64 x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(pow.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (neg.f64 (exp.f64 (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))))","(/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (exp.f64 x) #s(literal -3 binary64))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal -2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))))","(/.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (neg.f64 x))) #s(literal -1 binary64))","(/.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)))) (expm1.f64 (*.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (neg.f64 x)) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (neg.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 (exp.f64 x) (expm1.f64 x)))","(neg.f64 (neg.f64 (expm1.f64 (neg.f64 x))))","(fma.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) (pow.f64 (exp.f64 x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (/.f64 (exp.f64 (neg.f64 x)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (exp.f64 x))) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) x))","(expm1.f64 (neg.f64 x))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (neg.f64 x))))","(-.f64 (exp.f64 (neg.f64 x)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x)))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal -2 binary64)) #s(literal 1 binary64)) (exp.f64 (neg.f64 x))) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 x)) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (exp.f64 (neg.f64 x)))","(*.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))))","(*.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))))","(*.f64 x #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) x)","(/.f64 (neg.f64 (neg.f64 (*.f64 x x))) (neg.f64 x))","(/.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 x x #s(literal 0 binary64))))","(/.f64 (neg.f64 (*.f64 x x)) x)","(/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 x x) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (fma.f64 x x #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (neg.f64 (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal 0 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(neg.f64 x)","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) #s(literal 0 binary64))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 x #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) x #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) x) (/.f64 (*.f64 x x) x))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 x x #s(literal 0 binary64))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x #s(literal 0 binary64))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (neg.f64 (exp.f64 x))))","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 x) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(+.f64 (neg.f64 x) #s(literal 0 binary64))","(log.f64 (exp.f64 (neg.f64 x)))","#s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) x))","(exp.f64 (neg.f64 (log.f64 x)))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) (*.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))) (+.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) x))","(+.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))))))","(*.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64)))) #s(literal 1/4 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)))) (-.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))) (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) x (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (neg.f64 x) (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)) x (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)) (neg.f64 x) (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (*.f64 x (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)))) (*.f64 x (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x)) (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 1/144 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(literal -1/12 binary64) (*.f64 x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 1/2 binary64))))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (pow.f64 (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1/12 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))) (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(-.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(+.f64 (fma.f64 #s(literal 1/12 binary64) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(+.f64 (/.f64 (*.f64 #s(literal 1/144 binary64) (*.f64 x x)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(+.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 1/12 binary64) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/12 binary64) x))","(+.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 #s(literal 1/12 binary64) x)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(*.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64)))) #s(literal 1/4 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)))) (-.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) (-.f64 #s(literal 1/4 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))) (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))))","(/.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (*.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) x))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (neg.f64 x) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) x (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) x))","(/.f64 (fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (neg.f64 x) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) (neg.f64 x)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))) (*.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (*.f64 x (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (*.f64 (neg.f64 x) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 x) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (*.f64 (neg.f64 x) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)) (-.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) x) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (*.f64 x (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal -1 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 1/2 binary64))))) (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (pow.f64 (-.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1/2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 #s(literal 1/4 binary64) (pow.f64 x #s(literal -2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 x (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))))","(-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) x))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64))) (neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x (/.f64 #s(literal -1 binary64) x)) #s(literal 1/2 binary64)))))","(+.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x) (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))","(+.f64 (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x))","(+.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))) (*.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))) (+.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (fma.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal 1/144 binary64))) (*.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64))) (neg.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64))))))","(/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/144 binary64)) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/144 binary64) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x))) (-.f64 #s(literal 1/144 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/144 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/8640 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/1728 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64)))))","(fma.f64 (*.f64 #s(literal -1/720 binary64) x) x #s(literal 1/12 binary64))","(fma.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/12 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64))","(fma.f64 x (*.f64 #s(literal -1/720 binary64) x) #s(literal 1/12 binary64))","(-.f64 (/.f64 #s(literal 1/144 binary64) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64))) (neg.f64 (/.f64 #s(literal 1/144 binary64) (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal -1/12 binary64)))))","(+.f64 (*.f64 #s(literal -1/720 binary64) (*.f64 x x)) #s(literal 1/12 binary64))","(+.f64 #s(literal 1/12 binary64) (*.f64 #s(literal -1/720 binary64) (*.f64 x x)))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 (neg.f64 x) (neg.f64 x))","(*.f64 x x)","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 (neg.f64 x) #s(literal 2 binary64))","(pow.f64 x #s(literal 2 binary64))","(/.f64 x (pow.f64 x #s(literal -1 binary64)))","(fma.f64 (neg.f64 x) #s(literal 0 binary64) (*.f64 x x))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(+.f64 (*.f64 (neg.f64 x) #s(literal 0 binary64)) (*.f64 x x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":338.675048828125,"type":"rewrite"},{"compiler":[[17573,1892]],"memory":[[3352816,53019808]],"time":77.56103515625,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","done",0.00390625,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","next",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",7.995687077223153,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","next",11.981848515127963,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",24.3510610220429,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",24.26570097364405,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","next",62.23742129111119,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",24.07122790403044,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",24.364327933273188,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","next",61.97677111584752,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","next",62.04820250453565,"binary64"]],"compiler":[[5,5],[20,15],[17,13],[14,11],[21,15],[16,12],[18,13],[11,8],[13,10],[21,15],[15,11],[20,15],[17,13],[14,11],[18,13],[21,15],[15,11]],"count":[[581,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[576,6],"picked":[5,5]}],"memory":[[-3208496,24917888]],"min-error":[[0.0,"binary64"]],"time":14.241943359375,"type":"prune"},{"egraph":[[0,5149,199,0.032773331],[25,5149,215,0.045827081],[24,5148,215,0.044181922],[23,5136,215,0.047957571],[22,5107,215,0.052711554],[21,5107,215,0.023263317],[20,5095,215,0.022428314],[19,5080,215,0.022953754],[18,5070,215,0.022688817],[17,5037,215,0.02275531],[16,4993,215,0.022328055],[15,4935,215,0.02279334],[14,4852,215,0.023221903],[13,4793,215,0.022157461],[12,4686,215,0.016862156],[11,4405,215,0.025359513],[10,4383,215,0.013839925],[9,4336,215,0.014681084],[8,4187,215,0.01521997],[7,3308,215,0.02228183],[6,2028,215,0.014879134],[5,1062,215,0.008709241],[4,448,215,0.002891336],[3,224,215,0.001307506],[2,115,215,0.000847729],[1,72,215,0.000685598],[0,48,215,0.000527653],[0,34,215,0.000298727]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(literal 1/12 binary64)","x","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","#s(literal 1/2 binary64)","x"]],"locations":[["(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","cost-diff",0],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","cost-diff",0],["(*.f64 #s(literal 1/12 binary64) x)","cost-diff",0],["#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","cost-diff",0],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0]],"memory":[[701280,15739920]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(literal 1/12 binary64)","x","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(literal 1/12 binary64)","x","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","#s(literal 1/2 binary64)","x"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":628.637939453125,"type":"simplify"},{"compiler":[[146,29]],"locations":[["(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","accuracy",0.0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","accuracy",0.00390625],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","accuracy",0.01953125],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","accuracy",11.986891686752644],["(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","accuracy",0.140625],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","accuracy",24.26570097364405],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","accuracy",38.44121404465149],["(*.f64 #s(literal 1/12 binary64) x)","accuracy",0.3515625],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","accuracy",24.26570097364405],["#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","accuracy",38.193687228943226],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","accuracy",24.364327933273188],["#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","accuracy",38.44121404465149],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.03515625],["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.05859375],["(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","accuracy",0.15625],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",5.9836152590226455]],"memory":[[965312,26394032]],"mixsample":[[5.380615234375,"ival-div",0],[6.806396484375,"ival-add",0],[2.379638671875,"ival-exp",0],[10.71142578125,"ival-mult",0],[3.739013671875,"ival-expm1",0],[0.10595703125,"ival-assert",0],[0.203125,"ival-true",0],[8.884521484375,"const",0],[0.379638671875,"exact",0],[1.34326171875,"ival-neg",0]],"outcomes":[[81.026611328125,0,"valid",256]],"time":98.237060546875,"type":"localize"},{"count":[[17,52]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))"]],"memory":[[3444048,3444048]],"outputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(* 1/12 x)","-1/6","(- (* 1/24 x) 1/6)","1/2","(+ 1/2 (* -1/6 x))","(+ 1/2 (* x (- (* 1/24 x) 1/6)))","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(/ (exp x) (- (exp x) 1))","(+ 1/2 (/ 1 x))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/2 (pow x 2))","(* (pow x 2) (- 1/2 (/ 1 x)))","(* 1/2 x)","(* x (- 1/2 (/ 1 x)))","(* 1/24 x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(* 1/24 (pow x 2))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* x (- (/ 1 x) 1/2)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(* (pow x 2) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))"]],"series":[[3.35693359375,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (+ (* 1/24 x) -1/6) (+ (* (+ (* 1/24 x) -1/6) x) 1/2))","x","-inf"],[2.162109375,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (+ (* 1/24 x) -1/6) (+ (* (+ (* 1/24 x) -1/6) x) 1/2))","x","inf"],[1.364990234375,"((/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ (exp x) (- (exp x) 1)) (+ 1/2 (/ 1 x)) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (* 1/12 x) (/ (exp x) (- (exp x) 1)) (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* 1/2 x) -1) x) (+ (* 1/2 x) -1) (+ (* 1/24 x) -1/6) (+ (* (+ (* 1/24 x) -1/6) x) 1/2))","x","0"]],"time":7.8310546875,"type":"series"},{"count":[[52,52]],"egraph":[[0,8565,341,0.092863355],[3,2751,399,0.030756882],[2,971,404,0.011373714],[1,353,416,0.00327512],[0,128,429,0.001274044]],"inputs":[["(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(* 1/12 x)","-1/6","(- (* 1/24 x) 1/6)","1/2","(+ 1/2 (* -1/6 x))","(+ 1/2 (* x (- (* 1/24 x) 1/6)))","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(/ (exp x) (- (exp x) 1))","(+ 1/2 (/ 1 x))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/2 (pow x 2))","(* (pow x 2) (- 1/2 (/ 1 x)))","(* 1/2 x)","(* x (- 1/2 (/ 1 x)))","(* 1/24 x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(* 1/24 (pow x 2))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(* -1 (* x (- (/ 1 x) 1/2)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(* (pow x 2) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))"]],"memory":[[-4945728,44963792]],"method":["egg-herbie"],"outputs":[["(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -1/6 x))) 1)","(fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* 1/12 x)","(*.f64 #s(literal 1/12 binary64) x)","-1/6","#s(literal -1/6 binary64)","(- (* 1/24 x) 1/6)","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/6 x))","(fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (- (* 1/24 x) 1/6)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(/ -1 (- (exp (neg x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (neg x)) 1)","(expm1.f64 (neg.f64 x))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (-.f64 #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) x)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(/ (exp x) (- (exp x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(+ 1/2 (/ 1 x))","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))","(* x (+ 1/12 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64))","(* x (+ 1/12 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 #s(literal 1/12 binary64) x (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (- 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (- 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (- 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(* 1/24 (pow x 2))","(*.f64 (*.f64 #s(literal 1/24 binary64) x) x)","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(* (pow x 2) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(/ -1 (- (exp (* -1 x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (* -1 x)) 1)","(expm1.f64 (neg.f64 x))","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* -1 (* x (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/12)))","(fma.f64 #s(literal 1/12 binary64) x (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(* -1 (* x (- (/ 1 x) 1/2)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(* (pow x 2) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":244.001953125,"type":"simplify"},{"count":[[17,316]],"egraph":[[0,8526,178,0.079041192],[2,1474,194,0.03032991],[1,202,194,0.005848583],[0,48,194,0.001586674],[0,34,194,0.000300269]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))"]],"memory":[[3380144,54158560]],"outputs":[["(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 #s(literal 1/12 binary64) x)","(*.f64 x #s(literal 1/12 binary64))","(/.f64 #s(literal 1/12 binary64) (pow.f64 x #s(literal -1 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(*.f64 (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))) (*.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (fma.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64))) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/144 binary64) (*.f64 x x) (*.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x)) (-.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1/12 binary64) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))) (neg.f64 (/.f64 (pow.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))))","(+.f64 (*.f64 #s(literal 1/12 binary64) x) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","(+.f64 #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1/12 binary64) x))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1 binary64) (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (neg.f64 x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)","(-.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x)","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/2 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)) (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (*.f64 x #s(literal -1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","(+.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":266.85595703125,"type":"rewrite"},{"compiler":[[11323,1679]],"memory":[[3815248,35713536]],"time":44.55908203125,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","done",0.00390625,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","fresh",40.494952729491786,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","done",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","next",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","next",7.995687077223153,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","next",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","next",6.5969527333539,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","done",11.981848515127963,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","fresh",43.61405627218898,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","fresh",42.69887833179104,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","fresh",49.31799502627815,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",24.3510610220429,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",24.26570097364405,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","done",62.23742129111119,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",24.07122790403044,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",24.364327933273188,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","done",61.97677111584752,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","done",62.04820250453565,"binary64"],["#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","next",24.36823418320942,"binary64"]],"compiler":[[5,5],[50,21],[20,15],[27,20],[24,18],[21,16],[23,18],[24,18],[28,21],[14,11],[33,26],[32,25],[19,16],[21,15],[16,12],[18,13],[11,8],[13,10],[21,15],[15,11],[14,12],[50,21],[27,20],[24,18],[21,16],[23,18],[24,18],[28,21],[33,26],[32,25],[19,16],[14,12]],"count":[[366,21]],"kept":[{"done":[5,5],"fresh":[1,0],"new":[355,11],"picked":[5,5]}],"memory":[[-11282592,21121792]],"min-error":[[0.0,"binary64"]],"time":71.4580078125,"type":"prune"},{"egraph":[[0,8023,374,0.060745679],[22,7807,392,0.01617768],[21,7311,392,0.053042372],[20,7309,392,0.042451365],[19,7305,392,0.044729628],[18,7303,392,0.043366031],[17,7301,392,0.036663938],[16,7297,392,0.037301711],[15,7216,392,0.041112383],[14,7058,394,0.046890256],[13,7035,394,0.04661182],[12,6952,394,0.039752325],[11,6939,394,0.02720171],[10,6930,394,0.020871105],[9,6887,394,0.021585927],[8,6708,394,0.022223494],[7,5411,394,0.026873456],[6,4163,394,0.028628441],[5,2145,394,0.01797558],[4,921,394,0.007783346],[3,417,394,0.003849123],[2,177,394,0.001914738],[1,111,394,0.000853035],[0,77,394,0.000714887],[0,44,414,0.000850289]],"inputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","#s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64))","#s(literal -1/6 binary64)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64))","#s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/24 binary64) x) x)","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)"]],"locations":[["(*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0],["(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","cost-diff",1],["(fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","cost-diff",0],["(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","cost-diff",0],["(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","cost-diff",1],["(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)","cost-diff",0],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x))","cost-diff",0],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","cost-diff",4]],"memory":[[7748448,29150960]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ -1 (- (exp (neg x)) 1)) (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","#s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64))","#s(literal -1/6 binary64)","x","#s(literal 1/2 binary64)","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64))","#s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/24 binary64) x) x)","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(literal -1 binary64)","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(*.f64 #s(literal 1/24 binary64) x)","#s(literal 1/24 binary64)","x","#s(literal -1/6 binary64)","#s(literal 1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":793.669921875,"type":"simplify"},{"compiler":[[296,27]],"locations":[["(fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.03515625],["(fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.05859375],["(*.f64 #s(literal 1/24 binary64) x)","accuracy",0.3515625],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",5.9836152590226455],["(*.f64 (*.f64 #s(literal 1/24 binary64) x) x)","accuracy",0.125],["(*.f64 #s(literal 1/24 binary64) x)","accuracy",0.3515625],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x))","accuracy",5.9836152590226455],["#s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x))","accuracy",38.008598766436606],["(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","accuracy",0.03515625],["(fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.05859375],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","accuracy",5.9836152590226455],["#s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64))","accuracy",24.13932687940984],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","accuracy",0.0078125],["#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","accuracy",24.364327933273188],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","accuracy",0.06640625],["(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","accuracy",0.15625],["(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","accuracy",0.5543543719299989],["#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x))","accuracy",5.9836152590226455]],"memory":[[-4186704,31672800]],"mixsample":[[6.8984375,"ival-div",0],[5.765625,"ival-add",0],[12.21630859375,"ival-mult",0],[2.02978515625,"ival-expm1",0],[0.0986328125,"ival-assert",0],[0.205322265625,"ival-true",0],[7.251953125,"const",0],[0.3720703125,"exact",0],[1.392578125,"ival-neg",0]],"outcomes":[[99.279541015625,0,"valid",256]],"time":122.328125,"type":"localize"},{"count":[[28,55]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64))","(fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","#s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 (*.f64 #s(literal 1/24 binary64) x) x)","(fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))"]],"memory":[[-5139296,4021552]],"outputs":[["1/2","(+ 1/2 (* -1/6 x))","(+ 1/2 (* x (- (* 1/24 x) 1/6)))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","1","(+ 1 (* 1/2 x))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","-1/6","(- (* 1/24 x) 1/6)","2","(+ 2 (* 2/3 x))","(+ 2 (* x (+ 2/3 (* 1/18 x))))","(+ 2 (* x (+ 2/3 (* x (+ 1/18 (* -1/27 x))))))","(* 1/24 x)","(* 1/24 (pow x 2))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(+ 1/2 (/ 1 x))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* x (- 1/24 (* 1/6 (/ 1 x))))","(/ 24 (pow x 2))","(/ (+ 24 (* 96 (/ 1 x))) (pow x 2))","(/ (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (pow x 2))","(/ (- (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (* 768 (/ 1 (pow x 3)))) (pow x 2))","(* (pow x 2) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(/ (+ 24 (* -1 (/ (- (* -1 (/ (- 96 (* 768 (/ 1 x))) x)) 96) x))) (pow x 2))"]],"series":[[3.8388671875,"((/ 1 (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (/ 1 (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2))) x) -1) x) (/ (+ (* 1/2 x) 1) x) (/ -1 (- (exp (neg x)) 1)) (+ (* 1/2 x) 1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (+ (* 1/24 x) -1/6) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (+ (* 1/24 x) -1/6) (+ (* 1/24 x) -1/6) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (* 1/24 x) (* (* 1/24 x) x) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))","x","-inf"],[2.5078125,"((/ 1 (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (/ 1 (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2))) x) -1) x) (/ (+ (* 1/2 x) 1) x) (/ -1 (- (exp (neg x)) 1)) (+ (* 1/2 x) 1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (+ (* 1/24 x) -1/6) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (+ (* 1/24 x) -1/6) (+ (* 1/24 x) -1/6) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (* 1/24 x) (* (* 1/24 x) x) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))","x","inf"],[1.548828125,"((/ 1 (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2))) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (/ 1 (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2))) x) -1) x) (/ (+ (* 1/2 x) 1) x) (/ -1 (- (exp (neg x)) 1)) (+ (* 1/2 x) 1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (+ (* 1/24 x) -1/6) (/ -1 (- (exp (neg x)) 1)) (- (exp (neg x)) 1) (* (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) x) (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (+ (* 1/24 x) -1/6) (+ (* 1/24 x) -1/6) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (* 1/24 x) (* (* 1/24 x) x) (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1))","x","0"]],"time":9.260986328125,"type":"series"},{"count":[[55,55]],"egraph":[[0,8318,409,0.085712747],[3,2955,458,0.034871103],[2,1102,470,0.010334016],[1,416,484,0.003737308],[0,148,504,0.001460214]],"inputs":[["1/2","(+ 1/2 (* -1/6 x))","(+ 1/2 (* x (- (* 1/24 x) 1/6)))","(/ 1 x)","(/ (+ 1 (* 1/2 x)) x)","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(* -1 x)","(* x (- (* 1/2 x) 1))","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","1","(+ 1 (* 1/2 x))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -1/6 x))) 1)","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","-1/6","(- (* 1/24 x) 1/6)","2","(+ 2 (* 2/3 x))","(+ 2 (* x (+ 2/3 (* 1/18 x))))","(+ 2 (* x (+ 2/3 (* x (+ 1/18 (* -1/27 x))))))","(* 1/24 x)","(* 1/24 (pow x 2))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(/ -1 (- (exp (neg x)) 1))","(- (exp (neg x)) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(+ 1/2 (/ 1 x))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/24 (pow x 3))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(* x (- 1/24 (* 1/6 (/ 1 x))))","(/ 24 (pow x 2))","(/ (+ 24 (* 96 (/ 1 x))) (pow x 2))","(/ (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (pow x 2))","(/ (- (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (* 768 (/ 1 (pow x 3)))) (pow x 2))","(* (pow x 2) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(/ -1 (- (exp (* -1 x)) 1))","(- (exp (* -1 x)) 1)","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(/ (+ 24 (* -1 (/ (- (* -1 (/ (- 96 (* 768 (/ 1 x))) x)) 96) x))) (pow x 2))"]],"memory":[[5998032,38473264]],"method":["egg-herbie"],"outputs":[["1/2","#s(literal 1/2 binary64)","(+ 1/2 (* -1/6 x))","(fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (- (* 1/24 x) 1/6)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (* 1/2 x)) x)","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(/ (+ 1 (* x (+ 1/2 (* 1/12 x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(/ (+ 1 (* x (+ 1/2 (* x (+ 1/12 (* -1/720 (pow x 2))))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/2 x) 1))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* -1/6 x))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -1/6 x))) 1)","(fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 1/24 x) 1/6)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","-1/6","#s(literal -1/6 binary64)","(- (* 1/24 x) 1/6)","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","2","#s(literal 2 binary64)","(+ 2 (* 2/3 x))","(fma.f64 #s(literal 2/3 binary64) x #s(literal 2 binary64))","(+ 2 (* x (+ 2/3 (* 1/18 x))))","(fma.f64 (fma.f64 #s(literal 1/18 binary64) x #s(literal 2/3 binary64)) x #s(literal 2 binary64))","(+ 2 (* x (+ 2/3 (* x (+ 1/18 (* -1/27 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/27 binary64) x #s(literal 1/18 binary64)) x #s(literal 2/3 binary64)) x #s(literal 2 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x)","(* (pow x 2) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64))) x)","(/ -1 (- (exp (neg x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (neg x)) 1)","(expm1.f64 (neg.f64 x))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/24 binary64) (/.f64 #s(literal 1/6 binary64) x)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)))","(* (pow x 4) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(+ 1/2 (/ 1 x))","(+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1/2 binary64))","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (- 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64))) (*.f64 x x))","(* (pow x 3) (- (+ 1/24 (/ 1/2 (pow x 2))) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3)))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64))) (*.f64 x x))","(* x (- 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(/ 24 (pow x 2))","(/.f64 #s(literal 24 binary64) (*.f64 x x))","(/ (+ 24 (* 96 (/ 1 x))) (pow x 2))","(/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x)","(/ (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (pow x 2))","(/.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) (*.f64 x x))","(/ (- (+ 24 (+ (* 96 (/ 1 x)) (/ 96 (pow x 2)))) (* 768 (/ 1 (pow x 3)))) (pow x 2))","(/.f64 (-.f64 #s(literal 24 binary64) (/.f64 (-.f64 #s(literal -96 binary64) (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 768 binary64) x)) x)) x)) (*.f64 x x))","(* (pow x 2) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64))) x)","(/ -1 (- (exp (* -1 x)) 1))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(- (exp (* -1 x)) 1)","(expm1.f64 (neg.f64 x))","(* (pow x 4) (+ 1/24 (* -1 (/ (- 1/6 (* 1/2 (/ 1 x))) x))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)))","(* (pow x 4) (+ 1/24 (* -1 (/ (+ 1/6 (* -1 (/ (- 1/2 (/ 1 x)) x))) x))))","(*.f64 (-.f64 (/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64)) x) #s(literal -1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* -1 (* (pow x 3) (- (* 1/6 (/ 1 x)) 1/24)))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* 1/2 (/ 1 x)) 1/6) x)) 1/24)))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1/6 binary64))) (*.f64 x x))","(* -1 (* (pow x 3) (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1/2) x)) 1/6) x)) 1/24)))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1/6 binary64))) (*.f64 x x))","(* -1 (* x (- (* 1/6 (/ 1 x)) 1/24)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(/ (+ 24 (* -1 (/ (- (* -1 (/ (- 96 (* 768 (/ 1 x))) x)) 96) x))) (pow x 2))","(/.f64 (-.f64 #s(literal 24 binary64) (/.f64 (-.f64 #s(literal -96 binary64) (/.f64 (-.f64 #s(literal 96 binary64) (/.f64 #s(literal 768 binary64) x)) x)) x)) (*.f64 x x))"]],"stop":[["iter limit",1],["node limit",1]],"time":264.517822265625,"type":"simplify"},{"count":[[28,751]],"egraph":[[0,8636,335,0.085090758],[2,1498,353,0.031306945],[1,264,353,0.005534892],[0,75,353,0.002126268],[0,44,369,0.000492584]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)","(fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","#s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64))","(fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","#s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 (*.f64 #s(literal 1/24 binary64) x) x)","(fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))"]],"memory":[[-297616,67264240]],"outputs":[["(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1 binary64) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))","(*.f64 (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (/.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) x)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) x))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) x))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) x) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) x))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) x))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) x) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))) #s(literal -1 binary64)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(fma.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(fma.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) x)","(-.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) x)","(+.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))))))","(*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x))) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) (neg.f64 x)))) (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal -1 binary64))","(fma.f64 x #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64))) (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(fma.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))) (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(+.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","(*.f64 (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(pow.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(neg.f64 (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))) #s(literal -1 binary64)))","(*.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","#s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) #s(literal -1 binary64))","(/.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 (neg.f64 (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal 0 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) (log.f64 (exp.f64 x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (log.f64 (exp.f64 #s(literal -1 binary64))) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))","(/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))","(/.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(/.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(-.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (/.f64 (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(-.f64 (/.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(exp.f64 (neg.f64 (log.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))))","(*.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64))) (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (*.f64 (neg.f64 x) #s(literal -1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))))","(fma.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))) (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (-.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal 2 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)))))","(+.f64 (*.f64 x #s(literal 1/24 binary64)) #s(literal -1/6 binary64))","(+.f64 #s(literal -1/6 binary64) (*.f64 x #s(literal 1/24 binary64)))","#s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x))","#s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x))","(*.f64 x #s(literal 1/24 binary64))","(*.f64 #s(literal 1/24 binary64) x)","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(*.f64 (*.f64 x #s(literal 1/24 binary64)) x)","(*.f64 x (*.f64 x #s(literal 1/24 binary64)))","(*.f64 #s(literal 1/24 binary64) (*.f64 x x))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal -1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1 binary64) #s(literal 1/2 binary64))","(fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) #s(literal 1/2 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64))) (/.f64 x (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64))) (/.f64 x (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64))) (/.f64 x (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 x (pow.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (/.f64 x (pow.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (/.f64 x (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (neg.f64 x) (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x)) x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(fma.f64 x (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (*.f64 (fma.f64 (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":255.508056640625,"type":"rewrite"},{"compiler":[[23805,3042]],"memory":[[1533408,64213760]],"time":85.2060546875,"type":"eval"},{"alts":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","done",0.00390625,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","fresh",39.792633565133606,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))))","fresh",41.103514715049485,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","done",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","fresh",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","done",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","done",7.995687077223153,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","done",5.986769507564636,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x))) x #s(literal -1 binary64)) x)))","fresh",6.596210981747811,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 #s(literal 24 binary64) (*.f64 x x)))) x #s(literal -1 binary64)) x)))","fresh",6.5969527333539,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","done",6.5969527333539,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","done",11.981848515127963,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","fresh",43.61405627218898,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","fresh",42.69887833179104,"binary64"],["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","fresh",49.31799502627815,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",24.3510610220429,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","done",24.26570097364405,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","done",62.23742129111119,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","done",24.07122790403044,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","done",24.364327933273188,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","done",61.97677111584752,"binary64"],["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","done",62.04820250453565,"binary64"],["#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",24.36823418320942,"binary64"]],"compiler":[[729,194],[5,5],[61,24],[76,27],[20,15],[27,20],[24,18],[21,16],[23,18],[24,18],[36,27],[32,24],[28,21],[14,11],[33,26],[32,25],[19,16],[21,15],[16,12],[18,13],[11,8],[13,10],[21,15],[15,11],[14,12]],"count":[[657,24]],"kept":[{"done":[10,10],"fresh":[6,3],"new":[636,6],"picked":[5,5]}],"memory":[[-3313360,34207552]],"min-error":[[0.0,"binary64"]],"time":58.64892578125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",0.00390625,1,"binary64"],["(exp.f64 x)",0.00390625,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[29,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 #s(literal 24 binary64) (*.f64 x x)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"memory":[[4445920,12147840]],"oracle":[63.69337259509174],"outputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))"]],"repr":["binary64"],"time":20.901123046875,"times":[[6.93896484375,"x"],[6.4169921875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[5.490966796875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[2.171302291783934],"baseline":[5.986769507564636],"branch":[["x",2.171302291783934,3,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",5.986769507564637,1,"binary64"],["(exp.f64 x)",5.986769507564636,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[27,3]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 #s(literal 24 binary64) (*.f64 x x)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))"]],"memory":[[-4493648,11526848]],"oracle":[63.61995763441722],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":21.98583984375,"times":[[6.7509765625,"x"],[5.217041015625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[7.56689453125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[2.1719339867269554],"baseline":[5.986769507564636],"branch":[["x",2.1719339867269554,3,"binary64"]],"compiler":[[1,1]],"count":[[26,3]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 #s(literal 24 binary64) (*.f64 x x)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))))"]],"memory":[[5202528,5202528]],"oracle":[63.61995763441722],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x)))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":8.68017578125,"times":[[6.97900390625,"x"]],"type":"regimes"},{"accuracy":[3.372238856698404],"baseline":[5.986769507564636],"branch":[["x",3.372238856698404,3,"binary64"]],"compiler":[[1,1]],"count":[[25,3]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 #s(literal 24 binary64) (*.f64 x x)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))"]],"memory":[[-4161584,5042336]],"oracle":[63.58537113866769],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x)))))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":8.89892578125,"times":[[6.81396484375,"x"]],"type":"regimes"},{"accuracy":[5.986769507564636],"baseline":[5.986769507564636],"branch":[["(exp.f64 x)",5.986769507564636,1,"binary64"],["x",5.986769507564637,1,"binary64"]],"compiler":[[2,2],[1,1]],"count":[[24,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 #s(literal 24 binary64) (*.f64 x x)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)))) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 x #s(literal 1/24 binary64) #s(literal -1/6 binary64)))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (+ (* (+ (* 1/24 x) -1/6) x) 1/2)) (/.f64 (/.f64 (+.f64 (/.f64 #s(literal 96 binary64) x) #s(literal 24 binary64)) x) x))) x #s(literal -1 binary64)) x)))"]],"memory":[[-191568,7705584]],"oracle":[63.253839368511876],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":13.471923828125,"times":[[5.39697265625,"(exp.f64 x)"],[6.594970703125,"x"]],"type":"regimes"},{"accuracy":[6.596952733353899],"baseline":[6.5969527333539],"branch":[["x",6.596952733353902,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",6.596952733353899,1,"binary64"],["(exp.f64 x)",6.596952733353901,1,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[15,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)))"]],"memory":[[59008,8083248]],"oracle":[63.253839368511876],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":12.35400390625,"times":[[4.407958984375,"x"],[3.800048828125,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.0,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[5.911484058407067],"baseline":[7.995687077223153],"branch":[["x",5.911484058407068,2,"binary64"],["(exp.f64 x)",5.911484058407067,2,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",5.911484058407067,3,"binary64"]],"compiler":[[1,1],[2,2],[7,5]],"count":[[13,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))"]],"memory":[[-857936,7342736]],"oracle":[63.25383936806182],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":10.74609375,"times":[[3.7060546875,"x"],[2.80908203125,"(exp.f64 x)"],[3.14013671875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"accuracy":[7.99568707722315],"baseline":[7.995687077223153],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",7.9956870772231525,1,"binary64"],["x",7.99568707722315,1,"binary64"],["(exp.f64 x)",7.995687077223153,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[12,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"memory":[[7092560,7092560]],"oracle":[63.25383936806182],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":9.64404296875,"times":[[2.676025390625,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[3.35205078125,"x"],[2.60107421875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[11.981848515127963],"baseline":[11.981848515127963],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",11.981848515127965,1,"binary64"],["(exp.f64 x)",11.981848515127963,1,"binary64"],["x",11.981848515127965,1,"binary64"]],"compiler":[[7,5],[2,2],[1,1]],"count":[[9,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))"]],"memory":[[-3624144,6150832]],"oracle":[63.13725542950607],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))"]],"repr":["binary64"],"time":8.671875,"times":[[2.34716796875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[2.296142578125,"(exp.f64 x)"],[2.796142578125,"x"]],"type":"regimes"},{"accuracy":[11.674579204239889],"baseline":[24.07122790403044],"branch":[["x",11.67457920423989,2,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",11.674579204239889,3,"binary64"],["(exp.f64 x)",11.674579204239889,2,"binary64"]],"compiler":[[1,1],[7,5],[2,2]],"count":[[8,2]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))"]],"memory":[[-2350704,5872320]],"oracle":[63.13725542950607],"outputs":[["(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"repr":["binary64"],"time":7.963134765625,"times":[[2.64697265625,"x"],[2.41796875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[2.00390625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[24.071227904030433],"baseline":[24.07122790403044],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",24.07122790403044,1,"binary64"],["x",24.071227904030433,1,"binary64"],["(exp.f64 x)",24.071227904030433,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[7,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))","#s(approx (/ -1 (- (exp (neg x)) 1)) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))"]],"memory":[[-2588496,5617296]],"oracle":[62.556327692963826],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))"]],"repr":["binary64"],"time":7.18505859375,"times":[[2.07421875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[2.35302734375,"x"],[1.931884765625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[61.97677111584748],"baseline":[61.97677111584752],"branch":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",61.97677111584748,1,"binary64"],["x",61.97677111584752,1,"binary64"],["(exp.f64 x)",61.976771115847484,1,"binary64"]],"compiler":[[7,5],[1,1],[2,2]],"count":[[3,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64))))"]],"memory":[[4402112,4402112]],"oracle":[62.556327692963826],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))"]],"repr":["binary64"],"time":4.73486328125,"times":[[1.248046875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"],[1.524169921875,"x"],[1.241943359375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[62.04820250453572],"baseline":[62.04820250453565],"branch":[["x",62.04820250453572,1,"binary64"],["(exp.f64 x)",62.04820250453575,1,"binary64"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))",62.04820250453576,1,"binary64"]],"compiler":[[1,1],[2,2],[7,5]],"count":[[1,1]],"inputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"link":["."],"memory":[[-4604480,3715424]],"name":["expq2 (section 3.11)"],"oracle":[62.04820250453565],"outputs":[["#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"repr":["binary64"],"time":3.552978515625,"times":[[1.176025390625,"x"],[0.946044921875,"(exp.f64 x)"],[0.89404296875,"(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal 1 binary64)))"]],"type":"regimes"},{"bstep":[[11.97802734375,-10.445228979169666,-0.03365111253300245],[11.0859375,-3.614669030976223e+80,-1.5279222059482858e+73]],"compiler":[[21,16],[50,22],[21,16],[50,22],[21,16],[50,22],[21,16],[50,22],[21,16],[50,22],[21,16],[50,22],[21,16],[50,22],[21,16],[50,22],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[50,22],[32,26],[9,7],[1,1]],"memory":[[7854048,7854048]],"method":["binary-search","binary-search"],"mixsample":[[1.93017578125,"ival-div",0],[0.14990234375,"ival-true",0],[3.10498046875,"ival-exp",0],[2.701171875,"ival-expm1",0],[0.0986328125,"ival-assert",0]],"outcomes":[[12.50927734375,0,"valid",272]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":25.924072265625,"type":"bsearch"},{"bstep":[[7.471923828125,-10.445228979169666,-0.03365111253300245],[2.427001953125,-3.614669030976223e+80,-1.5279222059482858e+73]],"compiler":[[21,16],[76,28],[21,16],[76,28],[21,16],[76,28],[21,16],[76,28],[21,16],[76,28],[21,16],[76,28],[21,16],[76,28],[21,16],[76,28],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[76,28],[32,26],[9,7],[1,1]],"memory":[[-5296224,3314752]],"method":["binary-search","binary-search"],"mixsample":[[0.45654296875,"ival-div",0],[0.044677734375,"ival-true",0],[1.095458984375,"ival-exp",0],[0.986328125,"ival-expm1",0],[0.02685546875,"ival-assert",0]],"outcomes":[[3.874267578125,0,"valid",64]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":11.382080078125,"type":"bsearch"},{"bstep":[[2.80908203125,-10.445228979169666,-0.03365111253300245],[14.868896484375,-1.902778622900169e+106,-9.000583794979512e+94]],"compiler":[[21,16],[61,25],[21,16],[61,25],[21,16],[61,25],[21,16],[61,25],[21,16],[61,25],[21,16],[61,25],[21,16],[61,25],[21,16],[61,25],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[61,25],[17,14],[9,7],[1,1]],"memory":[[-2409184,5698144]],"method":["binary-search","binary-search"],"mixsample":[[1.49560546875,"ival-div",0],[0.13427734375,"ival-true",0],[1.8974609375,"ival-exp",0],[1.372314453125,"ival-expm1",0],[0.08251953125,"ival-assert",0]],"outcomes":[[8.47509765625,0,"valid",176]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":20.16796875,"type":"bsearch"},{"bstep":[[0.14111328125,2.9086716107272207e-5,0.9669087881550065]],"compiler":[[7,7],[2,2]],"memory":[[166240,166240]],"method":["left-value"],"time":0.613037109375,"type":"bsearch"},{"bstep":[[0.088134765625,2.9086716107272207e-5,0.9669087881550065]],"compiler":[[7,7],[2,2]],"memory":[[159504,159504]],"method":["left-value"],"time":0.390869140625,"type":"bsearch"},{"egraph":[[7,4632,577,0.048659653],[6,1421,577,0.021113904],[5,950,577,0.010121077],[4,635,577,0.007136519],[3,356,577,0.004447551],[2,219,577,0.003428837],[1,172,577,0.002637262],[0,126,580,0.002679073]],"inputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -3715469692580659/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))))","(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -15/4 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))))","(if (<=.f64 x #s(literal -10500000000000000815831766655872649178879125871197860277834278179049830808884244966648174743689294249984 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (if (<=.f64 x #s(literal -3996944669291315/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"memory":[[2884656,10668560]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal -1 binary64) (expm1.f64 (neg.f64 x)))","(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -3715469692580659/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))))","(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -3715469692580659/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -15/4 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))))","(if (<=.f64 x #s(literal -250000000000000002123405358422425744037217481149690153973749775675699226476544 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) (if (<=.f64 x #s(literal -15/4 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x)) (*.f64 x x)) (+.f64 (*.f64 (*.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 x #s(literal 1/24 binary64)) x)) x) x) x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(if (<=.f64 x #s(literal -10500000000000000815831766655872649178879125871197860277834278179049830808884244966648174743689294249984 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (if (<=.f64 x #s(literal -3996944669291315/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (neg.f64 x))))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x))))))","(if (<=.f64 x #s(literal -10500000000000000815831766655872649178879125871197860277834278179049830808884244966648174743689294249984 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x))) (if (<=.f64 x #s(literal -3996944669291315/1125899906842624 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (+.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) -1/6) #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(approx (+ (* (+ (* 1/24 x) -1/6) x) 1/2) (*.f64 (*.f64 #s(literal 1/24 binary64) x) x)) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* (+ (* (+ (* 1/24 x) -1/6) x) 1/2) x) -1) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (*.f64 x x))) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/12 binary64)) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x)))","(/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x)))","(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) x)))))","(if (<=.f64 (exp.f64 x) #s(literal 7378697629483821/147573952589676412928 binary64)) (/.f64 #s(literal -1 binary64) #s(approx (- (exp (neg x)) 1) (*.f64 #s(approx (+ (* 1/2 x) -1) (*.f64 #s(literal 1/2 binary64) x)) x))) #s(approx (/ (exp x) (- (exp x) 1)) (fma.f64 #s(literal 1/12 binary64) x (+.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64))))))","#s(approx (/ (exp x) (- (exp x) 1)) (/.f64 #s(literal 1 binary64) x))","#s(approx (/ (exp x) (- (exp x) 1)) (pow.f64 x #s(literal -1 binary64)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ (* 1/12 x) (+ 1/2 (/ 1 x))) (*.f64 #s(literal 1/12 binary64) x)))","#s(approx (/ (exp x) (- (exp x) 1)) #s(approx (+ 1/2 (/ 1 x)) #s(literal 1/2 binary64)))"]],"stop":[["node limit",1]],"time":122.071044921875,"type":"simplify"},{"compiler":[[577,130],[9,7],[5,5],[0,1],[0,1],[3,3],[0,1],[0,1],[8,6],[12,9],[8,6],[12,9],[11,8],[12,9],[0,1],[0,1],[14,10],[12,9],[0,1],[14,10],[12,9],[14,10],[12,9],[0,1],[23,18],[17,13],[14,10],[12,9],[11,8],[12,9],[0,1],[28,21],[0,1],[14,10],[12,9],[0,1],[14,10],[12,9],[0,1],[20,15],[14,10],[12,9],[0,1],[14,10],[12,9],[12,9]],"egraph":[[0,8526,178,0.103140627],[2,1474,194,0.044276873],[1,202,194,0.009249332],[0,48,194,0.002795754],[0,34,194,0.00047613],[0,8565,341,0.0952374],[3,2751,399,0.037257018],[2,971,404,0.01309491],[1,353,416,0.003655654],[0,128,429,0.00137381],[0,8297,202,0.048665652],[4,6452,237,0.024610689],[3,2120,254,0.020976174],[2,705,267,0.006231092],[1,250,277,0.002085322],[0,98,278,0.000936824],[0,8818,9,0.072259314],[3,1809,13,0.028027909],[2,188,13,0.006544196],[1,33,13,0.000767783],[0,8,13,0.00061441],[0,5,13,8.4171e-5],[0,10260,87,0.065847117],[15,6870,105,0.024955411],[14,6130,105,0.016093477],[13,5581,105,0.012979555],[12,5216,105,0.013096055],[11,4930,105,0.011370521],[10,3369,105,0.015306245],[9,1981,105,0.01020516],[8,1506,105,0.00982849],[7,1088,105,0.006414938],[6,994,111,0.004854087],[5,972,111,0.004264911],[4,829,111,0.004996133],[3,574,111,0.003616679],[2,258,111,0.001986838],[1,122,111,0.000750222],[0,44,111,0.000453415],[0,8636,335,0.094711204],[2,1498,353,0.030419021],[1,264,353,0.005616113],[0,75,353,0.002086506],[0,44,369,0.000488499]],"memory":[[403840,18314608]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":3441.2900390625,"type":"soundness"},{"compiler":[[577,130],[577,130],[6,6],[6,6],[7,5],[7,5]],"memory":[[7122656,54064768]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[],[],[]],"time":84.7509765625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]