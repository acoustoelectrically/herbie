[{"memory":[[27264,27264]],"time":0.04296875,"type":"start"},{"compiler":[[27,19]],"memory":[[-4116048,12583904]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":49.589111328125,"type":"analyze"},{"bogosity":[{"invalid":0.49928213615195616,"precondition":0.4942799140699208,"valid":0.006437949778123048}],"memory":[[-230646832,1649516640]],"mixsample":[[106.171630859375,"adjust",800],[247.744140625,"ival-add",0],[280.15576171875,"ival-mult",0],[242.836669921875,"ival-fabs",0],[17.42578125,"ival-assert",0],[207.444580078125,"ival-sub",0],[672.38916015625,"ival-tan",0],[128.029296875,"ival-and",0],[0.04736328125,"ival-sub",400],[655.481201171875,"const",0],[0.7373046875,"ival-tan",400],[55.675537109375,"exact",0],[223.1005859375,"ival-<=",0],[196.794921875,"ival-<",0]],"outcomes":[[534.764892578125,1,"valid",2702],[3053.261474609375,0,"invalid",25944],[631.44384765625,0,"valid",5554]],"time":5835.860107421875,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[220,3,3,30]],"explanations":[["tan.f64","(tan.f64 (+.f64 x eps))","sensitivity",1,0,[],[[1]]],["-.f64","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","cancellation",223,8,[],[[]]]],"fperrors":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",224,3,[-2.5164585635807402e-251,2.4127246024979117e-253],4,[-2.825378576556166e-56,3.1259371470460234e-58]],["(tan.f64 (+.f64 x eps))",1,0,false,0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(tan.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[2,1],[1,222],[0,33]],"maybe-confusion":[[220,3,0,3,5,25]],"memory":[[-4669760,39172800]],"mixsample":[[4.165771484375,"adjust",800],[0.122314453125,"ival-tan",800],[2.981201171875,"ival-add",0],[0.207275390625,"ival-assert",0],[3.31982421875,"ival-sub",0],[9.50048828125,"ival-tan",0],[0.416748046875,"ival-true",0],[0.009765625,"ival-sub",400],[0.186279296875,"ival-tan",400],[0.037841796875,"adjust",2000]],"outcomes":[[19.76025390625,1,"valid",168],[0.38134765625,2,"valid",2],[17.652099609375,0,"valid",342]],"time":85.32177734375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.000772651],[10,183,7,0.000848293],[9,175,7,0.000851069],[8,159,7,0.001182522],[7,110,7,0.000727724],[6,80,7,0.000776227],[5,47,7,0.000445771],[4,32,7,0.000221991],[3,24,7,0.000168182],[2,18,7,0.000122402],[1,13,7,0.000117303],[0,10,7,0.000120445],[0,6,7,9.4043e-5],[8,521,35,0.003662402],[7,509,35,0.003071812],[6,469,35,0.002883628],[5,383,35,0.002521953],[4,312,35,0.002048114],[3,169,35,0.001605249],[2,86,35,0.000752441],[1,38,35,0.000305344],[0,18,39,0.000219064]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"memory":[[6165936,6165936]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1],["saturated",1]],"symmetry":[[]],"time":42.756103515625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.090087890625,"type":"eval"},{"alts":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","next",23.52383671621046,"binary64"]],"compiler":[[7,6]],"memory":[[311696,311696]],"time":0.40087890625,"type":"prune"},{"egraph":[[0,183,18,0.00068835],[10,183,18,0.000816404],[9,175,18,0.000909996],[8,159,18,0.000992427],[7,110,18,0.000744772],[6,80,18,0.000750805],[5,47,18,0.000436423],[4,32,18,0.000231281],[3,24,18,0.000176007],[2,18,18,0.000131038],[1,13,18,0.000119576],[0,10,18,0.000146613],[0,6,18,9.3105e-5]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(tan.f64 x)"]],"locations":[["(tan.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(tan.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","cost-diff",0]],"memory":[[820000,820000]],"method":["egg-herbie"],"outputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(tan.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(tan.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":12.6259765625,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(tan.f64 x)","accuracy",0.015625],["(tan.f64 (+.f64 x eps))","accuracy",0.11308311222222334],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","accuracy",23.412302679000415]],"memory":[[-202128,8502672]],"mixsample":[[2.02978515625,"adjust",800],[0.113037109375,"ival-tan",800],[1.58642578125,"ival-add",0],[0.0966796875,"ival-assert",0],[2.834228515625,"ival-sub",0],[4.813720703125,"ival-tan",0],[0.16943359375,"ival-true",0],[0.00390625,"ival-sub",400],[0.09228515625,"ival-tan",400],[0.0400390625,"adjust",2000]],"outcomes":[[10.453369140625,1,"valid",84],[0.455810546875,2,"valid",1],[8.931884765625,0,"valid",171]],"time":29.443115234375,"type":"localize"},{"count":[[4,31]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","(tan.f64 x)"]],"memory":[[-3850448,4301328]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* x (+ 1 (/ eps x)))","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* eps (+ 1 (/ x eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[1.5478515625,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","-inf"],[1.85791015625,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","inf"],[2.700927734375,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","eps","0"],[1.260009765625,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","-inf"],[2.149169921875,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","inf"],[1.869140625,"((- (tan (+ x eps)) (tan x)) (tan (+ x eps)) (+ x eps) (tan x))","x","0"]],"time":12.301025390625,"type":"series"},{"count":[[31,29]],"egraph":[[0,8335,686,0.091508457],[3,6077,710,0.030041937],[2,1539,873,0.019820061],[1,464,884,0.004454501],[0,157,950,0.001442145]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(* x (+ 1 (/ eps x)))","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(* eps (+ 1 (/ x eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[6596672,42987632]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (+.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -1/3 binary64))) #s(literal 1/2 binary64))) x (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (* x (- (* -1 (* x (+ 1/6 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 eps) (sin.f64 eps) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) #s(literal -1/3 binary64))) x) x (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 eps) x) (cos.f64 eps)) #s(literal 1 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ eps x)","(+.f64 eps x)","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (+ eps x)) (cos (+ eps x)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (*.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (fma.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (cos.f64 x)))) eps (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":248.762939453125,"type":"simplify"},{"count":[[4,255]],"egraph":[[0,8166,16,0.068423121],[3,6137,16,0.041153252],[2,402,16,0.015758266],[1,50,16,0.001417294],[0,10,16,0.000587548],[0,6,16,0.000140324]],"inputs":[["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(tan.f64 (+.f64 x eps))","(+.f64 x eps)","(tan.f64 x)"]],"memory":[[-27879824,47729952]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (fma.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (sin.f64 (+.f64 (+.f64 eps x) x))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(*.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(*.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (/.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x))","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (tan.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))) (+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (sin.f64 (-.f64 (+.f64 eps x) x))) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (tan.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (*.f64 (sin.f64 (+.f64 eps x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) #s(literal 1 binary64))) (*.f64 (cos.f64 (+.f64 eps x)) (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (cos.f64 x) (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))))) (*.f64 (cos.f64 x) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 (+.f64 eps x))) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 (+.f64 eps x))))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (*.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (cos.f64 x) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 eps x)) (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (cos.f64 (+.f64 eps x))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (sin.f64 (+.f64 eps x))))) (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (*.f64 (neg.f64 (cos.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))))","(/.f64 (fma.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (neg.f64 (cos.f64 x)) (+.f64 (tan.f64 eps) (tan.f64 x)))) (*.f64 (neg.f64 (cos.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (fma.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x) (*.f64 (neg.f64 (cos.f64 x)) (sin.f64 (+.f64 eps x)))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (sin.f64 x)))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (cos.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x)) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (sin.f64 x))) (*.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x)))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (fma.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (fma.f64 (tan.f64 x) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (tan.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (+.f64 (+.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 4 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (tan.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 (tan.f64 x)) (-.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (sin.f64 (-.f64 (+.f64 eps x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x) (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (sin.f64 (+.f64 (+.f64 eps x) x))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (tan.f64 (+.f64 eps x)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 x) (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (tan.f64 (+.f64 eps x)))","(fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(fma.f64 (tan.f64 x) #s(literal -1 binary64) (tan.f64 (+.f64 eps x)))","(fma.f64 (tan.f64 (+.f64 eps x)) (/.f64 (tan.f64 (+.f64 eps x)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(fma.f64 (tan.f64 (+.f64 eps x)) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(-.f64 (+.f64 (tan.f64 (+.f64 eps x)) #s(literal 0 binary64)) (tan.f64 x))","(-.f64 (/.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))) (/.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))))))","(+.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 eps x))) (tan.f64 x) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 2 binary64)))) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (tan.f64 eps) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 eps) (tan.f64 x)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 (+.f64 eps x)))","(*.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(*.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))))","(*.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))","(*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 1 binary64))","(/.f64 (+.f64 (tan.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (tan.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))) (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (tan.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (tan.f64 x) (tan.f64 eps)))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x)))) (neg.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 eps x)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) #s(literal 1 binary64)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 (+.f64 eps x)) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (tan.f64 x) (tan.f64 eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))))","(/.f64 (+.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x))))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(neg.f64 (tan.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps))))","(neg.f64 (tan.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(neg.f64 (tan.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps)))))","(neg.f64 (tan.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (cos.f64 (+.f64 eps x))))","(neg.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (sin.f64 (+.f64 eps x)) (neg.f64 (cos.f64 (+.f64 eps x)))))","(tan.f64 (+.f64 eps x))","(exp.f64 (*.f64 (log.f64 (tan.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 (+.f64 eps x)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) eps)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 eps x) eps) (-.f64 (*.f64 (-.f64 eps x) eps) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (/.f64 #s(literal 1 binary64) (-.f64 eps x)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (*.f64 (-.f64 x eps) (+.f64 eps x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 x eps))))","(*.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (/.f64 (+.f64 eps x) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (*.f64 (+.f64 eps x) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 eps x))","(*.f64 (+.f64 eps x) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 eps x) (*.f64 (-.f64 x eps) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))))","(/.f64 (*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) #s(literal 1 binary64)) (-.f64 x eps))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 x (/.f64 x (-.f64 x eps)))) (*.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))) (fma.f64 x (/.f64 x (-.f64 x eps)) (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 3 binary64))) (fma.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 x (/.f64 x (-.f64 x eps))) (fma.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))) (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (*.f64 x x)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 x eps)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 x eps) (fma.f64 eps eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 x eps) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 eps x)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 x (/.f64 x (-.f64 x eps)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 eps x))) #s(literal -1 binary64)))","(+.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(+.f64 eps x)","(+.f64 x eps)","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))))","(*.f64 #s(literal 1 binary64) (tan.f64 x))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal -1 binary64))","(pow.f64 (tan.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (tan.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (tan.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(neg.f64 (neg.f64 (tan.f64 x)))","(tan.f64 x)","(exp.f64 (*.f64 (log.f64 (tan.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (tan.f64 x))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":325.1220703125,"type":"rewrite"},{"compiler":[[7565,1005]],"memory":[[3397712,26319088]],"time":42.98583984375,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","fresh",23.526938310662313,"binary64"],["(fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (tan.f64 x)))","fresh",23.408755708240104,"binary64"],["(fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))) (neg.f64 (tan.f64 x)))","fresh",23.53997432332547,"binary64"],["(/.f64 (fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","fresh",23.38029599653225,"binary64"],["(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","next",23.527285380513042,"binary64"],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","next",23.527718482280886,"binary64"],["(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","next",23.409979767845932,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",23.52383671621046,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","fresh",1.101882297358888,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","fresh",0.7089202387068019,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","next",1.4072402385955995,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","next",0.41060564581760595,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","fresh",0.5030098590678544,"binary64"]],"compiler":[[12,10],[20,13],[16,12],[30,15],[14,9],[14,9],[16,10],[7,6],[41,21],[20,14],[13,10],[68,29],[31,19],[12,10],[20,13],[16,12],[30,15],[14,9],[14,9],[16,10],[41,21],[20,14],[13,10],[68,29],[31,19]],"count":[[277,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[276,12],"picked":[1,1]}],"memory":[[-2164832,16049936]],"min-error":[[0.03344625946961357,"binary64"]],"time":14.633056640625,"type":"prune"},{"egraph":[[0,8191,488,0.090965737],[5,5843,501,0.027014603],[4,3316,501,0.022382091],[3,712,522,0.013496327],[2,257,522,0.003392832],[1,136,528,0.00125626],[0,88,534,0.000851414],[0,48,550,0.000547606]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(sin.f64 x)","x","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","#s(literal -1/3 binary64)","eps","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","eps","(cos.f64 eps)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(-.f64 (+.f64 eps x) x)","(+.f64 eps x)","eps","x","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(-.f64 (+.f64 eps x) x)","(+.f64 eps x)","eps","x","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(+.f64 (tan.f64 eps) (tan.f64 x))","(tan.f64 eps)","eps","(tan.f64 x)","x","(fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))","(neg.f64 (tan.f64 eps))","#s(literal 1 binary64)"]],"locations":[["(tan.f64 eps)","cost-diff",0],["(+.f64 (tan.f64 eps) (tan.f64 x))","cost-diff",0],["(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","cost-diff",0],["(sin.f64 (-.f64 (+.f64 eps x) x))","cost-diff",0],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x)))","cost-diff",0],["(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","cost-diff",0],["(-.f64 (+.f64 eps x) x)","cost-diff",4],["(+.f64 eps x)","cost-diff",0],["(sin.f64 (-.f64 (+.f64 eps x) x))","cost-diff",0],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","cost-diff",0],["(-.f64 (+.f64 eps x) x)","cost-diff",4],["(cos.f64 eps)","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(/.f64 (sin.f64 eps) (cos.f64 eps))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","cost-diff",0],["(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","cost-diff",1],["(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","cost-diff",1],["(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","cost-diff",8]],"memory":[[5363552,36367184]],"method":["egg-herbie"],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) eps (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps))","(*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps)","(*.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) eps (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps)","(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 1/3 binary64) eps) eps (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(*.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(fma.f64 #s(literal 1/3 binary64) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(sin.f64 x)","x","(/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","#s(literal 4 binary64)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","#s(literal 2 binary64)","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))","(fma.f64 (*.f64 #s(literal -1/3 binary64) (sin.f64 x)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","#s(literal 1 binary64)","#s(literal -1/3 binary64)","eps","(*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x))","(*.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x))","(*.f64 (sin.f64 x) eps)","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","eps","(cos.f64 eps)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(sin.f64 eps)","(-.f64 (+.f64 eps x) x)","eps","(+.f64 eps x)","eps","x","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x)))","(/.f64 (sin.f64 eps) (cos.f64 (+.f64 eps x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(sin.f64 eps)","(-.f64 (+.f64 eps x) x)","eps","(+.f64 eps x)","eps","x","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","(-.f64 (neg.f64 (tan.f64 x)) (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal -1 binary64))))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal -1 binary64))))","(+.f64 (tan.f64 eps) (tan.f64 x))","(+.f64 (tan.f64 x) (tan.f64 eps))","(tan.f64 eps)","eps","(tan.f64 x)","x","(fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))","(neg.f64 (fma.f64 (tan.f64 x) (tan.f64 eps) #s(literal -1 binary64)))","(neg.f64 (tan.f64 eps))","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":248.659912109375,"type":"simplify"},{"compiler":[[505,51]],"locations":[["(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","accuracy",0.01171875],["(tan.f64 x)","accuracy",0.015625],["(+.f64 (tan.f64 eps) (tan.f64 x))","accuracy",0.0234375],["(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","accuracy",23.412302679000415],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x)))","accuracy",0.01171875],["(cos.f64 x)","accuracy",0.01171875],["(cos.f64 (+.f64 eps x))","accuracy",0.07613546308637054],["(-.f64 (+.f64 eps x) x)","accuracy",23.530513230792952],["(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","accuracy",0.015625],["(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","accuracy",0.01953125],["(cos.f64 (+.f64 eps x))","accuracy",0.07613546308637054],["(-.f64 (+.f64 eps x) x)","accuracy",23.530513230792952],["(sin.f64 eps)","accuracy",0.0],["(cos.f64 eps)","accuracy",0.0],["(/.f64 (sin.f64 eps) (cos.f64 eps))","accuracy",0.0078125],["#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","accuracy",1.4072402385955995],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.02734375],["(pow.f64 (sin.f64 x) #s(literal 4 binary64))","accuracy",0.04982377930532605],["(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","accuracy",0.3828125],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","accuracy",0.40279314577842956]],"memory":[[-4624736,62576560]],"mixsample":[[16.16015625,"ival-div",0],[10.45947265625,"adjust",800],[0.05126953125,"ival-div",400],[0.136474609375,"ival-assert",0],[5.489990234375,"ival-sub",0],[7.086669921875,"ival-tan",0],[5.9296875,"ival-cos",0],[5.267578125,"const",0],[0.052490234375,"ival-sub",400],[0.668212890625,"ival-tan",400],[0.112060546875,"adjust",2000],[0.0048828125,"ival-neg",400],[6.0888671875,"ival-pow",0],[0.114990234375,"ival-tan",800],[12.04052734375,"ival-add",0],[0.0048828125,"ival-mult",400],[20.619384765625,"ival-mult",0],[5.75439453125,"ival-sin",0],[0.007080078125,"ival-div",800],[0.0693359375,"ival-add",400],[0.259033203125,"ival-true",0],[0.010009765625,"ival-add",800],[0.441650390625,"exact",0],[3.248291015625,"ival-pow2",0],[1.482177734375,"ival-neg",0]],"outcomes":[[71.99853515625,1,"valid",86],[1.06591796875,2,"valid",1],[63.9404296875,0,"valid",169]],"time":214.320068359375,"type":"localize"},{"count":[[25,131]],"inputs":[["(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","(cos.f64 eps)","(-.f64 (+.f64 eps x) x)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(+.f64 eps x)","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x)))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(+.f64 (tan.f64 eps) (tan.f64 x))","(tan.f64 eps)","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 (+.f64 eps x))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 x)","(tan.f64 x)"]],"memory":[[925456,24950912]],"outputs":[["(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","1/3","(+ 1/3 (* 4/3 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 4/3 (* 17/9 (pow x 2)))))","(+ 1/3 (* (pow x 2) (+ 4/3 (* (pow x 2) (+ 17/9 (* 248/135 (pow x 2)))))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(+ eps x)","(+ (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (* (sin eps) (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps))))) (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (* -1 (/ (pow (sin eps) 4) (pow (cos eps) 4))) (* -1/3 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* x (- 1/3 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (* -1/3 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ x (/ (sin eps) (cos eps)))","(+ (* x (+ 1 (* 1/3 (pow x 2)))) (/ (sin eps) (cos eps)))","(+ (* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2)))))) (/ (sin eps) (cos eps)))","(* 1/3 eps)","(+ (* 1/3 eps) (* 4/3 (* eps (pow x 2))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* 17/9 (* eps (pow x 2))))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* (pow x 2) (+ (* 248/135 (* eps (pow x 2))) (* 17/9 eps))))))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(* x (+ 1 (/ eps x)))","(/ (sin eps) (cos (+ eps x)))","(- (+ (/ (sin eps) (* (cos eps) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x))))))) (/ (sin x) (* (cos x) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x)))))))) (/ (sin x) (cos x)))","(/ (+ (/ (sin eps) (cos eps)) (/ (sin x) (cos x))) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x))))))","(+ (/ (sin eps) (cos eps)) (/ (sin x) (cos x)))","(* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(pow (sin x) 4)","(pow (cos x) 2)","(cos (+ eps x))","(* (cos x) (cos (+ eps x)))","(cos x)","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(/ (sin eps) (cos (- eps (* -1 x))))","(cos (- eps (* -1 x)))","(* (cos x) (cos (- eps (* -1 x))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(/ eps (cos x))","(* eps (+ (/ 1 (cos x)) (/ (* eps (sin x)) (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (cos x))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (cos x))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 2))) (* 1/6 (/ (sin x) (pow (cos x) 2))))))) (* 1/2 (/ 1 (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x))))","(* eps (- (+ 1 (* -1 (* eps (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- 1/3 (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (+ 1/3 (* -1 (* eps (+ (* -1 (/ (* (sin x) (- 1/3 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* -1/3 (/ (sin x) (cos x))) (+ (* -1/3 (/ (pow (sin x) 3) (pow (cos x) 3))) (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* eps (- 1/3 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ eps (/ (sin x) (cos x)))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (/ (sin x) (cos x)))","(+ (* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2)))))) (/ (sin x) (cos x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(* eps (+ 1 (/ x eps)))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(sin (neg (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(/ (sin (neg (* -1 eps))) (cos (- x (* -1 eps))))","(cos (- x (* -1 eps)))","(* (cos x) (cos (- x (* -1 eps))))"]],"series":[[9.484130859375,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (+ (tan eps) (tan x)) (tan eps) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (sin x) 4) (pow (cos x) 2) (cos (+ eps x)) (* (cos (+ eps x)) (cos x)) (cos x) (tan x))","eps","-inf"],[18.014892578125,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (+ (tan eps) (tan x)) (tan eps) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (sin x) 4) (pow (cos x) 2) (cos (+ eps x)) (* (cos (+ eps x)) (cos x)) (cos x) (tan x))","eps","inf"],[10.22998046875,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (+ (tan eps) (tan x)) (tan eps) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (sin x) 4) (pow (cos x) 2) (cos (+ eps x)) (* (cos (+ eps x)) (cos x)) (cos x) (tan x))","eps","0"],[12.510986328125,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (+ (tan eps) (tan x)) (tan eps) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (sin x) 4) (pow (cos x) 2) (cos (+ eps x)) (* (cos (+ eps x)) (cos x)) (cos x) (tan x))","x","-inf"],[14.05419921875,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (+ (tan eps) (tan x)) (tan eps) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (sin x) 4) (pow (cos x) 2) (cos (+ eps x)) (* (cos (+ eps x)) (cos x)) (cos x) (tan x))","x","inf"],[7.39599609375,"((+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) (+ (/ (* (sin x) eps) (cos x)) 1) (- (tan (+ x eps)) (tan x)) (- (tan (+ x eps)) (tan x)) (/ (sin eps) (cos eps)) (sin eps) (cos eps) (- (+ eps x) x) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (+ eps x) (/ (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (cos x)) (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (+ (tan eps) (tan x)) (tan eps) (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) (pow (sin x) 4) (pow (cos x) 2) (cos (+ eps x)) (* (cos (+ eps x)) (cos x)) (cos x) (tan x))","x","0"]],"time":78.447998046875,"type":"series"},{"count":[[131,129]],"egraph":[[0,8241,2776,0.095255623],[2,6339,2940,0.02920926],[1,2010,3077,0.022489758],[0,641,3253,0.006831478]],"inputs":[["(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","1/3","(+ 1/3 (* 4/3 (pow x 2)))","(+ 1/3 (* (pow x 2) (+ 4/3 (* 17/9 (pow x 2)))))","(+ 1/3 (* (pow x 2) (+ 4/3 (* (pow x 2) (+ 17/9 (* 248/135 (pow x 2)))))))","1","(+ 1 (* eps x))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","eps","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(+ eps x)","(+ (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (* (sin eps) (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps))))) (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (* -1 (/ (pow (sin eps) 4) (pow (cos eps) 4))) (* -1/3 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (+ 1 (* x (- (* x (- 1/3 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (* -1/3 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ x (/ (sin eps) (cos eps)))","(+ (* x (+ 1 (* 1/3 (pow x 2)))) (/ (sin eps) (cos eps)))","(+ (* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2)))))) (/ (sin eps) (cos eps)))","(* 1/3 eps)","(+ (* 1/3 eps) (* 4/3 (* eps (pow x 2))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* 17/9 (* eps (pow x 2))))))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* (pow x 2) (+ (* 248/135 (* eps (pow x 2))) (* 17/9 eps))))))","(pow x 4)","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(* x (+ 1 (/ eps x)))","(/ (sin eps) (cos (+ eps x)))","(- (+ (/ (sin eps) (* (cos eps) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x))))))) (/ (sin x) (* (cos x) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x)))))))) (/ (sin x) (cos x)))","(/ (+ (/ (sin eps) (cos eps)) (/ (sin x) (cos x))) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x))))))","(+ (/ (sin eps) (cos eps)) (/ (sin x) (cos x)))","(* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(pow (sin x) 4)","(pow (cos x) 2)","(cos (+ eps x))","(* (cos x) (cos (+ eps x)))","(cos x)","(/ (sin x) (cos x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(/ (sin eps) (cos (- eps (* -1 x))))","(cos (- eps (* -1 x)))","(* (cos x) (cos (- eps (* -1 x))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(/ eps (cos x))","(* eps (+ (/ 1 (cos x)) (/ (* eps (sin x)) (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (cos x))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (cos x))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 2))) (* 1/6 (/ (sin x) (pow (cos x) 2))))))) (* 1/2 (/ 1 (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x))))","(* eps (- (+ 1 (* -1 (* eps (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- 1/3 (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (+ 1/3 (* -1 (* eps (+ (* -1 (/ (* (sin x) (- 1/3 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* -1/3 (/ (sin x) (cos x))) (+ (* -1/3 (/ (pow (sin x) 3) (pow (cos x) 3))) (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ (* eps (- (+ 1 (* eps (- (* eps (- 1/3 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(+ eps (/ (sin x) (cos x)))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (/ (sin x) (cos x)))","(+ (* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2)))))) (/ (sin x) (cos x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(/ (* eps (sin x)) (cos x))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(* eps (+ 1 (/ x eps)))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(sin (neg (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(/ (sin (neg (* -1 eps))) (cos (- x (* -1 eps))))","(cos (- x (* -1 eps)))","(* (cos x) (cos (- x (* -1 eps))))"]],"memory":[[9762320,49417664]],"method":["egg-herbie"],"outputs":[["(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (+.f64 eps x) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","1/3","#s(literal 1/3 binary64)","(+ 1/3 (* 4/3 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64))","(+ 1/3 (* (pow x 2) (+ 4/3 (* 17/9 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 17/9 binary64) (*.f64 x x) #s(literal 4/3 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","(+ 1/3 (* (pow x 2) (+ 4/3 (* (pow x 2) (+ 17/9 (* 248/135 (pow x 2)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 248/135 binary64) (*.f64 x x) #s(literal 17/9 binary64)) (*.f64 x x) #s(literal 4/3 binary64)) (*.f64 x x) #s(literal 1/3 binary64))","1","#s(literal 1 binary64)","(+ 1 (* eps x))","(fma.f64 eps x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -1/2 eps))))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal 1 binary64))) x #s(literal 1 binary64))","(+ 1 (* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -1/2 (- (* -1/6 eps) (* -1/2 eps))) (* 1/24 eps))))) (* -1/2 eps))))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (*.f64 eps #s(literal -1/8 binary64))) (*.f64 x x) (*.f64 #s(literal 1/3 binary64) eps)) (*.f64 x x) eps) x #s(literal 1 binary64))","(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 eps)) (sin.f64 eps) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(literal 1/6 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))))) #s(literal 1/2 binary64))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","eps","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps))) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(sin eps)","(sin.f64 eps)","(+ eps x)","(+.f64 eps x)","(+ (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (*.f64 (sin.f64 eps) #s(literal -1/2 binary64)) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (/ (* (sin eps) (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps))))) (cos eps)))))) (+ (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))) (* -1/2 (/ (sin eps) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 #s(literal -1/3 binary64) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal -1/2 binary64) (neg.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)))) (/.f64 (sin.f64 eps) (cos.f64 eps)))) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (*.f64 (sin.f64 eps) #s(literal -1/2 binary64)) (cos.f64 eps)))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (* -1 (/ (pow (sin eps) 4) (pow (cos eps) 4))) (* -1/3 (/ (pow (sin eps) 2) (pow (cos eps) 2))))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal -4/3 binary64) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (cos.f64 eps) #s(literal 4 binary64)))) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (+ 1 (* x (- (* x (- 1/3 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (* -1/3 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1/3 binary64) (-.f64 (/.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))))) x (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ x (/ (sin eps) (cos eps)))","(+.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) x)","(+ (* x (+ 1 (* 1/3 (pow x 2)))) (/ (sin eps) (cos eps)))","(+.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2)))))) (/ (sin eps) (cos eps)))","(+.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(* 1/3 eps)","(*.f64 #s(literal 1/3 binary64) eps)","(+ (* 1/3 eps) (* 4/3 (* eps (pow x 2))))","(*.f64 eps (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64)))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* 17/9 (* eps (pow x 2))))))","(fma.f64 (*.f64 (*.f64 eps (fma.f64 #s(literal 17/9 binary64) (*.f64 x x) #s(literal 4/3 binary64))) x) x (*.f64 #s(literal 1/3 binary64) eps))","(+ (* 1/3 eps) (* (pow x 2) (+ (* 4/3 eps) (* (pow x 2) (+ (* 248/135 (* eps (pow x 2))) (* 17/9 eps))))))","(fma.f64 eps (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64)) (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 248/135 binary64) (*.f64 x x) #s(literal 17/9 binary64)))))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* (pow x 4) (+ 1 (* -2/3 (pow x 2))))","(*.f64 (fma.f64 #s(literal -2/3 binary64) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* 1/5 (pow x 2)) 2/3))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5 binary64) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/5 (* -34/945 (pow x 2)))) 2/3))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -34/945 binary64) (*.f64 x x) #s(literal 1/5 binary64)) (*.f64 x x) #s(literal -2/3 binary64)) (*.f64 x x) #s(literal 1 binary64)) (pow.f64 x #s(literal 4 binary64)))","(+ 1 (* -1 (pow x 2)))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(fma.f64 (-.f64 (*.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/2 binary64)) (sin.f64 eps)) x (cos.f64 eps))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (*.f64 (cos.f64 eps) #s(literal -1/2 binary64))) x) (sin.f64 eps)) x (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(fma.f64 (neg.f64 x) (fma.f64 (cos.f64 eps) x (sin.f64 eps)) (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 2/3 binary64) (neg.f64 (cos.f64 eps))) x (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","x","(* x (+ 1 (* 1/3 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/3 binary64) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* 2/15 (pow x 2))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 x x) #s(literal 1/3 binary64)) x)","(* x (+ 1 (* (pow x 2) (+ 1/3 (* (pow x 2) (+ 2/15 (* 17/315 (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 x x) #s(literal 2/15 binary64)) (*.f64 x x) #s(literal 1/3 binary64)) x)","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))","(+ 1 (/ (* eps (sin x)) (cos x)))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(* x (+ 1 (/ eps x)))","(fma.f64 (/.f64 eps x) x x)","(/ (sin eps) (cos (+ eps x)))","(/.f64 (sin.f64 eps) (cos.f64 (+.f64 eps x)))","(- (+ (/ (sin eps) (* (cos eps) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x))))))) (/ (sin x) (* (cos x) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x)))))))) (/ (sin x) (cos x)))","(+.f64 (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64))))","(/ (+ (/ (sin eps) (cos eps)) (/ (sin x) (cos x))) (+ 1 (* -1 (/ (* (sin eps) (sin x)) (* (cos eps) (cos x))))))","(/.f64 (+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64)))","(+ (/ (sin eps) (cos eps)) (/ (sin x) (cos x)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps)","(pow (sin x) 4)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos (+ eps x))","(cos.f64 (+.f64 eps x))","(* (cos x) (cos (+ eps x)))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos x)","(cos.f64 x)","(/ (sin x) (cos x))","(/.f64 (sin.f64 x) (cos.f64 x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(fma.f64 (/.f64 eps (neg.f64 x)) (neg.f64 x) x)","(/ (sin eps) (cos (- eps (* -1 x))))","(/.f64 (sin.f64 eps) (cos.f64 (+.f64 eps x)))","(cos (- eps (* -1 x)))","(cos.f64 (+.f64 eps x))","(* (cos x) (cos (- eps (* -1 x))))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (sin.f64 x) (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 eps) (fma.f64 (+.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (+ 1/3 (* (pow eps 2) (+ 2/15 (* 17/315 (pow eps 2))))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 17/315 binary64) (*.f64 eps eps) #s(literal 2/15 binary64)) (*.f64 eps eps) #s(literal 1/3 binary64)) eps)","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 1/120 binary64) eps) eps #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(/ eps (pow (cos x) 2))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 eps) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/3 binary64) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (sin.f64 x)) (neg.f64 (cos.f64 x)))) (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/ eps (cos x))","(/.f64 eps (cos.f64 x))","(* eps (+ (/ 1 (cos x)) (/ (* eps (sin x)) (pow (cos x) 2))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 eps (cos.f64 x)))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (cos x))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/6 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) eps (/.f64 eps (cos.f64 x)))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (cos x))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 2))) (* 1/6 (/ (sin x) (pow (cos x) 2))))))) (* 1/2 (/ 1 (cos x)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 3))) (* 1/6 (/ 1 (cos x)))))) (* -1 (/ (sin x) (pow (cos x) 2))))) (/ 1 (cos x))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 eps) (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/6 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (sin.f64 x)) (neg.f64 (cos.f64 x)))) (-.f64 (/.f64 #s(literal 1/2 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/6 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (*.f64 eps eps) (/.f64 eps (cos.f64 x)))","(* eps (- (+ 1 (* -1 (* eps (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64)) (/.f64 (sin.f64 x) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- 1/3 (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal 1/3 binary64) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -4/3 binary64) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (+.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (+ 1/3 (* -1 (* eps (+ (* -1 (/ (* (sin x) (- 1/3 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* -1/3 (/ (sin x) (cos x))) (+ (* -1/3 (/ (pow (sin x) 3) (pow (cos x) 3))) (/ (* (sin x) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (+ (* -1 (/ (sin x) (cos x))) (* -1 (/ (pow (sin x) 3) (pow (cos x) 3))))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 eps) (fma.f64 #s(literal -1/3 binary64) (+.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64)) (/.f64 (sin.f64 x) (cos.f64 x))) (*.f64 (sin.f64 x) (+.f64 (/.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (cos.f64 x)) (neg.f64 (/.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/3 binary64)) (cos.f64 x)))))) (-.f64 #s(literal 1/3 binary64) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -4/3 binary64) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (+.f64 (pow.f64 (/.f64 (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64)) (/.f64 (sin.f64 x) (cos.f64 x)))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(+ (* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (+.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal 1 binary64)) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (- (+ 1 (* eps (- (* eps (- 1/3 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (* -1/3 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (/ (sin x) (cos x)))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal 1/3 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps (/.f64 (sin.f64 x) (cos.f64 x)))","(+ eps (/ (sin x) (cos x)))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (/ (sin x) (cos x)))","(+.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps) (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (* eps (+ 1 (* (pow eps 2) (+ 1/3 (* 2/15 (pow eps 2)))))) (/ (sin x) (cos x)))","(+.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 2/15 binary64) (*.f64 eps eps) #s(literal 1/3 binary64)) eps) (/.f64 (sin.f64 x) (cos.f64 x)))","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(fma.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64)) (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 x) #s(literal -1/2 binary64) (*.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64))) eps) (sin.f64 x)) eps (cos.f64 x))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(fma.f64 (neg.f64 (*.f64 (cos.f64 x) eps)) (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 x) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64)) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 x) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (cos.f64 x) eps)) (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal -1/2 binary64))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (+.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(+.f64 #s(literal 1 binary64) (*.f64 (+.f64 (fma.f64 (sin.f64 x) (+.f64 (/.f64 (sin.f64 x) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) eps)) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) eps)) #s(literal 1/3 binary64)))) (*.f64 eps eps)))","(/ (* eps (sin x)) (cos x))","(*.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)))","(* eps (+ (/ 1 eps) (/ (sin x) (cos x))))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(* eps (+ 1 (/ x eps)))","(fma.f64 (/.f64 x eps) eps eps)","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (-.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps))) (*.f64 eps eps))","(* -1 (* eps (- (* -1 (/ (sin x) (cos x))) (/ 1 eps))))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x))) (/.f64 (sin.f64 x) (cos.f64 x)))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(sin (neg (* -1 eps)))","(sin.f64 eps)","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(fma.f64 (/.f64 (neg.f64 x) eps) (neg.f64 eps) eps)","(/ (sin (neg (* -1 eps))) (cos (- x (* -1 eps))))","(/.f64 (sin.f64 eps) (cos.f64 (+.f64 eps x)))","(cos (- x (* -1 eps)))","(cos.f64 (+.f64 eps x))","(* (cos x) (cos (- x (* -1 eps))))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":290.637939453125,"type":"simplify"},{"count":[[25,702]],"egraph":[[0,8644,239,0.07115821],[2,3295,246,0.047437546],[1,368,254,0.012296629],[0,88,329,0.00264466],[0,48,337,0.000557971]],"inputs":[["(fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))))","(-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64)))","(+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(sin.f64 eps)","(cos.f64 eps)","(-.f64 (+.f64 eps x) x)","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(sin.f64 (-.f64 (+.f64 eps x) x))","(+.f64 eps x)","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x)))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","(/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(+.f64 (tan.f64 eps) (tan.f64 x))","(tan.f64 eps)","(*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps)","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 (+.f64 eps x))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 x)","(tan.f64 x)"]],"memory":[[-5690992,63591536]],"outputs":[["(*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) (*.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 eps (sin.f64 x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(fma.f64 (*.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)) (/.f64 eps (cos.f64 x)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))))","(fma.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(fma.f64 (*.f64 eps (sin.f64 x)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))) eps (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 eps (*.f64 eps (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 eps (tan.f64 x)) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(fma.f64 (sin.f64 x) (*.f64 (/.f64 eps (cos.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal 2 binary64)) (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(+.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 eps (tan.f64 x)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (+.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))))","(+.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))) (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 (pow.f64 (sin.f64 x) #s(literal 12 binary64)) (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 (sin.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (sin.f64 x) #s(literal 8 binary64)))) (*.f64 (pow.f64 (sin.f64 x) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))","(fma.f64 (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) #s(literal -1/3 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))","(fma.f64 #s(literal -1 binary64) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 #s(literal -1/3 binary64) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) #s(literal 1/3 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))) (/.f64 (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))))","(-.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))","(+.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))))","(+.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (*.f64 eps (tan.f64 x))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (*.f64 eps (tan.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x))) (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 eps (sin.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (*.f64 eps (sin.f64 x)) #s(literal 1 binary64))","(fma.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 eps (tan.f64 x)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 eps (sin.f64 x)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 eps (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 eps (tan.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)) #s(literal 1 binary64))","(fma.f64 (sin.f64 x) (*.f64 (/.f64 eps (cos.f64 x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 eps (tan.f64 x)) #s(literal 2 binary64)) (fma.f64 eps (tan.f64 x) #s(literal -1 binary64))) (pow.f64 (fma.f64 eps (tan.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 eps (tan.f64 x)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 eps (tan.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (tan.f64 eps))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps))","(*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (neg.f64 (cos.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 eps)))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (cos.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64))))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (tan.f64 eps)))","(tan.f64 eps)","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64))) #s(literal -1 binary64)))","(sin.f64 eps)","(cos.f64 eps)","(*.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (+.f64 (+.f64 eps x) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) #s(literal 0 binary64))) (neg.f64 (-.f64 eps #s(literal 0 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64))) (neg.f64 (fma.f64 eps eps (-.f64 #s(literal 0 binary64) (*.f64 eps #s(literal 0 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (neg.f64 (+.f64 (+.f64 eps x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 eps eps) #s(literal 0 binary64)) (-.f64 eps #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 eps eps (-.f64 #s(literal 0 binary64) (*.f64 eps #s(literal 0 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))) (neg.f64 (-.f64 (+.f64 eps x) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))) (neg.f64 (+.f64 (+.f64 eps x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 eps x) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) (-.f64 (+.f64 eps x) (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)) (+.f64 (+.f64 eps x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 eps x) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 eps x) x) (*.f64 (+.f64 (+.f64 eps x) x) (+.f64 #s(literal 0 binary64) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (+.f64 eps x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))","(-.f64 (+.f64 eps x) x)","(+.f64 (neg.f64 x) (+.f64 eps x))","(+.f64 #s(literal 0 binary64) eps)","(+.f64 (+.f64 eps x) (neg.f64 x))","(+.f64 eps #s(literal 0 binary64))","(+.f64 x (-.f64 eps x))","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 2 binary64))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))))","(/.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (+.f64 (pow.f64 (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64))) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (pow.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (sin.f64 (+.f64 (+.f64 eps x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64))) (sin.f64 (+.f64 (+.f64 eps x) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))))","(fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 eps x)) (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)))","(fma.f64 #s(literal 0 binary64) (cos.f64 eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))","(fma.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 eps x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 eps x)) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 eps x)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 x) (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x))) (cos.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 2 binary64)) (+.f64 (+.f64 eps x) x))) (sin.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 eps x) x)))))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))) (cos.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64))))) (sin.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 eps x) x) (pow.f64 (+.f64 eps x) #s(literal 2 binary64)))))))","(-.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 eps x))) (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(+.f64 (*.f64 (sin.f64 x) (cos.f64 (-.f64 eps x))) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(+.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(+.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 eps x))) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x))))","(+.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (sin.f64 x))))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 eps x))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 x eps))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (-.f64 x eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x eps) (*.f64 eps eps)))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(+.f64 eps x)","(+.f64 x eps)","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 2 binary64))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))))","(/.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (+.f64 (pow.f64 (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64))) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (pow.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(pow.f64 (/.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (cos.f64 (+.f64 eps x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (cos.f64 (+.f64 eps x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) #s(literal -1 binary64)) (pow.f64 (neg.f64 (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal 2 binary64))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (pow.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (pow.f64 (neg.f64 (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 eps x))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x)))) (neg.f64 (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (cos.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (pow.f64 (cos.f64 x) #s(literal -1 binary64))) (cos.f64 (+.f64 eps x)))","(/.f64 (*.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (cos.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(/.f64 (*.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) #s(literal 1 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (*.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (cos.f64 x)) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (sin.f64 x))) (*.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (cos.f64 x)) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (sin.f64 x))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x))))))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 x)))))","(/.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))) (neg.f64 (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(neg.f64 (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (+.f64 (pow.f64 (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64))) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 eps x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (tan.f64 x)))","(fma.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (pow.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 eps x)) (sin.f64 x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))))","(-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 eps x)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 eps x)))","(+.f64 (tan.f64 (+.f64 eps x)) (neg.f64 (tan.f64 x)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (-.f64 (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (+.f64 (pow.f64 (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x))) (pow.f64 (*.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (tan.f64 x) (tan.f64 eps)))","(*.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (pow.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (sin.f64 (+.f64 eps x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 (+.f64 eps x)))","(pow.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (tan.f64 eps) (tan.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 (+.f64 eps x)))) (neg.f64 (neg.f64 (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))))) (neg.f64 (neg.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (tan.f64 eps) (tan.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (cos.f64 (+.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) (tan.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps)))) (neg.f64 (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(/.f64 (*.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) #s(literal 1 binary64)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) (tan.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 eps x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(/.f64 (sin.f64 (+.f64 eps x)) (cos.f64 (+.f64 eps x)))","(/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (tan.f64 x) (tan.f64 eps))) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 eps)) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))))","(tan.f64 (+.f64 eps x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 (+.f64 eps x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 x) (tan.f64 eps))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (tan.f64 eps) (tan.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sin.f64 x) (neg.f64 (cos.f64 eps)) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 eps))))) (neg.f64 (*.f64 (cos.f64 x) (neg.f64 (cos.f64 eps)))))","(/.f64 (neg.f64 (fma.f64 (sin.f64 x) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 eps)) (sin.f64 x)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 eps)) (cos.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) (sin.f64 x)))) (neg.f64 (*.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (tan.f64 x) (tan.f64 eps)))","(/.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (neg.f64 (*.f64 (cos.f64 eps) (cos.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (tan.f64 eps) (tan.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (tan.f64 x) (/.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 eps) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (sin.f64 x) (neg.f64 (cos.f64 eps)) (*.f64 (cos.f64 x) (neg.f64 (sin.f64 eps)))) (*.f64 (cos.f64 x) (neg.f64 (cos.f64 eps))))","(/.f64 (fma.f64 (sin.f64 x) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) (*.f64 (cos.f64 x) #s(literal 1 binary64))) (*.f64 (cos.f64 x) (pow.f64 (tan.f64 eps) #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 eps)) (sin.f64 x))) (*.f64 (neg.f64 (cos.f64 eps)) (cos.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) (cos.f64 x)))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (-.f64 (tan.f64 eps) (tan.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (tan.f64 x) (/.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (sin.f64 (+.f64 eps x)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) (tan.f64 x)) (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (-.f64 (tan.f64 x) (tan.f64 eps)) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)) (tan.f64 x))","(fma.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps) (tan.f64 x))","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) (tan.f64 x))","(fma.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (tan.f64 x))","(fma.f64 #s(literal 1 binary64) (tan.f64 eps) (tan.f64 x))","(fma.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (tan.f64 eps))","(-.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (-.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (-.f64 (tan.f64 eps) (tan.f64 x))))","(+.f64 (tan.f64 x) (tan.f64 eps))","(+.f64 (tan.f64 eps) (tan.f64 x))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) (sin.f64 eps))","(*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (tan.f64 eps))","(pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64))) (neg.f64 (cos.f64 eps)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sin.f64 eps)))) (neg.f64 (neg.f64 (neg.f64 (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (neg.f64 (cos.f64 eps))))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (cos.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64))))","(/.f64 (neg.f64 (sin.f64 eps)) (neg.f64 (cos.f64 eps)))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (tan.f64 eps) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (tan.f64 eps)))","(tan.f64 eps)","(exp.f64 (*.f64 (log.f64 (pow.f64 (tan.f64 eps) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 eps (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))","(*.f64 (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) eps)","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64))) eps) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64))) eps) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (pow.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64)) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) #s(literal -1/3 binary64) #s(literal -1/3 binary64))))))","(fma.f64 eps (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) (*.f64 eps (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) eps (*.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64)))) eps) (*.f64 (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 eps (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))) (*.f64 eps (*.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)))))","(*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (sin.f64 x))","(*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(*.f64 (sin.f64 x) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))","(pow.f64 (exp.f64 #s(literal 4 binary64)) (log.f64 (sin.f64 x)))","(pow.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 2 binary64))","(pow.f64 (sin.f64 x) #s(literal 4 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))))) #s(literal -2 binary64))","(/.f64 (neg.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64))) #s(literal -4 binary64))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))","(/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x)))) #s(literal 2 binary64))","(/.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (cos.f64 (*.f64 #s(literal 2 binary64) x))) #s(literal 2 binary64)) #s(literal 4 binary64))","(exp.f64 (fma.f64 (log.f64 (sin.f64 x)) #s(literal 2 binary64) (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 4 binary64)))","(*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))","(*.f64 (cos.f64 x) (cos.f64 x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cos.f64 x)))","(pow.f64 (neg.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (cos.f64 x)) (log.f64 (cos.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (cos.f64 (-.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))))))","(/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 eps x))) (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (cos.f64 (-.f64 eps x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))","(fma.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 (+.f64 eps x))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(*.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))) #s(literal 1/2 binary64))","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))","(pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))))) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 (+.f64 eps x) x)) (cos.f64 (-.f64 x (+.f64 eps x))))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (-.f64 (+.f64 eps x) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 (+.f64 eps x) x)) (cos.f64 (-.f64 x (+.f64 eps x)))) #s(literal 2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))))))","(/.f64 (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 (+.f64 eps x) x)))))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(*.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 x) (sin.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (sin.f64 x))) (neg.f64 (neg.f64 (cos.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (cos.f64 x) (sin.f64 x))))","(/.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (sin.f64 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":290.9970703125,"type":"rewrite"},{"compiler":[[41760,4150]],"memory":[[11242752,104601936]],"time":147.60595703125,"type":"eval"},{"alts":[["(/.f64 #s(approx (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/6 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) eps (/.f64 eps (cos.f64 x)))) (cos.f64 x))","fresh",0.4184181458102456,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","next",0.07291970401790726,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","next",0.216423475870119,"binary64"],["(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","done",23.409979767845932,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",23.52383671621046,"binary64"],["(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","fresh",0.08550652467287427,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","next",0.4989941779106759,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","fresh",0.7128258997516547,"binary64"],["#s(approx (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (+.f64 (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64)))))","fresh",0.6292734144058849,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))) eps))","fresh",0.41060564581760595,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","next",1.1057653857112784,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","next",1.4072402388266303,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","fresh",1.3985238522108405,"binary64"]],"compiler":[[51,28],[17,12],[14,12],[16,10],[7,6],[14,12],[32,20],[21,14],[63,26],[51,26],[90,41],[79,37],[80,37],[51,28],[17,12],[14,12],[14,12],[32,20],[21,14],[63,26],[51,26],[90,41],[79,37],[80,37]],"count":[[991,13]],"kept":[{"done":[1,1],"fresh":[7,0],"new":[978,11],"picked":[5,1]}],"memory":[[-4919920,41940480]],"min-error":[[0.022157911492076156,"binary64"]],"time":26.133056640625,"type":"prune"},{"egraph":[[0,8099,652,0.089953665],[5,6809,690,0.020691661],[4,3497,690,0.025480811],[3,1481,690,0.013051831],[2,417,694,0.005759227],[1,174,694,0.001653899],[0,105,706,0.000881175],[0,71,716,0.000545475]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","eps","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 eps x))","(+.f64 eps x)","x","(cos.f64 x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/3 binary64)","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","#s(literal 4/3 binary64)","(*.f64 eps eps)","eps","#s(literal 1 binary64)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","#s(literal 1/3 binary64)","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","#s(literal 1 binary64)","(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))","(/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(cos.f64 (+.f64 eps x))","(+.f64 eps x)","eps","x","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","(cos.f64 x)","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(sin.f64 x)","x","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(cos.f64 x)","#s(literal 3 binary64)","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","#s(literal 2 binary64)"]],"locations":[["(sin.f64 x)","cost-diff",0],["(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","cost-diff",0],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","cost-diff",0],["(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","cost-diff",2],["(/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","cost-diff",0],["(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))","cost-diff",0],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","cost-diff",2],["(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","cost-diff",0],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","cost-diff",0],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","cost-diff",0],["(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","cost-diff",0],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","cost-diff",0]],"memory":[[-154448,36409632]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","eps","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(+.f64 eps x)","(+.f64 x eps)","x","(cos.f64 x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/3 binary64)","#s(literal 1 binary64)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","#s(literal 4/3 binary64)","(*.f64 eps eps)","eps","#s(literal 1 binary64)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","#s(literal 1/3 binary64)","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","#s(literal 1 binary64)","(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))","(*.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) (cos.f64 x))","(/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(+.f64 eps x)","(+.f64 x eps)","eps","x","(sin.f64 (+.f64 #s(literal 0 binary64) eps))","(sin.f64 eps)","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","(cos.f64 x)","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (fma.f64 (/.f64 eps (cos.f64 x)) (sin.f64 x) #s(literal 1 binary64)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))","(sin.f64 x)","x","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(cos.f64 x)","#s(literal 3 binary64)","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":260.47705078125,"type":"simplify"},{"compiler":[[499,64]],"locations":[["(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","accuracy",0.01953125],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.02734375],["(pow.f64 (cos.f64 x) #s(literal 3 binary64))","accuracy",0.041347509768442016],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","accuracy",0.4951973590677592],["(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))","accuracy",0.01171875],["(cos.f64 x)","accuracy",0.01171875],["(cos.f64 (+.f64 eps x))","accuracy",0.07613546308637054],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","accuracy",0.1484375],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","accuracy",0.0078125],["(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","accuracy",0.015625],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","accuracy",0.40279314577842956],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","accuracy",1.0982262810668986],["(*.f64 eps eps)","accuracy",0.0],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","accuracy",0.0078125],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","accuracy",0.40279314577842956],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","accuracy",1.3950690856866268],["(cos.f64 x)","accuracy",0.01171875],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","accuracy",0.015625],["(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","accuracy",0.01953125],["(cos.f64 (+.f64 eps x))","accuracy",0.07613546308637054]],"memory":[[-27680,68483232]],"mixsample":[[20.5390625,"ival-div",0],[13.534423828125,"adjust",800],[0.1630859375,"ival-assert",0],[4.779296875,"ival-sub",0],[5.140380859375,"ival-tan",0],[7.3583984375,"ival-cos",0],[12.005126953125,"const",0],[0.0048828125,"ival-sub",400],[0.0439453125,"ival-tan",400],[0.170166015625,"adjust",2000],[10.185546875,"ival-pow",0],[0.009033203125,"ival-mult",800],[18.53857421875,"ival-add",0],[73.84716796875,"ival-mult",0],[0.01123046875,"ival-mult",400],[8.573486328125,"ival-sin",0],[0.015625,"ival-add",400],[0.296875,"ival-true",0],[0.02001953125,"ival-add",800],[0.918212890625,"exact",0],[3.632080078125,"ival-pow2",0]],"outcomes":[[88.78173828125,1,"valid",84],[1.340087890625,2,"valid",1],[126.12060546875,0,"valid",171]],"time":260.807861328125,"type":"localize"},{"count":[[26,142]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(+.f64 #s(literal 0 binary64) eps)","(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))","(/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(sin.f64 x)","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(*.f64 eps eps)","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))"]],"memory":[[-8717824,21776624]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(/ (cos eps) (sin eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1 (/ (cos eps) (sin eps))) (* 2/3 x))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1/2 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1/2 (/ (cos eps) (sin eps))) (* 1/6 x))) 1)) (/ (cos eps) (sin eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (- (* x (- (* -1/6 (pow eps 2)) (* -3/2 (pow eps 2)))) (* -1 eps))) (pow eps 2))))","(* eps x)","(* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -3/2 eps)))))","(* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps))))) (* -3/2 eps)))))","(* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (+ (* 1/120 eps) (* (pow x 2) (- (* -1/5040 eps) (+ (* -3/2 (- (* 1/120 eps) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps)))) (+ (* -61/240 eps) (* 7/8 (- (* -1/6 eps) (* -3/2 eps)))))))) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps))))) (* -3/2 eps)))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(+ 1 (* -3/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(* (cos x) (cos (+ eps x)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* (pow x 2) (+ 1 (* 4/3 (pow eps 2))))","(* (pow x 2) (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(* (pow x 2) (+ 1 (+ (* 1/3 (/ (pow eps 2) (pow x 2))) (+ (* 4/3 (pow eps 2)) (+ (/ 1 (pow x 2)) (/ eps x))))))","(/ (* (cos x) (cos (+ eps x))) (sin eps))","(/ (cos (+ eps x)) (sin eps))","(+ (/ eps (pow (cos x) 2)) (/ (* (pow eps 2) (sin x)) (pow (cos x) 3)))","(/ (* eps (sin x)) (pow (cos x) 3))","(sin x)","(cos (+ eps x))","(cos x)","(* x (+ 1 (* 4/3 (pow eps 2))))","(* x (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(pow (cos x) 3)","(pow (cos x) 2)","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(* (cos x) (cos (- eps (* -1 x))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* (pow x 2) (+ 1 (+ (* -1 (/ (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x))) x)) (* 4/3 (pow eps 2)))))","(/ (* (cos x) (cos (- eps (* -1 x)))) (sin eps))","(/ (cos (- eps (* -1 x))) (sin eps))","(cos (- eps (* -1 x)))","(* -1 (* x (+ (* -1 (+ 1 (* 4/3 (pow eps 2)))) (* -1 (/ eps x)))))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps x) (pow x 2)))","(+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* 4/3 (pow x 2)))))) (pow x 2)))","(/ (pow (cos x) 2) eps)","(/ (+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (+ (* -1/2 (pow (cos x) 2)) (* (pow eps 2) (- (* 1/24 (pow (cos x) 2)) (+ (* -1/6 (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))) (* 1/120 (pow (cos x) 2)))))) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (cos x) eps)","(/ (+ (cos x) (* -1 (* eps (sin x)))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (* -1/2 (cos x)) (* -1/6 (cos x))))))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (+ (* -1/2 (cos x)) (* (pow eps 2) (- (* 1/24 (cos x)) (+ (* -1/6 (- (* -1/2 (cos x)) (* -1/6 (cos x)))) (* 1/120 (cos x)))))) (* -1/6 (cos x))))))) eps)","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(pow eps 2)","(+ eps x)","(+ x (* eps (+ 1 (* 4/3 (* eps x)))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* 1/3 (pow eps 2))","(* (pow eps 2) (+ 1/3 (/ 1 (pow eps 2))))","(* (pow eps 2) (+ 1/3 (* 4/3 (pow x 2))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (/ x eps))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (+ (/ 1 (pow eps 2)) (+ (/ x eps) (/ (pow x 2) (pow eps 2)))))))","(/ (* (pow eps 2) (sin x)) (pow (cos x) 3))","(* (pow eps 2) (+ (/ 1 (* eps (pow (cos x) 2))) (/ (sin x) (pow (cos x) 3))))","(* 4/3 (* (pow eps 2) x))","(* (pow eps 2) (+ (* 4/3 x) (/ 1 eps)))","(* (pow eps 2) (+ (* 4/3 x) (+ (/ 1 eps) (/ x (pow eps 2)))))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(sin (neg (* -1 eps)))","(* (cos x) (cos (- x (* -1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (+ 1/3 (+ (* -1 (/ (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps))) eps)) (* 4/3 (pow x 2)))))","(/ (* (cos x) (cos (- x (* -1 eps)))) (sin (neg (* -1 eps))))","(/ (cos (- x (* -1 eps))) (sin (neg (* -1 eps))))","(cos (- x (* -1 eps)))","(* (pow eps 2) (+ (* -1 (/ (- (* -1 (/ x eps)) 1) eps)) (* 4/3 x)))"]],"series":[[7.070068359375,"((/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (cos (+ eps x)) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (* eps eps) 1/3) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (+ 0 eps) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (* (sin x) (/ eps (pow (cos x) 3))) (sin x) (cos (+ eps x)) (cos x) (* eps eps) (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (pow (cos x) 3) (pow (cos x) 2))","eps","-inf"],[6.787109375,"((/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (cos (+ eps x)) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (* eps eps) 1/3) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (+ 0 eps) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (* (sin x) (/ eps (pow (cos x) 3))) (sin x) (cos (+ eps x)) (cos x) (* eps eps) (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (pow (cos x) 3) (pow (cos x) 2))","eps","inf"],[7.274169921875,"((/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (cos (+ eps x)) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (* eps eps) 1/3) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (+ 0 eps) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (* (sin x) (/ eps (pow (cos x) 3))) (sin x) (cos (+ eps x)) (cos x) (* eps eps) (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (pow (cos x) 3) (pow (cos x) 2))","eps","0"],[8.626953125,"((/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (cos (+ eps x)) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (* eps eps) 1/3) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (+ 0 eps) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (* (sin x) (/ eps (pow (cos x) 3))) (sin x) (cos (+ eps x)) (cos x) (* eps eps) (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (pow (cos x) 3) (pow (cos x) 2))","x","-inf"],[18.695068359375,"((/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (cos (+ eps x)) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (* eps eps) 1/3) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (+ 0 eps) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (* (sin x) (/ eps (pow (cos x) 3))) (sin x) (cos (+ eps x)) (cos x) (* eps eps) (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (pow (cos x) 3) (pow (cos x) 2))","x","inf"],[4.226806640625,"((/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (cos (+ eps x)) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (* eps eps) 1/3) 1) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (+ 0 eps) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (* (sin x) (/ eps (pow (cos x) 3))) (sin x) (cos (+ eps x)) (cos x) (* eps eps) (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (pow (cos x) 3) (pow (cos x) 2))","x","0"]],"time":57.335205078125,"type":"series"},{"count":[[142,140]],"egraph":[[0,8213,2811,0.10349508],[2,6395,2996,0.029483708],[1,1967,3055,0.022056859],[0,625,3216,0.006580879]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(/ (cos eps) (sin eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1 (/ (cos eps) (sin eps))) (* 2/3 x))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1/2 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1/2 (/ (cos eps) (sin eps))) (* 1/6 x))) 1)) (/ (cos eps) (sin eps)))","eps","(+ eps (* (pow eps 2) x))","(+ eps (* x (+ (* eps x) (pow eps 2))))","(+ eps (* x (+ (* x (- (* x (- (* -1/6 (pow eps 2)) (* -3/2 (pow eps 2)))) (* -1 eps))) (pow eps 2))))","(* eps x)","(* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -3/2 eps)))))","(* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps))))) (* -3/2 eps)))))","(* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (+ (* 1/120 eps) (* (pow x 2) (- (* -1/5040 eps) (+ (* -3/2 (- (* 1/120 eps) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps)))) (+ (* -61/240 eps) (* 7/8 (- (* -1/6 eps) (* -3/2 eps)))))))) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps))))) (* -3/2 eps)))))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(+ 1 (* -3/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(* (cos x) (cos (+ eps x)))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* (pow x 2) (+ 1 (* 4/3 (pow eps 2))))","(* (pow x 2) (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(* (pow x 2) (+ 1 (+ (* 1/3 (/ (pow eps 2) (pow x 2))) (+ (* 4/3 (pow eps 2)) (+ (/ 1 (pow x 2)) (/ eps x))))))","(/ (* (cos x) (cos (+ eps x))) (sin eps))","(/ (cos (+ eps x)) (sin eps))","(+ (/ eps (pow (cos x) 2)) (/ (* (pow eps 2) (sin x)) (pow (cos x) 3)))","(/ (* eps (sin x)) (pow (cos x) 3))","(sin x)","(cos (+ eps x))","(cos x)","(* x (+ 1 (* 4/3 (pow eps 2))))","(* x (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(pow (cos x) 3)","(pow (cos x) 2)","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(* (cos x) (cos (- eps (* -1 x))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* (pow x 2) (+ 1 (+ (* -1 (/ (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x))) x)) (* 4/3 (pow eps 2)))))","(/ (* (cos x) (cos (- eps (* -1 x)))) (sin eps))","(/ (cos (- eps (* -1 x))) (sin eps))","(cos (- eps (* -1 x)))","(* -1 (* x (+ (* -1 (+ 1 (* 4/3 (pow eps 2)))) (* -1 (/ eps x)))))","(/ eps (pow (cos x) 2))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps x) (pow x 2)))","(+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* 4/3 (pow x 2)))))) (pow x 2)))","(/ (pow (cos x) 2) eps)","(/ (+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (+ (* -1/2 (pow (cos x) 2)) (* (pow eps 2) (- (* 1/24 (pow (cos x) 2)) (+ (* -1/6 (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))) (* 1/120 (pow (cos x) 2)))))) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (cos x) eps)","(/ (+ (cos x) (* -1 (* eps (sin x)))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (* -1/2 (cos x)) (* -1/6 (cos x))))))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (+ (* -1/2 (cos x)) (* (pow eps 2) (- (* 1/24 (cos x)) (+ (* -1/6 (- (* -1/2 (cos x)) (* -1/6 (cos x)))) (* 1/120 (cos x)))))) (* -1/6 (cos x))))))) eps)","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(pow eps 2)","(+ eps x)","(+ x (* eps (+ 1 (* 4/3 (* eps x)))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* 1/3 (pow eps 2))","(* (pow eps 2) (+ 1/3 (/ 1 (pow eps 2))))","(* (pow eps 2) (+ 1/3 (* 4/3 (pow x 2))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (/ x eps))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (+ (/ 1 (pow eps 2)) (+ (/ x eps) (/ (pow x 2) (pow eps 2)))))))","(/ (* (pow eps 2) (sin x)) (pow (cos x) 3))","(* (pow eps 2) (+ (/ 1 (* eps (pow (cos x) 2))) (/ (sin x) (pow (cos x) 3))))","(* 4/3 (* (pow eps 2) x))","(* (pow eps 2) (+ (* 4/3 x) (/ 1 eps)))","(* (pow eps 2) (+ (* 4/3 x) (+ (/ 1 eps) (/ x (pow eps 2)))))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(sin (neg (* -1 eps)))","(* (cos x) (cos (- x (* -1 eps))))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (+ 1/3 (+ (* -1 (/ (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps))) eps)) (* 4/3 (pow x 2)))))","(/ (* (cos x) (cos (- x (* -1 eps)))) (sin (neg (* -1 eps))))","(/ (cos (- x (* -1 eps))) (sin (neg (* -1 eps))))","(cos (- x (* -1 eps)))","(* (pow eps 2) (+ (* -1 (/ (- (* -1 (/ x eps)) 1) eps)) (* 4/3 x)))"]],"memory":[[2412480,50314656]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps))) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps)))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(sin eps)","(sin.f64 eps)","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(fma.f64 (neg.f64 x) (fma.f64 (cos.f64 eps) x (sin.f64 eps)) (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 2/3 binary64) (neg.f64 (cos.f64 eps))) x (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 eps)) (sin.f64 eps) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(fma.f64 (*.f64 x eps) eps (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(fma.f64 (fma.f64 (*.f64 x eps) (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (*.f64 eps eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x eps) #s(literal 4/3 binary64) (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(/ (cos eps) (sin eps))","(/.f64 (cos.f64 eps) (sin.f64 eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(-.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) x)","(+ (* x (- (* -1 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (neg.f64 x) (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* x (+ (* -1 (/ (cos eps) (sin eps))) (* 2/3 x))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) x) (/.f64 (cos.f64 eps) (sin.f64 eps))) x #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* -1/2 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* x (+ (* -1/2 (/ (cos eps) (sin eps))) (* 1/6 x))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) x #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","eps","(+ eps (* (pow eps 2) x))","(fma.f64 (*.f64 x eps) eps eps)","(+ eps (* x (+ (* eps x) (pow eps 2))))","(fma.f64 (*.f64 eps (+.f64 x eps)) x eps)","(+ eps (* x (+ (* x (- (* x (- (* -1/6 (pow eps 2)) (* -3/2 (pow eps 2)))) (* -1 eps))) (pow eps 2))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps) x (*.f64 eps eps)) x eps)","(* eps x)","(*.f64 x eps)","(* x (+ eps (* (pow x 2) (- (* -1/6 eps) (* -3/2 eps)))))","(*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) (*.f64 x x) eps) x)","(* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (* 1/120 eps) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps))))) (* -3/2 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 7/8 binary64) eps (*.f64 eps #s(literal -2 binary64)))) (*.f64 x x) (*.f64 #s(literal 4/3 binary64) eps)) (*.f64 x eps))","(* x (+ eps (* (pow x 2) (- (+ (* -1/6 eps) (* (pow x 2) (- (+ (* 1/120 eps) (* (pow x 2) (- (* -1/5040 eps) (+ (* -3/2 (- (* 1/120 eps) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps)))) (+ (* -61/240 eps) (* 7/8 (- (* -1/6 eps) (* -3/2 eps)))))))) (+ (* -3/2 (- (* -1/6 eps) (* -3/2 eps))) (* 7/8 eps))))) (* -3/2 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1/5040 binary64) eps) (fma.f64 (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 7/8 binary64) eps (*.f64 eps #s(literal -2 binary64)))) #s(literal -3/2 binary64) (fma.f64 #s(literal -61/240 binary64) eps (*.f64 eps #s(literal 7/6 binary64))))) (*.f64 x x) (-.f64 (*.f64 #s(literal 1/120 binary64) eps) (fma.f64 #s(literal 7/8 binary64) eps (*.f64 eps #s(literal -2 binary64))))) (*.f64 x x) (*.f64 #s(literal 4/3 binary64) eps)) (*.f64 x eps))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 eps) (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 eps))) x (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ eps (* x (+ 1 (* 4/3 (pow eps 2)))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(+ 1 (* -3/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -3/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 7/8 (pow x 2)) 3/2)))","(fma.f64 (fma.f64 #s(literal 7/8 binary64) (*.f64 x x) #s(literal -3/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 7/8 (* -61/240 (pow x 2)))) 3/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -61/240 binary64) (*.f64 x x) #s(literal 7/8 binary64)) (*.f64 x x) #s(literal -3/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* -1 (pow x 2)))","(fma.f64 (neg.f64 x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(* (cos x) (cos (+ eps x)))","(*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(* (pow x 2) (+ 1 (* 4/3 (pow eps 2))))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (/.f64 eps x)) x x) x)","(* (pow x 2) (+ 1 (+ (* 1/3 (/ (pow eps 2) (pow x 2))) (+ (* 4/3 (pow eps 2)) (+ (/ 1 (pow x 2)) (/ eps x))))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/3 binary64) eps) x) (/.f64 eps x) (+.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 eps x))) #s(literal 1 binary64))) (*.f64 x x))","(/ (* (cos x) (cos (+ eps x))) (sin eps))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(/ (cos (+ eps x)) (sin eps))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(+ (/ eps (pow (cos x) 2)) (/ (* (pow eps 2) (sin x)) (pow (cos x) 3)))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/ (* eps (sin x)) (pow (cos x) 3))","(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(sin x)","(sin.f64 x)","(cos (+ eps x))","(cos.f64 (+.f64 x eps))","(cos x)","(cos.f64 x)","(* x (+ 1 (* 4/3 (pow eps 2))))","(*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)","(* x (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (/.f64 eps x)) x x)","(pow (cos x) 3)","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(* (cos x) (cos (- eps (* -1 x))))","(*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* (pow x 2) (+ 1 (+ (* -1 (/ (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x))) x)) (* 4/3 (pow eps 2)))))","(*.f64 (+.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)) x) eps) x)) #s(literal 1 binary64)) (*.f64 x x))","(/ (* (cos x) (cos (- eps (* -1 x)))) (sin eps))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(/ (cos (- eps (* -1 x))) (sin eps))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(cos (- eps (* -1 x)))","(cos.f64 (+.f64 x eps))","(* -1 (* x (+ (* -1 (+ 1 (* 4/3 (pow eps 2)))) (* -1 (/ eps x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (/.f64 eps x)) x x)","(/ eps (pow (cos x) 2))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1/3 binary64) (/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (sin.f64 x)) (neg.f64 (cos.f64 x)))) (neg.f64 eps) (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 1/120 binary64) eps) eps #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal -1/5040 binary64) eps) eps #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(fma.f64 (neg.f64 (*.f64 (cos.f64 x) eps)) (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (cos.f64 x) eps)) (sin.f64 x) (*.f64 #s(literal -1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1/6 binary64) #s(literal 1/6 binary64))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (neg.f64 eps) (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (pow x 2))","(fma.f64 x x #s(literal 1 binary64))","(+ 1 (+ (* eps x) (pow x 2)))","(fma.f64 x (+.f64 x eps) #s(literal 1 binary64))","(+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* 4/3 (pow x 2)))))) (pow x 2)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64)) eps x) eps (fma.f64 x x #s(literal 1 binary64)))","(/ (pow (cos x) 2) eps)","(/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)","(/ (+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2)) eps)","(/.f64 (fma.f64 (neg.f64 (*.f64 (cos.f64 x) eps)) (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/.f64 (fma.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (*.f64 (cos.f64 x) (sin.f64 x))) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (+ (* -1/2 (pow (cos x) 2)) (* (pow eps 2) (- (* 1/24 (pow (cos x) 2)) (+ (* -1/6 (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))) (* 1/120 (pow (cos x) 2)))))) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/.f64 (fma.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (*.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal 1/120 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/18 binary64)))) (*.f64 eps eps) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (cos x) eps)","(/.f64 (cos.f64 x) eps)","(/ (+ (cos x) (* -1 (* eps (sin x)))) eps)","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (* -1/2 (cos x)) (* -1/6 (cos x))))))) eps)","(/.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/3 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (+ (* -1/2 (cos x)) (* (pow eps 2) (- (* 1/24 (cos x)) (+ (* -1/6 (- (* -1/2 (cos x)) (* -1/6 (cos x)))) (* 1/120 (cos x)))))) (* -1/6 (cos x))))))) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (cos.f64 x)) (fma.f64 #s(literal 1/120 binary64) (cos.f64 x) (*.f64 (cos.f64 x) #s(literal 1/18 binary64)))) (*.f64 eps eps) (*.f64 #s(literal -1/3 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (cos.f64 x))","(pow eps 2)","(*.f64 eps eps)","(+ eps x)","(+.f64 x eps)","(+ x (* eps (+ 1 (* 4/3 (* eps x)))))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 (fma.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) (/.f64 (sin.f64 x) eps) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (*.f64 eps eps))) eps)","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(+.f64 #s(literal 1 binary64) (*.f64 (-.f64 (fma.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) (/.f64 (sin.f64 x) eps) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (*.f64 eps eps)))","(* 1/3 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 1/3 binary64))","(* (pow eps 2) (+ 1/3 (/ 1 (pow eps 2))))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(* (pow eps 2) (+ 1/3 (* 4/3 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64)) eps) eps)","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (/ x eps))))","(*.f64 (*.f64 (+.f64 (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) (/.f64 x eps)) #s(literal 1/3 binary64)) eps) eps)","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (+ (/ 1 (pow eps 2)) (+ (/ x eps) (/ (pow x 2) (pow eps 2)))))))","(*.f64 (+.f64 (+.f64 #s(literal 1/3 binary64) (fma.f64 (*.f64 #s(literal 4/3 binary64) x) x (/.f64 #s(literal 1 binary64) (*.f64 eps eps)))) (fma.f64 (/.f64 x eps) (/.f64 x eps) (/.f64 x eps))) (*.f64 eps eps))","(/ (* (pow eps 2) (sin x)) (pow (cos x) 3))","(/.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))","(* (pow eps 2) (+ (/ 1 (* eps (pow (cos x) 2))) (/ (sin x) (pow (cos x) 3))))","(fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 eps eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* 4/3 (* (pow eps 2) x))","(*.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x)","(* (pow eps 2) (+ (* 4/3 x) (/ 1 eps)))","(fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)","(* (pow eps 2) (+ (* 4/3 x) (+ (/ 1 eps) (/ x (pow eps 2)))))","(*.f64 (+.f64 (fma.f64 #s(literal 4/3 binary64) x (/.f64 (/.f64 x eps) eps)) (/.f64 #s(literal 1 binary64) eps)) (*.f64 eps eps))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(sin (neg (* -1 eps)))","(sin.f64 eps)","(* (cos x) (cos (- x (* -1 eps))))","(*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (-.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1/3 binary64) #s(literal -1/3 binary64))) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (-.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps))) (*.f64 eps eps))","(* (pow eps 2) (+ 1/3 (+ (* -1 (/ (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps))) eps)) (* 4/3 (pow x 2)))))","(*.f64 (+.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) x) x (/.f64 (+.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) eps) x) eps)) #s(literal 1/3 binary64)) (*.f64 eps eps))","(/ (* (cos x) (cos (- x (* -1 eps)))) (sin (neg (* -1 eps))))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(/ (cos (- x (* -1 eps))) (sin (neg (* -1 eps))))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(cos (- x (* -1 eps)))","(cos.f64 (+.f64 x eps))","(* (pow eps 2) (+ (* -1 (/ (- (* -1 (/ x eps)) 1) eps)) (* 4/3 x)))","(*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) x (/.f64 (+.f64 (/.f64 x eps) #s(literal 1 binary64)) eps)) eps) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":270.9580078125,"type":"simplify"},{"count":[[26,490]],"egraph":[[0,8814,494,0.079083427],[2,4280,514,0.064910506],[1,461,526,0.016848046],[0,105,627,0.00307054],[0,71,653,0.000526378]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","(*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(+.f64 #s(literal 0 binary64) eps)","(*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x))","(/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps)))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(sin.f64 x)","(cos.f64 (+.f64 eps x))","(cos.f64 x)","(*.f64 eps eps)","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))"]],"memory":[[6255824,60855376]],"outputs":[["(*.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal 2 binary64))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps))))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) (pow.f64 (pow.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))","(*.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(*.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))))","(pow.f64 (/.f64 (cos.f64 x) (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(/.f64 (*.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 (neg.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))","(/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(neg.f64 (/.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(neg.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))))) #s(literal -1 binary64)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps))) #s(literal 2 binary64))) (sin.f64 (+.f64 (+.f64 x eps) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sin.f64 eps)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps))) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps)))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 0 binary64) (pow.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64))))))","(fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)))","(fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x)))","(fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps)))))","(fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x))))","(fma.f64 (cos.f64 eps) #s(literal 0 binary64) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 eps) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (sin.f64 eps) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(fma.f64 (sin.f64 x) (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 x eps)) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 x eps)) (neg.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps)))))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 x eps)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x))))","(sin.f64 eps)","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (+.f64 (+.f64 x eps) x))) (cos.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 x eps) x)))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (+.f64 (+.f64 x eps) x))) (sin.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 x eps) x)))))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))))) (cos.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))))) (sin.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))))","(-.f64 (*.f64 (sin.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (cos.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))) (*.f64 (cos.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (sin.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))))","(-.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps))))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 x eps))) (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)))","(+.f64 (*.f64 (sin.f64 x) (cos.f64 (-.f64 eps x))) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps)))))","(+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 eps) #s(literal 0 binary64)))","(+.f64 (*.f64 (cos.f64 eps) #s(literal 0 binary64)) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))","(*.f64 (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x))) #s(literal 1/2 binary64))","(*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))","(*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal -1 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (-.f64 (+.f64 x eps) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (neg.f64 (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 (-.f64 x (+.f64 x eps)))) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))))))","(/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64)) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))))","(/.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))) (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/3 binary64) eps) eps #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) #s(literal 1 binary64))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/3 binary64) eps) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 eps (*.f64 #s(literal 1/3 binary64) eps) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps)","(*.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) eps) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) #s(literal 0 binary64)))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/3 binary64) eps) eps (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x))","(fma.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x))","(fma.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 eps eps) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/3 binary64) eps) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(fma.f64 eps (*.f64 #s(literal 1/3 binary64) eps) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(+.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))","(+.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))) #s(literal 1 binary64))","(+.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x)))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(+.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x))","(+.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps))))","(*.f64 (/.f64 (sin.f64 eps) (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x)))) #s(literal 2 binary64))","(*.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) (cos.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) (pow.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) (sin.f64 eps))","(*.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (sin.f64 eps) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))))","(*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))","(*.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 2 binary64))) (-.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))","(/.f64 (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (neg.f64 (tan.f64 x)) #s(literal 2 binary64)) (*.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (sin.f64 eps))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))","(/.f64 (neg.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (sin.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64))) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))))","(/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)))","(/.f64 (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64))) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))))","(/.f64 (*.f64 (sin.f64 eps) #s(literal 1 binary64)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (pow.f64 (tan.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64))) (-.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (pow.f64 (tan.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (sin.f64 eps) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))","(fma.f64 #s(literal -1 binary64) (tan.f64 x) (tan.f64 (+.f64 x eps)))","(fma.f64 (sin.f64 (+.f64 x eps)) (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (tan.f64 eps) (tan.f64 x))) #s(literal -1 binary64)) (neg.f64 (tan.f64 x)))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 2 binary64)) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps)))))","(-.f64 (/.f64 (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (tan.f64 x) #s(literal 3 binary64)) (fma.f64 (tan.f64 x) (+.f64 (tan.f64 x) (tan.f64 (+.f64 x eps))) (pow.f64 (tan.f64 (+.f64 x eps)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (/.f64 (*.f64 (sin.f64 x) (cos.f64 (+.f64 x eps))) (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (tan.f64 x)) (tan.f64 (+.f64 x eps)))","(+.f64 (tan.f64 (+.f64 x eps)) (neg.f64 (tan.f64 x)))","(*.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 x eps) x) (*.f64 (+.f64 (+.f64 x eps) x) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (pow.f64 (neg.f64 x) #s(literal 2 binary64))) (-.f64 (+.f64 x eps) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (neg.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 x eps) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps)) (neg.f64 (+.f64 (+.f64 x eps) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 eps eps))) (neg.f64 (neg.f64 eps)))","(/.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (+.f64 (+.f64 x eps) x))","(/.f64 (neg.f64 (*.f64 eps eps)) (neg.f64 eps))","(/.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 eps eps) (-.f64 eps #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 x eps) x) (*.f64 (+.f64 (+.f64 x eps) x) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 eps) (neg.f64 (*.f64 eps eps))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (*.f64 (+.f64 x eps) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) x (+.f64 x eps))","(-.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (+.f64 (+.f64 x eps) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 x eps) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps)) (/.f64 (*.f64 eps eps) (neg.f64 eps)))","(-.f64 (+.f64 x eps) x)","(exp.f64 (-.f64 (*.f64 (log.f64 eps) #s(literal 3 binary64)) (*.f64 (log.f64 eps) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 1 binary64)))","(+.f64 (neg.f64 x) (+.f64 x eps))","(+.f64 #s(literal 0 binary64) eps)","(+.f64 (+.f64 x eps) (neg.f64 x))","(+.f64 x (-.f64 eps x))","(+.f64 eps #s(literal 0 binary64))","eps","(*.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) (cos.f64 x))","(*.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) (pow.f64 (sin.f64 eps) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (/.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) #s(literal 1 binary64)))","(*.f64 (cos.f64 x) (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(*.f64 (cos.f64 (+.f64 x eps)) (*.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) (cos.f64 x)))","(pow.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))))","(/.f64 (*.f64 (cos.f64 x) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))))","(/.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) (neg.f64 (sin.f64 eps)))","(/.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (+.f64 (+.f64 x eps) x))) (*.f64 (sin.f64 eps) #s(literal 2 binary64)))","(/.f64 (pow.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))","(/.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) (*.f64 (sin.f64 eps) #s(literal 1 binary64)))","(/.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) (sin.f64 eps))","(/.f64 (cos.f64 x) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))))","(exp.f64 (neg.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (sin.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sin.f64 eps) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps)))","(*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (pow.f64 (neg.f64 (sin.f64 eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)))","(*.f64 (cos.f64 (+.f64 x eps)) (pow.f64 (sin.f64 eps) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) #s(literal 1 binary64))","(/.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal 1 binary64)) (sin.f64 eps))","(/.f64 (neg.f64 (neg.f64 (cos.f64 (+.f64 x eps)))) (neg.f64 (neg.f64 (sin.f64 eps))))","(/.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (sin.f64 eps)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(neg.f64 (/.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 eps)))","(neg.f64 (/.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 eps))))","(-.f64 (/.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (sin.f64 eps)) (/.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (sin.f64 eps)))","(exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) (pow.f64 (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x))) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 eps (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))","(*.f64 eps (+.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x))))","(pow.f64 (/.f64 (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x))) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x))) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64))) (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -4 binary64)) (*.f64 eps eps) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x))) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))) (-.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x))) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (cos.f64 x) #s(literal -6 binary64)) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (neg.f64 eps) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 eps (cos.f64 x)) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 (sin.f64 x) eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 (*.f64 (sin.f64 x) eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(fma.f64 eps (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","(fma.f64 eps (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))) (/.f64 (pow.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 eps (-.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))))))","(+.f64 (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(+.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) eps) (sin.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 eps (fma.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x) (pow.f64 (cos.f64 x) #s(literal -2 binary64)))))","(*.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3/2 binary64))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3/2 binary64))) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3/2 binary64))))","(*.f64 (/.f64 eps (cos.f64 x)) (/.f64 (tan.f64 x) (cos.f64 x)))","(*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (tan.f64 x))","(*.f64 (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (sin.f64 x))","(*.f64 (*.f64 (sin.f64 x) eps) (pow.f64 (cos.f64 x) #s(literal -3 binary64)))","(*.f64 (/.f64 (tan.f64 x) (cos.f64 x)) (/.f64 eps (cos.f64 x)))","(*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (tan.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 eps (*.f64 (pow.f64 (cos.f64 x) #s(literal -3 binary64)) (sin.f64 x)))","(pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) eps)) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (sin.f64 x) eps) (pow.f64 (cos.f64 x) #s(literal 3/2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3/2 binary64)))","(/.f64 (/.f64 (*.f64 (sin.f64 x) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (cos.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (sin.f64 x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) eps))","(/.f64 (*.f64 (sin.f64 x) #s(literal 1 binary64)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) eps))","(/.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 eps (tan.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(/.f64 (*.f64 (sin.f64 x) eps) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (*.f64 (sin.f64 x) eps)))","(/.f64 (sin.f64 x) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) eps))","(pow.f64 (sin.f64 x) #s(literal 1 binary64))","(sin.f64 x)","(exp.f64 (*.f64 (log.f64 (sin.f64 x)) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sin.f64 x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (cos.f64 (-.f64 eps x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))","(fma.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(-.f64 (*.f64 (cos.f64 (+.f64 x #s(literal 0 binary64))) (cos.f64 eps)) (*.f64 (sin.f64 (+.f64 x #s(literal 0 binary64))) (sin.f64 eps)))","(-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (+.f64 x eps))) (*.f64 #s(literal 0 binary64) (sin.f64 (+.f64 x eps))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 (+.f64 #s(literal 0 binary64) x))) (*.f64 (sin.f64 eps) (sin.f64 (+.f64 #s(literal 0 binary64) x))))","(-.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal 1 binary64)) (*.f64 (sin.f64 (+.f64 x eps)) #s(literal 0 binary64)))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 (+.f64 x eps))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)))","(*.f64 eps (-.f64 eps #s(literal 0 binary64)))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) eps) (neg.f64 eps))","(/.f64 (*.f64 eps (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 eps eps))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 0 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (*.f64 eps eps) #s(literal 0 binary64)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 eps eps)))))","(/.f64 (pow.f64 eps #s(literal 4 binary64)) (*.f64 eps eps))","(/.f64 (*.f64 eps (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (neg.f64 eps) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (neg.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (neg.f64 (*.f64 eps eps))) (*.f64 (*.f64 eps eps) (neg.f64 eps)))","(/.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(fma.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 2 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 eps (-.f64 eps #s(literal 0 binary64)) #s(literal 0 binary64))","(fma.f64 eps eps #s(literal 0 binary64))","(-.f64 (*.f64 eps eps) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 eps eps))","(+.f64 (*.f64 eps eps) #s(literal 0 binary64))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (*.f64 (+.f64 (+.f64 x eps) x) eps) (pow.f64 (+.f64 (+.f64 x eps) x) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps)","(fma.f64 x (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps)) (/.f64 (*.f64 eps eps) (-.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps)))","(+.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x #s(literal 0 binary64)) eps)","(+.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) eps)","(+.f64 #s(literal 0 binary64) (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps))","(+.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) #s(literal 0 binary64))","(+.f64 eps (+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)))","(+.f64 eps (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 3 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal 3/2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3/2 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (cos.f64 x))","(*.f64 (cos.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 (cos.f64 x)))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 3/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 (cos.f64 x)) #s(literal 3/2 binary64) (*.f64 (log.f64 (cos.f64 x)) #s(literal 3/2 binary64))))","(exp.f64 (fma.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64) (log.f64 (cos.f64 x))))","(exp.f64 (+.f64 (log.f64 (cos.f64 x)) (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 3 binary64)))","(*.f64 (cos.f64 x) (cos.f64 x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cos.f64 x)))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (cos.f64 x)) (log.f64 (cos.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":321.7509765625,"type":"rewrite"},{"compiler":[[44798,3428]],"memory":[[1658912,78206352]],"time":138.786865234375,"type":"eval"},{"alts":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","next",0.01171875,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","done",0.07291970401790726,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 #s(approx (cos (+ eps x)) (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))) (cos.f64 x)))","fresh",0.43210719474274417,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) (cos.f64 x)))","fresh",0.216423475870119,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps))))","fresh",0.21354405427702874,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/3 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)) (cos.f64 x)))","fresh",0.35587683575728996,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","next",0.5703213281779558,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)))","fresh",0.8495452387183171,"binary64"],["(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","done",23.409979767845932,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",23.52383671621046,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","next",0.7128258997516547,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","fresh",1.3985244339629699,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","fresh",1.1018843069099309,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","done",1.4072402388266303,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","fresh",1.4009420302045426,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","fresh",1.1057416507860793,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","next",1.3985238522108405,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","fresh",1.3985238522108405,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","next",1.105743686580462,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","fresh",59.97209812679679,"binary64"]],"compiler":[[24,15],[17,12],[25,15],[12,10],[12,10],[30,20],[24,17],[21,17],[16,10],[7,6],[21,14],[40,23],[42,24],[79,37],[101,48],[101,48],[82,38],[80,37],[99,47],[105,51],[24,15],[25,15],[12,10],[12,10],[30,20],[24,17],[21,17],[21,14],[40,23],[42,24],[101,48],[101,48],[82,38],[80,37],[99,47],[105,51]],"count":[[787,20]],"kept":[{"done":[2,2],"fresh":[6,2],"new":[774,14],"picked":[5,2]}],"memory":[[-112544,43760688]],"min-error":[[0.00390625,"binary64"]],"time":26.4990234375,"type":"prune"},{"egraph":[[0,8215,680,0.07778856],[5,6077,736,0.021884295],[4,3253,736,0.022971597],[3,1409,744,0.012111688],[2,439,744,0.006010513],[1,192,744,0.001762956],[0,113,756,0.000915767],[0,81,762,0.000548247]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","eps","(*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(cos.f64 x)","x","(cos.f64 eps)","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(neg.f64 (sin.f64 eps))","(sin.f64 x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","(fma.f64 x x #s(literal 1 binary64))","x","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","x","eps","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(*.f64 eps eps)","#s(literal 1/3 binary64)","#s(literal 1 binary64)","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","x","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","#s(literal 1 binary64)","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x))","#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","(cos.f64 x)"]],"locations":[["#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps))","cost-diff",0],["(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","cost-diff",2],["(cos.f64 x)","cost-diff",0],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","cost-diff",0],["(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","cost-diff",0],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","cost-diff",0],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","cost-diff",0],["(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","cost-diff",2],["#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","cost-diff",0],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","cost-diff",0],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","cost-diff",0],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","cost-diff",0],["(*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","cost-diff",0],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","cost-diff",0]],"memory":[[-2918384,36515600]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","(/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 x)) (fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","eps","(*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x))","(*.f64 (fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))) (cos.f64 x))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))))","(cos.f64 x)","x","(cos.f64 eps)","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(neg.f64 (sin.f64 eps))","(sin.f64 x)","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","(fma.f64 x x #s(literal 1 binary64))","x","#s(literal 1 binary64)","eps","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64)))","(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))","x","eps","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))","(*.f64 eps eps)","#s(literal 1/3 binary64)","#s(literal 1 binary64)","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","eps","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","x","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","(/.f64 (/.f64 #s(literal 1 binary64) (cos.f64 x)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x))))","#s(literal 1 binary64)","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x))","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x))) (cos.f64 x))","#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps))","#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x)))","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","(-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":233.614990234375,"type":"simplify"},{"compiler":[[488,73]],"locations":[["(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","accuracy",0.015625],["(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","accuracy",0.015625],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","accuracy",0.1484375],["#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps))","accuracy",0.4291944382392876],["(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","accuracy",0.0078125],["(cos.f64 x)","accuracy",0.01171875],["(pow.f64 (cos.f64 x) #s(literal 2 binary64))","accuracy",0.02734375],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","accuracy",0.7089202387068014],["(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","accuracy",0.00390625],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","accuracy",0.0078125],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","accuracy",0.40279314577842956],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","accuracy",1.3876017275982984],["(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","accuracy",0.0078125],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","accuracy",0.40279314577842956],["#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","accuracy",0.5962362978282085],["#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","accuracy",1.0982262810668986],["(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","accuracy",0.014003759768442016],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","accuracy",0.015625],["(*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x))","accuracy",0.01953125],["(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","accuracy",0.0234375]],"memory":[[7456864,73048704]],"mixsample":[[21.03466796875,"ival-div",0],[14.092041015625,"adjust",800],[0.143310546875,"ival-assert",0],[5.010009765625,"ival-sub",0],[4.78271484375,"ival-tan",0],[7.822265625,"ival-cos",0],[12.82958984375,"const",0],[0.004150390625,"ival-sub",400],[0.0419921875,"ival-tan",400],[6.91650390625,"ival-pow",0],[22.060791015625,"ival-add",0],[42.845458984375,"ival-mult",0],[8.066650390625,"ival-sin",0],[0.26611328125,"ival-true",0],[0.6220703125,"exact",0],[3.45068359375,"ival-pow2",0],[2.766845703125,"ival-neg",0]],"outcomes":[[93.060791015625,1,"valid",83],[95.247802734375,0,"valid",173]],"time":232.39794921875,"type":"localize"},{"count":[[23,139]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","(*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x))","#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))"]],"memory":[[-3845952,21822976]],"outputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","eps","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(+ eps (* (pow x 2) (- (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (+ (* -2/45 eps) (* 2/3 eps))))) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","1","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ 1 eps)","(+ (* -1 x) (/ 1 eps))","(+ (* x (- (* -1/2 (/ x eps)) 1)) (/ 1 eps))","(+ (* x (- (* x (- (* 1/6 x) (* 1/2 (/ 1 eps)))) 1)) (/ 1 eps))","(/ (cos eps) (sin eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1 (/ (cos eps) (sin eps))) (* 2/3 x))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1/2 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1/2 (/ (cos eps) (sin eps))) (* 1/6 x))) 1)) (/ (cos eps) (sin eps)))","(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1/2 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))))))","(+ 1 (* -1 (* eps x)))","(+ 1 (* x (+ (* -1 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1 eps) (* x (- (* 1/6 (* eps x)) 1/2)))))","(/ (sin eps) (* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))))","(* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* (pow x 2) (+ 1 (* 4/3 (pow eps 2))))","(* (pow x 2) (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(* (pow x 2) (+ 1 (+ (* 1/3 (/ (pow eps 2) (pow x 2))) (+ (* 4/3 (pow eps 2)) (+ (/ 1 (pow x 2)) (/ eps x))))))","(* eps x)","(* x (+ eps (+ (* 1/3 (/ (pow eps 2) x)) (/ 1 x))))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/ eps (pow (cos x) 2))","(pow (cos x) 2)","(cos x)","(/ (+ (cos x) (* -1 (* eps (sin x)))) eps)","(/ (* (cos x) (cos (+ eps x))) (sin eps))","(/ (cos (+ eps x)) (sin eps))","(* -1 (* (sin eps) (sin x)))","(+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))","(+ (cos x) (* -1 (* eps (sin x))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* (pow x 2) (+ 1 (+ (* -1 (/ (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x))) x)) (* 4/3 (pow eps 2)))))","(* -1 (* x (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x)))))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/ (* (cos x) (cos (- eps (* -1 x)))) (sin eps))","(/ (cos (- eps (* -1 x))) (sin eps))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps x) (pow x 2)))","(+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* 4/3 (pow x 2)))))) (pow x 2)))","(+ 1 (* eps x))","(+ 1 (* eps (+ x (* 1/3 eps))))","(/ (cos x) eps)","(/ (pow (cos x) 2) eps)","(/ (+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (+ (* -1/2 (pow (cos x) 2)) (* (pow eps 2) (- (* 1/24 (pow (cos x) 2)) (+ (* -1/6 (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))) (* 1/120 (pow (cos x) 2)))))) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (* -1/2 (cos x)) (* -1/6 (cos x))))))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (+ (* -1/2 (cos x)) (* (pow eps 2) (- (* 1/24 (cos x)) (+ (* -1/6 (- (* -1/2 (cos x)) (* -1/6 (cos x)))) (* 1/120 (cos x)))))) (* -1/6 (cos x))))))) eps)","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(+ (cos x) (* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))))","(+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (+ 1/3 (* 4/3 (pow x 2))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (/ x eps))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (+ (/ 1 (pow eps 2)) (+ (/ x eps) (/ (pow x 2) (pow eps 2)))))))","(* 1/3 (pow eps 2))","(* (pow eps 2) (+ 1/3 (/ x eps)))","(* (pow eps 2) (+ 1/3 (+ (/ 1 (pow eps 2)) (/ x eps))))","(* -1 (sin x))","(+ (* -1 (sin x)) (/ (cos x) eps))","(* eps (+ (* -1 (sin x)) (/ (cos x) eps)))","(/ (sin (neg (* -1 eps))) (* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))))","(sin (neg (* -1 eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (+ 1/3 (+ (* -1 (/ (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps))) eps)) (* 4/3 (pow x 2)))))","(* (pow eps 2) (+ 1/3 (* -1 (/ (- (* -1 x) (/ 1 eps)) eps))))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/ (* (cos x) (cos (- x (* -1 eps)))) (sin (neg (* -1 eps))))","(/ (cos (- x (* -1 eps))) (sin (neg (* -1 eps))))","(* -1 (* eps (+ (sin x) (* -1 (/ (cos x) eps)))))"]],"series":[[28.026123046875,"((/ (sin (- (+ eps x) x)) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (* (neg (sin eps)) (sin x)) (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (+ (* (neg (sin x)) eps) (cos x)))","eps","-inf"],[9.033203125,"((/ (sin (- (+ eps x) x)) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (* (neg (sin eps)) (sin x)) (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (+ (* (neg (sin x)) eps) (cos x)))","eps","inf"],[5.244873046875,"((/ (sin (- (+ eps x) x)) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (* (neg (sin eps)) (sin x)) (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (+ (* (neg (sin x)) eps) (cos x)))","eps","0"],[10.703857421875,"((/ (sin (- (+ eps x) x)) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (* (neg (sin eps)) (sin x)) (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (+ (* (neg (sin x)) eps) (cos x)))","x","-inf"],[9.107177734375,"((/ (sin (- (+ eps x) x)) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (* (neg (sin eps)) (sin x)) (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (+ (* (neg (sin x)) eps) (cos x)))","x","inf"],[9.386962890625,"((/ (sin (- (+ eps x) x)) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x))) (sin (- (+ eps x) x)) (sin eps) (* (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (cos x)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (- (tan (+ x eps)) (tan x)) (* (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) eps) (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/ eps (pow (cos x) 2)) (pow (cos x) 2) (cos x) (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (/ 1 (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x))) (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/ (cos (+ eps x)) (sin (+ 0 eps))) (* (neg (sin eps)) (sin x)) (+ (* (cos x) (cos eps)) (* (neg (sin eps)) (sin x))) (+ (* (neg (sin x)) eps) (cos x)))","x","0"]],"time":75.64697265625,"type":"series"},{"count":[[139,138]],"egraph":[[0,8068,2831,0.091840707],[2,6728,2997,0.028961395],[1,2030,3045,0.024045855],[0,633,3230,0.007789285]],"inputs":[["(/ (sin eps) (cos eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(sin eps)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(+ 1 (* 1/3 (pow eps 2)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","eps","(+ eps (* eps (pow x 2)))","(+ eps (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(+ eps (* (pow x 2) (- (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (+ (* -2/45 eps) (* 2/3 eps))))) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","1","(+ 1 (* -1 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(/ 1 eps)","(+ (* -1 x) (/ 1 eps))","(+ (* x (- (* -1/2 (/ x eps)) 1)) (/ 1 eps))","(+ (* x (- (* x (- (* 1/6 x) (* 1/2 (/ 1 eps)))) 1)) (/ 1 eps))","(/ (cos eps) (sin eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1 (/ (cos eps) (sin eps))) (* 2/3 x))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* -1/2 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(+ (* x (- (* x (+ (* -1/2 (/ (cos eps) (sin eps))) (* 1/6 x))) 1)) (/ (cos eps) (sin eps)))","(* -1 (* x (sin eps)))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1/2 (* x (cos eps))))))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))))))","(+ 1 (* -1 (* eps x)))","(+ 1 (* x (+ (* -1 eps) (* -1/2 x))))","(+ 1 (* x (+ (* -1 eps) (* x (- (* 1/6 (* eps x)) 1/2)))))","(/ (sin eps) (* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))))","(* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x))))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(* (pow x 2) (+ 1 (* 4/3 (pow eps 2))))","(* (pow x 2) (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(* (pow x 2) (+ 1 (+ (* 1/3 (/ (pow eps 2) (pow x 2))) (+ (* 4/3 (pow eps 2)) (+ (/ 1 (pow x 2)) (/ eps x))))))","(* eps x)","(* x (+ eps (+ (* 1/3 (/ (pow eps 2) x)) (/ 1 x))))","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/ eps (pow (cos x) 2))","(pow (cos x) 2)","(cos x)","(/ (+ (cos x) (* -1 (* eps (sin x)))) eps)","(/ (* (cos x) (cos (+ eps x))) (sin eps))","(/ (cos (+ eps x)) (sin eps))","(* -1 (* (sin eps) (sin x)))","(+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))","(+ (cos x) (* -1 (* eps (sin x))))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(* (pow x 2) (+ 1 (+ (* -1 (/ (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x))) x)) (* 4/3 (pow eps 2)))))","(* -1 (* x (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x)))))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/ (* (cos x) (cos (- eps (* -1 x)))) (sin eps))","(/ (cos (- eps (* -1 x))) (sin eps))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(+ 1 (pow x 2))","(+ 1 (+ (* eps x) (pow x 2)))","(+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* 4/3 (pow x 2)))))) (pow x 2)))","(+ 1 (* eps x))","(+ 1 (* eps (+ x (* 1/3 eps))))","(/ (cos x) eps)","(/ (pow (cos x) 2) eps)","(/ (+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (+ (* -1/2 (pow (cos x) 2)) (* (pow eps 2) (- (* 1/24 (pow (cos x) 2)) (+ (* -1/6 (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))) (* 1/120 (pow (cos x) 2)))))) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (* -1/2 (cos x)) (* -1/6 (cos x))))))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (+ (* -1/2 (cos x)) (* (pow eps 2) (- (* 1/24 (cos x)) (+ (* -1/6 (- (* -1/2 (cos x)) (* -1/6 (cos x)))) (* 1/120 (cos x)))))) (* -1/6 (cos x))))))) eps)","(* -1 (* eps (sin x)))","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(+ (cos x) (* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))))","(+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (+ 1/3 (* 4/3 (pow x 2))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (/ x eps))))","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (+ (/ 1 (pow eps 2)) (+ (/ x eps) (/ (pow x 2) (pow eps 2)))))))","(* 1/3 (pow eps 2))","(* (pow eps 2) (+ 1/3 (/ x eps)))","(* (pow eps 2) (+ 1/3 (+ (/ 1 (pow eps 2)) (/ x eps))))","(* -1 (sin x))","(+ (* -1 (sin x)) (/ (cos x) eps))","(* eps (+ (* -1 (sin x)) (/ (cos x) eps)))","(/ (sin (neg (* -1 eps))) (* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))))","(sin (neg (* -1 eps)))","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(* (pow eps 2) (+ 1/3 (+ (* -1 (/ (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps))) eps)) (* 4/3 (pow x 2)))))","(* (pow eps 2) (+ 1/3 (* -1 (/ (- (* -1 x) (/ 1 eps)) eps))))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/ (* (cos x) (cos (- x (* -1 eps)))) (sin (neg (* -1 eps))))","(/ (cos (- x (* -1 eps))) (sin (neg (* -1 eps))))","(* -1 (* eps (+ (sin x) (* -1 (/ (cos x) eps)))))"]],"memory":[[1471136,49985824]],"method":["egg-herbie"],"outputs":[["(/ (sin eps) (cos eps))","(/.f64 (sin.f64 eps) (cos.f64 eps))","(+ (/ (sin eps) (cos eps)) (/ (* x (pow (sin eps) 2)) (pow (cos eps) 2)))","(fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (/.f64 x (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* -1 (* x (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 x (+.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))) (+ (/ (* (sin eps) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3))))) (cos eps)) (/ (* (sin eps) (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))) (pow (cos eps) 2)))))) (+ (* -1 (/ (sin eps) (cos eps))) (* -1 (/ (pow (sin eps) 3) (pow (cos eps) 3)))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (sin.f64 eps) (/.f64 #s(literal 2/3 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))) (cos.f64 eps))) (/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (-.f64 (neg.f64 (pow.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) #s(literal 3 binary64))) (/.f64 (sin.f64 eps) (cos.f64 eps))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(sin eps)","(sin.f64 eps)","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1 (* x (cos eps))))))","(fma.f64 (neg.f64 x) (fma.f64 (cos.f64 eps) x (sin.f64 eps)) (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1 (cos eps)) (* x (+ (* 1/6 (sin eps)) (* 1/2 (sin eps)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 2/3 binary64) (neg.f64 (cos.f64 eps))) x (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (* x (- (/ (* x (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))) (cos eps)) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (sin.f64 eps) (cos.f64 eps))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ (* x (- (* x (- (* -1 (* x (+ 1/2 (+ (* -1 (/ (* (pow (sin eps) 2) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (pow (cos eps) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (* 1/6 (/ (pow (sin eps) 2) (pow (cos eps) 2)))))))) (* -1 (/ (* (sin eps) (- 1 (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (cos eps))))) (* -1 (/ (pow (sin eps) 2) (pow (cos eps) 2))))) (/ (sin eps) (cos eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (cos.f64 eps)) (sin.f64 eps) (*.f64 (neg.f64 x) (fma.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (+.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) #s(literal 1/2 binary64))))) x (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps)))","(* eps (+ 1 (* 1/3 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps)","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* (pow eps 2) x))","(fma.f64 (*.f64 x eps) eps (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* eps (* x (+ 1 (* 4/3 (pow eps 2))))) (pow eps 2))))","(fma.f64 (*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ (* eps (+ 1 (* 1/3 (pow eps 2)))) (* x (+ (* x (+ (* eps (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps)))) (* eps (+ 1 (* 4/3 (pow eps 2)))))) (pow eps 2))))","(fma.f64 (fma.f64 (*.f64 x eps) (fma.f64 (*.f64 eps #s(literal 4/3 binary64)) x (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))) (*.f64 eps eps)) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/3 binary64) eps))","(+ 1 (* 1/3 (pow eps 2)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* eps x)))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (* 4/3 (pow eps 2))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","(+ 1 (+ (* 1/3 (pow eps 2)) (* x (+ eps (* x (+ 1 (+ (* 4/3 (pow eps 2)) (* x (- (+ eps (* -1/6 eps)) (* -1/2 eps))))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 eps #s(literal 4/3 binary64)) x (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","eps","(+ eps (* eps (pow x 2)))","(fma.f64 (*.f64 x x) eps eps)","(+ eps (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)","(+ eps (* (pow x 2) (- (* (pow x 2) (- (* -1 (* (pow x 2) (+ (* -1 eps) (+ (* -2/45 eps) (* 2/3 eps))))) (+ (* -1 eps) (* 1/3 eps)))) (* -1 eps))))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)","1","#s(literal 1 binary64)","(+ 1 (* -1 (pow x 2)))","(-.f64 #s(literal 1 binary64) (*.f64 x x))","(+ 1 (* (pow x 2) (- (* 1/3 (pow x 2)) 1)))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/3 binary64) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/3 (* -2/45 (pow x 2)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2/45 binary64) (*.f64 x x) #s(literal 1/3 binary64)) (*.f64 x x) #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) x #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(/ 1 eps)","(/.f64 #s(literal 1 binary64) eps)","(+ (* -1 x) (/ 1 eps))","(-.f64 (/.f64 #s(literal 1 binary64) eps) x)","(+ (* x (- (* -1/2 (/ x eps)) 1)) (/ 1 eps))","(fma.f64 (fma.f64 (/.f64 x eps) #s(literal -1/2 binary64) #s(literal -1 binary64)) x (/.f64 #s(literal 1 binary64) eps))","(+ (* x (- (* x (- (* 1/6 x) (* 1/2 (/ 1 eps)))) 1)) (/ 1 eps))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal -1/2 binary64) eps)) x #s(literal -1 binary64)) x (/.f64 #s(literal 1 binary64) eps))","(/ (cos eps) (sin eps))","(/.f64 (cos.f64 eps) (sin.f64 eps))","(+ (* -1 x) (/ (cos eps) (sin eps)))","(-.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) x)","(+ (* x (- (* -1 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) (neg.f64 x) #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* x (+ (* -1 (/ (cos eps) (sin eps))) (* 2/3 x))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) x) (/.f64 (cos.f64 eps) (sin.f64 eps))) x #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* -1/2 (/ (* x (cos eps)) (sin eps))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(+ (* x (- (* x (+ (* -1/2 (/ (cos eps) (sin eps))) (* 1/6 x))) 1)) (/ (cos eps) (sin eps)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (cos.f64 eps) (sin.f64 eps)) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) x #s(literal -1 binary64)) x (/.f64 (cos.f64 eps) (sin.f64 eps)))","(* -1 (* x (sin eps)))","(*.f64 (neg.f64 x) (sin.f64 eps))","(* x (+ (* -1 (sin eps)) (* 1/6 (* (pow x 2) (sin eps)))))","(*.f64 (*.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64))) x)","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* -1/120 (* (pow x 2) (sin eps))) (* 1/6 (sin eps))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (sin.f64 eps) (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 (neg.f64 x) (sin.f64 eps)))","(* x (+ (* -1 (sin eps)) (* (pow x 2) (+ (* 1/6 (sin eps)) (* (pow x 2) (+ (* -1/120 (sin eps)) (* 1/5040 (* (pow x 2) (sin eps)))))))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))) (*.f64 x x) (*.f64 #s(literal 1/6 binary64) (sin.f64 eps))) (*.f64 (neg.f64 x) (sin.f64 eps)))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* -1/2 (* x (cos eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 eps) (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (+ (* -1 (sin eps)) (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 eps))) x (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ 1 (* -1 (* eps x)))","(fma.f64 (neg.f64 x) eps #s(literal 1 binary64))","(+ 1 (* x (+ (* -1 eps) (* -1/2 x))))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) x (neg.f64 eps)) x #s(literal 1 binary64))","(+ 1 (* x (+ (* -1 eps) (* x (- (* 1/6 (* eps x)) 1/2)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) x (neg.f64 eps)) x #s(literal 1 binary64))","(/ (sin eps) (* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))))","(/.f64 (sin.f64 eps) (*.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (cos.f64 x)))","(* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x))))","(*.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (cos.f64 x))","(- (/ (sin (+ eps x)) (cos (+ eps x))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* eps (+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(+ (* (+ 1 (/ (* eps (sin x)) (cos x))) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))))","(fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps) (*.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (fma.f64 (sin.f64 x) (/.f64 eps (cos.f64 x)) #s(literal 1 binary64))))","(* (pow x 2) (+ 1 (* 4/3 (pow eps 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (+ (* 4/3 (pow eps 2)) (/ eps x))))","(*.f64 (*.f64 (+.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) (/.f64 eps x)) #s(literal 1 binary64)) x) x)","(* (pow x 2) (+ 1 (+ (* 1/3 (/ (pow eps 2) (pow x 2))) (+ (* 4/3 (pow eps 2)) (+ (/ 1 (pow x 2)) (/ eps x))))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/3 binary64) eps) x) (/.f64 eps x) (+.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) eps) eps (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) (/.f64 eps x))) #s(literal 1 binary64))) (*.f64 x x))","(* eps x)","(*.f64 x eps)","(* x (+ eps (+ (* 1/3 (/ (pow eps 2) x)) (/ 1 x))))","(*.f64 (+.f64 (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/3 binary64) (/.f64 #s(literal 1 binary64) x)) eps) x)","(/ (sin eps) (* (cos x) (cos (+ eps x))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/ eps (pow (cos x) 2))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow (cos x) 2)","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos x)","(cos.f64 x)","(/ (+ (cos x) (* -1 (* eps (sin x)))) eps)","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","(/ (* (cos x) (cos (+ eps x))) (sin eps))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(/ (cos (+ eps x)) (sin eps))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(* -1 (* (sin eps) (sin x)))","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(- (/ (sin (- eps (* -1 x))) (cos (- eps (* -1 x)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* (pow x 2) (+ 1 (+ (* -1 (/ (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x))) x)) (* 4/3 (pow eps 2)))))","(*.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)) x) eps) x) #s(literal 1 binary64) (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64))) (*.f64 x x))","(* -1 (* x (+ (* -1 eps) (* -1 (/ (+ 1 (* 1/3 (pow eps 2))) x)))))","(*.f64 x (+.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)) x) eps))","(/ (sin eps) (* (cos x) (cos (- eps (* -1 x)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/ (* (cos x) (cos (- eps (* -1 x)))) (sin eps))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(/ (cos (- eps (* -1 x))) (sin eps))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(* eps (+ (/ 1 (pow (cos x) 2)) (/ (* eps (sin x)) (pow (cos x) 3))))","(fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ (* eps (- (* eps (- (+ (* -1 (* eps (+ (* -1 (/ (* (sin x) (- (* 1/2 (/ 1 (pow (cos x) 2))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (cos x))) (+ (* -1/2 (/ (sin x) (pow (cos x) 3))) (* 1/6 (/ (sin x) (pow (cos x) 3))))))) (* 1/2 (/ 1 (pow (cos x) 2)))) (+ (* -1 (/ (pow (sin x) 2) (pow (cos x) 4))) (* 1/6 (/ 1 (pow (cos x) 2)))))) (* -1 (/ (sin x) (pow (cos x) 3))))) (/ 1 (pow (cos x) 2))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sin.f64 x)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (cos.f64 x)) (/.f64 (*.f64 (sin.f64 x) #s(literal -1/3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 eps) (-.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) eps)","(+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2))","(fma.f64 (neg.f64 (*.f64 (cos.f64 x) eps)) (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* -1/2 (* eps (pow (cos x) 2))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (+ (* -1/2 (pow (cos x) 2)) (* 1/6 (* eps (* (cos x) (sin x)))))))) (pow (cos x) 2))","(fma.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (cos.f64 x) eps)) (sin.f64 x) (*.f64 #s(literal -1/2 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(* eps (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (- (+ 1 (/ (* eps (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (cos x))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (- (+ 1 (* eps (- (* -1 (* eps (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (- (+ 1 (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (+ (* 1/6 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x))) (/ (* (sin x) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2))))))) (cos x)))))) (+ 1/6 (+ (* -1 (/ (* (pow (sin x) 2) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (pow (cos x) 2))) (+ (* -1/2 (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (* 1/6 (/ (pow (sin x) 2) (pow (cos x) 2)))))))) (* -1 (/ (* (sin x) (- 1 (* -1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)))))) (* -1 (/ (pow (sin x) 2) (pow (cos x) 2)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) #s(literal -1/3 binary64))) (neg.f64 eps) (-.f64 #s(literal -1/6 binary64) (-.f64 (fma.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1/2 binary64) (/.f64 (*.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) #s(literal 1/6 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (sin.f64 x)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))) eps)","(* eps (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps)","(* eps (+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(* eps (+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps eps)","(+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))","(fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64))","(+ 1 (+ (/ (* eps (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))) (cos x)) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (+ (* eps (+ (* eps (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)))) (/ (pow (sin x) 2) (pow (cos x) 2))))","(fma.f64 (fma.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) eps (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(+ 1 (pow x 2))","(fma.f64 x x #s(literal 1 binary64))","(+ 1 (+ (* eps x) (pow x 2)))","(fma.f64 x (+.f64 x eps) #s(literal 1 binary64))","(+ 1 (+ (* eps (+ x (* eps (+ 1/3 (* 4/3 (pow x 2)))))) (pow x 2)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64)) eps x) eps (fma.f64 x x #s(literal 1 binary64)))","(+ 1 (* eps x))","(fma.f64 x eps #s(literal 1 binary64))","(+ 1 (* eps (+ x (* 1/3 eps))))","(fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))","(/ (cos x) eps)","(/.f64 (cos.f64 x) eps)","(/ (pow (cos x) 2) eps)","(/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)","(/ (+ (* -1 (* eps (* (cos x) (sin x)))) (pow (cos x) 2)) eps)","(/.f64 (fma.f64 (neg.f64 (*.f64 (cos.f64 x) eps)) (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/.f64 (fma.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps) (*.f64 (cos.f64 x) (sin.f64 x))) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (+ (* eps (+ (* -1 (* (cos x) (sin x))) (* eps (- (+ (* -1/2 (pow (cos x) 2)) (* (pow eps 2) (- (* 1/24 (pow (cos x) 2)) (+ (* -1/6 (- (* -1/2 (pow (cos x) 2)) (* -1/6 (pow (cos x) 2)))) (* 1/120 (pow (cos x) 2)))))) (* -1/6 (pow (cos x) 2)))))) (pow (cos x) 2)) eps)","(/.f64 (fma.f64 (fma.f64 (neg.f64 (cos.f64 x)) (sin.f64 x) (*.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 #s(literal 1/120 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/18 binary64)))) (*.f64 eps eps) (*.f64 #s(literal -1/3 binary64) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps)) eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (* -1/2 (cos x)) (* -1/6 (cos x))))))) eps)","(/.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/3 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)","(/ (+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (- (+ (* -1/2 (cos x)) (* (pow eps 2) (- (* 1/24 (cos x)) (+ (* -1/6 (- (* -1/2 (cos x)) (* -1/6 (cos x)))) (* 1/120 (cos x)))))) (* -1/6 (cos x))))))) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1/24 binary64) (cos.f64 x)) (fma.f64 #s(literal 1/120 binary64) (cos.f64 x) (*.f64 (cos.f64 x) #s(literal 1/18 binary64)))) (*.f64 eps eps) (*.f64 #s(literal -1/3 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* eps (+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x)))))","(*.f64 (*.f64 (sin.f64 x) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) eps)","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* -1/120 (* (pow eps 2) (sin x))) (* 1/6 (sin x))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (sin.f64 x) (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))) (*.f64 (neg.f64 (sin.f64 x)) eps))","(* eps (+ (* -1 (sin x)) (* (pow eps 2) (+ (* 1/6 (sin x)) (* (pow eps 2) (+ (* -1/120 (sin x)) (* 1/5040 (* (pow eps 2) (sin x)))))))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 x) (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64))) (*.f64 eps eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) eps))","(+ (cos x) (* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x))","(+ (cos x) (* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (cos.f64 x))","(* (pow eps 3) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))))","(* (pow eps 3) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) eps) (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps)) (fma.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) (/.f64 (sin.f64 x) eps) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))) (*.f64 eps eps))","(* (pow eps 2) (- (+ (/ 1 (pow eps 2)) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x))) (+ (/ (pow (sin x) 2) (* (pow eps 2) (pow (cos x) 2))) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (+.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) eps) (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x)) eps)) (fma.f64 (/.f64 (sin.f64 x) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) (/.f64 (sin.f64 x) eps) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))))) (*.f64 eps eps))","(* (pow eps 2) (+ 1/3 (* 4/3 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64)) eps) eps)","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (/ x eps))))","(*.f64 (*.f64 (+.f64 (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) (/.f64 x eps)) #s(literal 1/3 binary64)) eps) eps)","(* (pow eps 2) (+ 1/3 (+ (* 4/3 (pow x 2)) (+ (/ 1 (pow eps 2)) (+ (/ x eps) (/ (pow x 2) (pow eps 2)))))))","(*.f64 (+.f64 (+.f64 #s(literal 1/3 binary64) (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) (/.f64 (/.f64 #s(literal 1 binary64) eps) eps))) (fma.f64 (/.f64 x eps) (/.f64 x eps) (/.f64 x eps))) (*.f64 eps eps))","(* 1/3 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 1/3 binary64))","(* (pow eps 2) (+ 1/3 (/ x eps)))","(*.f64 (*.f64 (+.f64 (/.f64 x eps) #s(literal 1/3 binary64)) eps) eps)","(* (pow eps 2) (+ 1/3 (+ (/ 1 (pow eps 2)) (/ x eps))))","(*.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) eps) #s(literal 1/3 binary64)) (/.f64 x eps)) (*.f64 eps eps))","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(+ (* -1 (sin x)) (/ (cos x) eps))","(-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x))","(* eps (+ (* -1 (sin x)) (/ (cos x) eps)))","(*.f64 (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x)) eps)","(/ (sin (neg (* -1 eps))) (* (cos x) (+ (* -1 (* (sin eps) (sin x))) (* (cos eps) (cos x)))))","(/.f64 (sin.f64 eps) (*.f64 (fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (cos.f64 x)))","(sin (neg (* -1 eps)))","(sin.f64 eps)","(- (/ (sin (- x (* -1 eps))) (cos (- x (* -1 eps)))) (/ (sin x) (cos x)))","(-.f64 (/.f64 (sin.f64 (+.f64 x eps)) (cos.f64 (+.f64 x eps))) (/.f64 (sin.f64 x) (cos.f64 x)))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (* eps (cos x)))))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (-.f64 (/.f64 (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (neg.f64 (cos.f64 x))) eps) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))))","(* -1 (* (pow eps 3) (+ (* -1 (- (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))))) (* -1 (/ (+ (/ 1 eps) (+ (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x)) (/ (pow (sin x) 2) (* eps (pow (cos x) 2))))) eps)))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (-.f64 (/.f64 (+.f64 (+.f64 (/.f64 #s(literal 1 binary64) eps) (/.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) (neg.f64 eps)) (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))))))","(* (pow eps 2) (- (+ (* -1 (/ (+ (* -1 (/ (* (sin x) (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2)))) (cos x))) (* -1 (/ (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))) eps))) eps)) (+ (/ (pow (sin x) 2) (pow (cos x) 2)) (/ (pow (sin x) 4) (pow (cos x) 4)))) (* -1/3 (+ 1 (/ (pow (sin x) 2) (pow (cos x) 2))))))","(*.f64 (fma.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1/3 binary64) (-.f64 (fma.f64 (sin.f64 x) (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) (/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) (/.f64 (+.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x)) (cos.f64 x))) eps))) (*.f64 eps eps))","(* (pow eps 2) (+ 1/3 (+ (* -1 (/ (+ (* -1 x) (* -1 (/ (+ 1 (pow x 2)) eps))) eps)) (* 4/3 (pow x 2)))))","(*.f64 (fma.f64 (/.f64 (+.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) eps) x) eps) #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 4/3 binary64) #s(literal 1/3 binary64))) (*.f64 eps eps))","(* (pow eps 2) (+ 1/3 (* -1 (/ (- (* -1 x) (/ 1 eps)) eps))))","(*.f64 (-.f64 #s(literal 1/3 binary64) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) eps) x) eps)) (*.f64 eps eps))","(/ (sin (neg (* -1 eps))) (* (cos x) (cos (- x (* -1 eps)))))","(/.f64 (/.f64 (sin.f64 eps) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/ (* (cos x) (cos (- x (* -1 eps)))) (sin (neg (* -1 eps))))","(*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps)))","(/ (cos (- x (* -1 eps))) (sin (neg (* -1 eps))))","(/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps))","(* -1 (* eps (+ (sin x) (* -1 (/ (cos x) eps)))))","(*.f64 (-.f64 (sin.f64 x) (/.f64 (cos.f64 x) eps)) (neg.f64 eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":361.64013671875,"type":"simplify"},{"count":[[23,319]],"egraph":[[0,9312,534,0.119775175],[2,4633,568,0.087688873],[1,507,580,0.028377025],[0,113,694,0.004862296],[0,81,718,0.000903959]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(sin.f64 eps)","(*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","(fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps)","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(cos.f64 x)","(/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x))","#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x)))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))"]],"memory":[[1510976,59961552]],"outputs":[["(*.f64 (pow.f64 (cos.f64 (+.f64 x eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps))) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) (pow.f64 (pow.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps))))","(*.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(*.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (cos.f64 (+.f64 x eps))))","(pow.f64 (/.f64 (cos.f64 x) (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 x)) (cos.f64 (+.f64 x eps)))","(/.f64 (*.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) #s(literal 1 binary64)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(/.f64 (neg.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))","(/.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps))) (cos.f64 x))","(/.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (cos.f64 (+.f64 x eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))","(neg.f64 (/.f64 (neg.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))","(neg.f64 (/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) #s(approx (sin (- (+ eps x) x)) (sin.f64 eps))))) #s(literal -1 binary64)))","#s(approx (sin (- (+ eps x) x)) (sin.f64 eps))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)) #s(literal 2 binary64))) (sin.f64 (+.f64 (+.f64 x eps) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal 2 binary64))) (neg.f64 (sin.f64 eps)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 0 binary64) (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps))))))","(fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x)))","(fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x))))","(fma.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x))))","(fma.f64 #s(literal 0 binary64) (cos.f64 eps) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(fma.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 x eps)) (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)))","(fma.f64 #s(literal 1 binary64) (sin.f64 eps) (*.f64 #s(literal 0 binary64) (cos.f64 eps)))","(fma.f64 (sin.f64 x) (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(fma.f64 (cos.f64 eps) #s(literal 0 binary64) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 x eps)) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x)))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 x eps)) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x))))","(fma.f64 (cos.f64 x) (sin.f64 (+.f64 x eps)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x))))","(fma.f64 (sin.f64 eps) #s(literal 1 binary64) (*.f64 #s(literal 0 binary64) (cos.f64 eps)))","(sin.f64 eps)","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (+.f64 (+.f64 x eps) x))) (cos.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 x eps) x)))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 2 binary64)) (+.f64 (+.f64 x eps) x))) (sin.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 x eps) x)))))","(-.f64 (*.f64 (sin.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))))) (cos.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))) (*.f64 (cos.f64 (/.f64 (pow.f64 (+.f64 x eps) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64))))) (sin.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x eps) x) (pow.f64 (+.f64 x eps) #s(literal 2 binary64)))))))","(-.f64 (*.f64 (sin.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (cos.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))) (*.f64 (cos.f64 (/.f64 #s(literal 0 binary64) (neg.f64 eps))) (sin.f64 (/.f64 (*.f64 eps eps) (neg.f64 eps)))))","(-.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x)))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cos.f64 (+.f64 x eps))) (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)))","(+.f64 (*.f64 (sin.f64 x) (cos.f64 (-.f64 eps x))) (*.f64 (cos.f64 x) (sin.f64 (-.f64 eps x))))","(+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (sin.f64 x)))","(+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (sin.f64 x))))","(+.f64 (*.f64 (sin.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (sin.f64 x))))","(+.f64 (*.f64 #s(literal 1 binary64) (sin.f64 eps)) (*.f64 #s(literal 0 binary64) (cos.f64 eps)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 eps)) (*.f64 #s(literal 1 binary64) (sin.f64 eps)))","(*.f64 (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 eps)) #s(literal 1/2 binary64))","(*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))","(pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 eps))) #s(literal -1 binary64))","(/.f64 (+.f64 (cos.f64 eps) (cos.f64 (-.f64 (+.f64 x eps) (neg.f64 x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cos.f64 x)) (cos.f64 (-.f64 eps x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64))) (cos.f64 x)) (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (cos.f64 x) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (cos.f64 (-.f64 eps x)))","(/.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 eps))) #s(literal -2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 (-.f64 x (+.f64 x eps)))) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 eps)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 (+.f64 (+.f64 x eps) x)) (cos.f64 eps))))","(fma.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (cos.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (cos.f64 x) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x)))","(fma.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))))","(fma.f64 (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))))","(+.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x)) (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (cos.f64 x)))","(+.f64 (*.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (cos.f64 x)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))))","(+.f64 (*.f64 (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))) (*.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps)","(*.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) #s(literal 0 binary64)))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) #s(literal 0 binary64)))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64))))","#s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (*.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x eps) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64))) (-.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (-.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps)) (pow.f64 (*.f64 x eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x eps) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/3 binary64) eps) eps (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 x eps))","(fma.f64 (fma.f64 #s(literal 1/27 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/9 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))) #s(literal -1 binary64)) (*.f64 x eps))","(fma.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 (*.f64 eps eps) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 x eps (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/3 binary64) eps) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))","(fma.f64 eps (*.f64 #s(literal 1/3 binary64) eps) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(fma.f64 eps x (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 x eps) #s(literal 2 binary64)) (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))))","(+.f64 (fma.f64 x eps #s(literal 1 binary64)) (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)))","(+.f64 (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))) #s(literal 1 binary64))","(+.f64 (*.f64 x eps) (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)))","(+.f64 (fma.f64 #s(literal 1/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) (*.f64 x eps))","(+.f64 (*.f64 #s(literal 1/3 binary64) (*.f64 eps eps)) (+.f64 #s(literal 1 binary64) (*.f64 x eps)))","(+.f64 #s(literal 1 binary64) (*.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps))","(*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps)","(*.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(/.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) #s(literal 0 binary64) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))))","(fma.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) #s(literal 0 binary64)))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))))","(fma.f64 eps #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) #s(literal 0 binary64)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps) (*.f64 #s(literal 0 binary64) #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))))","(+.f64 (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) eps) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64))) #s(literal 0 binary64)))","#s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (+.f64 x (*.f64 #s(literal 1/3 binary64) eps)) #s(literal 1 binary64)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 (*.f64 eps eps))) #s(literal -1 binary64)) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 (neg.f64 eps) (pow.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 eps (cos.f64 x)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps)","(*.f64 #s(literal 1 binary64) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 eps (pow.f64 (cos.f64 x) #s(literal -2 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) (neg.f64 eps))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal -2 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(/.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (neg.f64 (*.f64 eps eps)) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 2 binary64)))","(/.f64 (/.f64 eps (cos.f64 x)) (cos.f64 x))","(/.f64 (neg.f64 eps) (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 eps eps)) (*.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (neg.f64 eps)))","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps))","(/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))","(neg.f64 (/.f64 (neg.f64 eps) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(neg.f64 (/.f64 eps (neg.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)) #s(literal -1 binary64)))","(*.f64 (cos.f64 x) (cos.f64 x))","(pow.f64 (exp.f64 #s(literal 2 binary64)) (log.f64 (cos.f64 x)))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1 binary64))","(pow.f64 (cos.f64 x) #s(literal 2 binary64))","(/.f64 (+.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64)) #s(literal 2 binary64))","(-.f64 #s(literal 1 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))","(exp.f64 (+.f64 (log.f64 (cos.f64 x)) (log.f64 (cos.f64 x))))","(exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 2 binary64)))","(+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))","(pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (log.f64 (cos.f64 x)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(*.f64 (pow.f64 (/.f64 eps (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 eps (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) (neg.f64 (*.f64 eps eps))) (neg.f64 eps))","(*.f64 (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal -1 binary64)) (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)))","(*.f64 (neg.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))) (pow.f64 (neg.f64 eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))","(pow.f64 (/.f64 (/.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 eps #s(literal -1 binary64))) (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 eps #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 1 binary64)) eps)","(/.f64 (neg.f64 (neg.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)))) (neg.f64 (neg.f64 eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))) eps))","(/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))) eps))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (*.f64 eps (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))) (neg.f64 eps))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)))))","(/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))) eps))","(neg.f64 (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) (neg.f64 eps)))","(exp.f64 (*.f64 (log.f64 (/.f64 eps (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal -1 binary64)) (pow.f64 (cos.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (pow.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (neg.f64 (cos.f64 x)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))))","(pow.f64 (exp.f64 (log.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (cos.f64 x) (pow.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal -1 binary64))) (neg.f64 (cos.f64 x)))","(/.f64 (pow.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal -1 binary64)) (cos.f64 x))","(/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (cos.f64 x)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 x) (pow.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 (cos.f64 x)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)))))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal 1 binary64))","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (/.f64 (cos.f64 x) #s(literal 1 binary64)))","(*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (/.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) #s(literal 1 binary64)))","(*.f64 (cos.f64 x) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)))","(pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 (*.f64 (neg.f64 (cos.f64 x)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps)) (cos.f64 x))) #s(literal -1 binary64))))","#s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x)) eps))","(*.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))","(*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)))","(*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))","(*.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)))","(neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 x) (sin.f64 eps))))))","(/.f64 (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (neg.f64 (cos.f64 (-.f64 eps x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cos.f64 (-.f64 eps x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (sin.f64 x)) (neg.f64 (sin.f64 eps))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (-.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x))) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) #s(literal 1/2 binary64) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))))","(fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(-.f64 (*.f64 (cos.f64 (+.f64 x #s(literal 0 binary64))) (cos.f64 eps)) (*.f64 (sin.f64 (+.f64 x #s(literal 0 binary64))) (sin.f64 eps)))","(-.f64 (*.f64 #s(literal 1 binary64) (cos.f64 (+.f64 x eps))) (*.f64 #s(literal 0 binary64) (sin.f64 (+.f64 x eps))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 (+.f64 #s(literal 0 binary64) x))) (*.f64 (sin.f64 eps) (sin.f64 (+.f64 #s(literal 0 binary64) x))))","(-.f64 (*.f64 (cos.f64 (+.f64 x eps)) #s(literal 1 binary64)) (*.f64 (sin.f64 (+.f64 x eps)) #s(literal 0 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 eps x))) (/.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) #s(literal 2 binary64)) (cos.f64 (-.f64 eps x))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 x) (sin.f64 eps)))","(cos.f64 (+.f64 x eps))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))))","(+.f64 (*.f64 (sin.f64 x) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 eps) (cos.f64 x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (cos.f64 x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x))) (-.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x))) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (cos.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(fma.f64 (*.f64 eps #s(literal -1 binary64)) (sin.f64 x) (cos.f64 x))","(fma.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) eps) (cos.f64 x))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(fma.f64 (sin.f64 x) (neg.f64 eps) (cos.f64 x))","(fma.f64 eps (neg.f64 (sin.f64 x)) (cos.f64 x))","(-.f64 (/.f64 (pow.f64 (*.f64 (sin.f64 x) eps) #s(literal 2 binary64)) (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (fma.f64 (neg.f64 eps) (sin.f64 x) (neg.f64 (cos.f64 x)))))","(-.f64 (cos.f64 x) (*.f64 (sin.f64 x) eps))","(+.f64 (*.f64 (neg.f64 eps) (sin.f64 x)) (cos.f64 x))","(+.f64 (cos.f64 x) (*.f64 (neg.f64 eps) (sin.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":435.921875,"type":"rewrite"},{"compiler":[[26469,2330]],"memory":[[-6007728,54949968]],"time":171.826171875,"type":"eval"},{"alts":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) #s(approx (* (neg (sin eps)) (sin x)) (*.f64 (*.f64 (sin.f64 x) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) eps))) (cos.f64 x)))","fresh",0.1209951067764938,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","done",0.07291970401790726,"binary64"],["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 #s(approx (cos (+ eps x)) (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))) (cos.f64 x)))","fresh",0.43210719474274417,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps))))","fresh",0.21354405427702874,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/3 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)) (cos.f64 x)))","fresh",0.35587683575728996,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","done",0.5703213281779558,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) #s(approx (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x)))) (cos.f64 x)))","fresh",0.5742275781781787,"binary64"],["(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","done",23.409979767845932,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","done",23.52383671621046,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64))))","fresh",39.69637111541117,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","fresh",0.7167327386952858,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","fresh",1.264788165119794,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","fresh",1.4072408880845244,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))","fresh",0.7128258997516544,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)))","fresh",1.098712409613115,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","fresh",1.0912345698951729,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","fresh",1.3985244339629699,"binary64"],["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","fresh",1.1018843069099309,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","fresh",1.3985238522108405,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","fresh",1.4009420302045426,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","done",1.3985238522108405,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","done",1.105743686580462,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))","fresh",59.97209812679679,"binary64"],["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","fresh",60.44663237396415,"binary64"]],"compiler":[[2073,357],[36,24],[17,12],[25,15],[12,10],[30,20],[24,17],[33,23],[16,10],[7,6],[25,17],[25,17],[27,17],[23,15],[21,14],[43,24],[35,19],[40,23],[42,24],[80,37],[101,48],[82,38],[99,47],[105,51],[88,41]],"count":[[549,24]],"kept":[{"done":[4,3],"fresh":[11,6],"new":[529,12],"picked":[5,3]}],"memory":[[1194272,44795712]],"min-error":[[0.00390625,"binary64"]],"time":66.994873046875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1,"binary64"],["eps",0.01171875,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.01171875,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[50,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))) (neg.f64 (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) #s(approx (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x)))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 #s(approx (cos (+ eps x)) (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/3 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)) (cos.f64 x)))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","(fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (tan.f64 x)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) #s(approx (* (neg (sin eps)) (sin x)) (*.f64 (*.f64 (sin.f64 x) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) eps))) (cos.f64 x)))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64))) eps))","(/.f64 (fma.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (cos.f64 x) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (neg.f64 (sin.f64 x)))) (*.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)) (cos.f64 x)))","(/.f64 #s(approx (/ (sin (- (+ eps x) x)) (cos (+ eps x))) (fma.f64 (*.f64 (fma.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (cos.f64 x)) (-.f64 (/.f64 #s(literal 1/6 binary64) (cos.f64 x)) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) eps (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) eps) eps (/.f64 eps (cos.f64 x)))) (cos.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (fma.f64 eps (tan.f64 x) #s(literal 1 binary64)) (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/3 binary64) (fma.f64 (tan.f64 x) (tan.f64 x) #s(literal 1 binary64)) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) (fma.f64 (sin.f64 x) (sin.f64 x) (pow.f64 (*.f64 (sin.f64 x) (tan.f64 x)) #s(literal 2 binary64))))))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (fma.f64 (/.f64 x (cos.f64 eps)) (+.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64))) (sin.f64 eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) x (/.f64 (sin.f64 eps) (cos.f64 eps))))","#s(approx (- (/ (+ (tan eps) (tan x)) (+ (* (neg (tan eps)) (tan x)) 1)) (tan x)) (+.f64 (-.f64 (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64))) (/.f64 (sin.f64 x) (cos.f64 x))) (/.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (fma.f64 (neg.f64 (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (cos.f64 eps)) #s(literal 1 binary64)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (fma.f64 (sin.f64 x) (sin.f64 x) (/.f64 (pow.f64 (sin.f64 x) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) #s(literal -1/3 binary64))) eps) eps (*.f64 (fma.f64 (/.f64 (sin.f64 x) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (sin.f64 x) #s(literal 1 binary64)) (+.f64 (/.f64 (*.f64 (sin.f64 x) eps) (cos.f64 x)) #s(literal 1 binary64)))) eps))"]],"memory":[[3023152,18955968]],"oracle":[62.474628236070465],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))"]],"repr":["binary64"],"time":57.97314453125,"times":[[17.529052734375,"x"],[15.634033203125,"eps"],[18.382080078125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.07291970401790726],"baseline":[0.07291970401790726],"branch":[["x",0.07291970401790726,1,"binary64"],["eps",0.07291970401790726,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.07291970401790726,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[42,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(fma.f64 (sin.f64 x) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 x))) (tan.f64 (+.f64 eps x)))","(/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 (+.f64 eps x))) (/.f64 #s(literal 1 binary64) (neg.f64 (cos.f64 (+.f64 eps x)))) (neg.f64 (tan.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) #s(approx (/ (+ (* (neg (sin x)) eps) (cos x)) eps) (-.f64 (/.f64 (cos.f64 x) eps) (sin.f64 x)))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 (cos.f64 (+.f64 x eps)) (/.f64 (cos.f64 x) (sin.f64 eps))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 x eps)) (sin.f64 eps)) (cos.f64 x)))","(/.f64 (/.f64 (sin.f64 (-.f64 (+.f64 eps x) x)) (cos.f64 (+.f64 eps x))) (cos.f64 x))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (cos.f64 (+.f64 eps x)) (sin.f64 (+.f64 #s(literal 0 binary64) eps))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x)) eps)) (cos.f64 x)))","#s(approx (- (tan (+ x eps)) (tan x)) (fma.f64 (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) eps eps))","(*.f64 (pow.f64 (cos.f64 x) #s(literal -1 binary64)) (/.f64 (sin.f64 (+.f64 #s(literal 0 binary64) eps)) (cos.f64 (+.f64 eps x))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 #s(approx (cos (+ eps x)) (fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))) (cos.f64 x)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(approx (/ (cos (+ eps x)) (sin (+ 0 eps))) (/.f64 (fma.f64 (fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/3 binary64) (neg.f64 (sin.f64 x))) eps (cos.f64 x)) eps)) (cos.f64 x)))","(-.f64 (/.f64 (+.f64 (tan.f64 eps) (tan.f64 x)) (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64))) (tan.f64 x))","(fma.f64 (neg.f64 (+.f64 (tan.f64 eps) (tan.f64 x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 (tan.f64 eps)) (tan.f64 x) #s(literal 1 binary64)))) (neg.f64 (tan.f64 x)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (fma.f64 (*.f64 (sin.f64 x) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) eps (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64)))))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) #s(approx (* (neg (sin eps)) (sin x)) (*.f64 (*.f64 (sin.f64 x) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps #s(literal -1 binary64))) eps))) (cos.f64 x)))"]],"memory":[[1001936,16621312]],"oracle":[62.474628236070465],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))"]],"repr":["binary64"],"time":39.888916015625,"times":[[9.18212890625,"x"],[11.283935546875,"eps"],[16.045166015625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.7128258997516544],"baseline":[0.7128258997516544],"branch":[["x",0.7128258997516544,1,"binary64"],["eps",0.7128258997516544,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.7128258997516544,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[24,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))","(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))","#s(approx (- (tan (+ x eps)) (tan x)) (/.f64 (sin.f64 eps) (cos.f64 eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) #s(approx (* (/ (cos (+ eps x)) (sin (+ 0 eps))) (cos x)) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64))))"]],"memory":[[3272256,11359872]],"oracle":[62.474628236070465],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))"]],"repr":["binary64"],"time":20.154052734375,"times":[[5.81591796875,"x"],[6.3369140625,"eps"],[5.89794921875,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[0.7167327386952856],"baseline":[0.7167327386952858],"branch":[["x",0.7167327386952856,1,"binary64"],["eps",0.7167327386952858,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",0.7167327386952856,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[18,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))"]],"memory":[[-8764432,9713072]],"oracle":[60.54623036907085],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))"]],"repr":["binary64"],"time":21.21484375,"times":[[6.37109375,"x"],[6.052978515625,"eps"],[5.81005859375,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.0912345698951729],"baseline":[1.0912345698951729],"branch":[["x",1.0912345698951726,1,"binary64"],["eps",1.0912345698951729,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.0912345698951729,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[17,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 #s(approx (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) (fma.f64 (*.f64 #s(literal 4/3 binary64) (*.f64 eps eps)) x eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x eps) x (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (-.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 (*.f64 (*.f64 eps #s(literal -17/45 binary64)) x) x)) (*.f64 x x) eps) (*.f64 x x) eps)))"]],"memory":[[1330768,9381216]],"oracle":[60.54623036907085],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))"]],"repr":["binary64"],"time":16.92919921875,"times":[[5.510986328125,"x"],[5.046142578125,"eps"],[4.2509765625,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.1018843069099309],"baseline":[1.1018843069099309],"branch":[["x",1.1018843069099309,1,"binary64"],["eps",1.1018843069099309,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.1018843069099309,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[12,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 eps (fma.f64 #s(literal 1/3 binary64) eps x) #s(literal 1 binary64))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 (fma.f64 #s(literal 1/3 binary64) eps x) eps #s(literal 1 binary64))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) (-.f64 #s(literal 1 binary64) (*.f64 x x)))))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) (fma.f64 x eps (fma.f64 (*.f64 eps eps) #s(literal 1/3 binary64) #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 #s(literal 4/3 binary64) (*.f64 eps eps) #s(literal 1 binary64)) x) x))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 4/3 binary64) #s(literal 1 binary64)) x) x))) eps))"]],"memory":[[-233040,7933408]],"oracle":[60.54623036907085],"outputs":[["#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))"]],"repr":["binary64"],"time":10.704833984375,"times":[[3.153076171875,"x"],[3.076904296875,"eps"],[3.093017578125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[1.105743686580462],"baseline":[1.105743686580462],"branch":[["x",1.1057436865804622,1,"binary64"],["eps",1.105743686580462,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",1.105743686580462,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[4,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 x eps) eps eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps #s(approx (pow (cos x) 2) #s(literal 1 binary64))))"]],"memory":[[5634704,5634704]],"oracle":[60.463160611891865],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))"]],"repr":["binary64"],"time":7.06005859375,"times":[[1.72900390625,"x"],[1.64404296875,"eps"],[2.7861328125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"accuracy":[60.446632373964114],"baseline":[60.44663237396415],"branch":[["x",60.446632373964135,1,"binary64"],["eps",60.446632373964114,1,"binary64"],["(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))",60.446632373964114,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[1,1]],"inputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))"]],"link":["."],"memory":[[-6478544,4859824]],"name":["2tan (problem 3.3.2)"],"oracle":[60.44663237396415],"outputs":[["#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))"]],"repr":["binary64"],"time":5.3701171875,"times":[[1.56201171875,"x"],[1.077880859375,"eps"],[1.880126953125,"(-.f64 (tan.f64 (+.f64 x eps)) (tan.f64 x))"]],"type":"regimes"},{"egraph":[[4,3931,307,0.038252394],[3,944,323,0.022629552],[2,338,325,0.00623603],[1,172,337,0.003238783],[0,103,351,0.001989528]],"inputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))"]],"memory":[[-1506528,14374336]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x))) (cos.f64 x)))","(/.f64 #s(approx (sin (- (+ eps x) x)) (sin.f64 eps)) (*.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (*.f64 (pow.f64 (cos.f64 x) #s(literal -2 binary64)) eps))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) (/.f64 eps (+.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 (*.f64 #s(literal 2 binary64) x)) #s(literal 1/2 binary64)))))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (/ eps (pow (cos x) 2)) (fma.f64 (fma.f64 (*.f64 #s(literal 2/3 binary64) eps) (*.f64 x x) eps) (*.f64 x x) eps)))","#s(approx (/ (sin (- (+ eps x) x)) (* (cos (+ eps x)) (cos x))) #s(approx (+ (* (* (sin x) (/ eps (pow (cos x) 3))) eps) (/ eps (pow (cos x) 2))) (fma.f64 (*.f64 eps (+.f64 x eps)) x eps)))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* (+ (* (+ (* 4/3 (* eps eps)) 1) x) eps) x) (+ (* (* eps eps) 1/3) 1)) (fma.f64 x x #s(literal 1 binary64)))) eps))","#s(approx (- (tan (+ x eps)) (tan x)) (*.f64 #s(approx (+ (* (* (- (/ (+ (* (sin x) (sin x)) (/ (pow (sin x) 4) (pow (cos x) 2))) (pow (cos x) 2)) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) -1/3)) eps) eps) (* (+ (* (/ (sin x) (pow (cos x) 2)) (sin x)) 1) (+ (/ (* (sin x) eps) (cos x)) 1))) #s(approx (+ (* x eps) (+ (* (* eps eps) 1/3) 1)) (*.f64 x eps))) eps))"]],"stop":[["node limit",1]],"time":127.0927734375,"type":"simplify"},{"compiler":[[351,105],[0,2],[0,2],[0,2],[0,2],[0,2],[0,2],[17,12],[21,13],[0,2],[6,6],[21,13],[21,14],[6,6],[21,13],[21,14],[6,6],[21,13],[10,8],[21,13],[41,19],[10,8],[21,13]],"egraph":[[0,8166,16,0.062339382],[3,6137,16,0.042699105],[2,402,16,0.017243321],[1,50,16,0.001499377],[0,10,16,0.000615474],[0,6,16,8.8967e-5],[0,8814,494,0.079442776],[2,4280,514,0.043540587],[1,461,526,0.01443626],[0,105,627,0.002816436],[0,71,653,0.000517548],[0,8335,686,0.08422186],[3,6077,710,0.025693173],[2,1539,873,0.018126945],[1,464,884,0.004284999],[0,157,950,0.001520186],[0,8241,2776,0.092781686],[2,6339,2940,0.034312444],[1,2010,3077,0.020964367],[0,641,3253,0.006264401],[0,8068,2831,0.097132894],[2,6728,2997,0.028309653],[1,2030,3045,0.02602997],[0,633,3230,0.007085081],[0,9312,534,0.089753153],[2,4633,568,0.050663899],[1,507,580,0.015023562],[0,113,694,0.00287978],[0,81,718,0.000528612],[0,8213,2811,0.10221507],[2,6395,2996,0.031172639],[1,1967,3055,0.024170872],[0,625,3216,0.009178479]],"memory":[[3745216,11937296]],"stop":[["fuel",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["node limit",1],["iter limit",1],["iter limit",1],["node limit",1]],"time":2351.10205078125,"type":"soundness"},{"compiler":[[351,105],[351,105],[9,6],[9,6],[7,6],[7,6]],"memory":[[1388000,34103488]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":48.10302734375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.010009765625,"type":"end"}]